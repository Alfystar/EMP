
STM_EMP_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c84  08008c84  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c8c  08008c8c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  200001f4  08008e88  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e24  08008e88  00021e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1dd  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000428c  00000000  00000000  0003e401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00042690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00043ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d89  00000000  00000000  00044d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001965f  00000000  00000000  0006caf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf93e  00000000  00000000  00086150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155a8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  00155ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f4 	.word	0x200001f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bd4 	.word	0x08008bd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f8 	.word	0x200001f8
 80001c4:	08008bd4 	.word	0x08008bd4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_Z14readMPcallBackPN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEE>:


packArd2Linux pWrite { 0, "Hi sys" };
packLinux2Ard pRead;
void readMPcallBack(
		MP<packLinux2Ard, packArd2Linux, STM32MP_templateDefault()> *instance) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	instance->getData_wait(&pRead);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3304      	adds	r3, #4
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	490c      	ldr	r1, [pc, #48]	; (8000504 <_Z14readMPcallBackPN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEE+0x44>)
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	4798      	blx	r3
	pWrite.num = pRead.num + 1;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <_Z14readMPcallBackPN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEE+0x44>)
 80004d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	3301      	adds	r3, #1
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	b21a      	sxth	r2, r3
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <_Z14readMPcallBackPN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEE+0x48>)
 80004e6:	801a      	strh	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <_Z14readMPcallBackPN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEE+0x48>)
 80004ee:	60bb      	str	r3, [r7, #8]
/// Data Send & Get
/*    On success return 0
 *    On fail return -1
 */

templatePar() int MP<templateParCall()>::packSend(pOut *pack) { return packSend(pack, sizeof(pOut)); }
 80004f0:	220c      	movs	r2, #12
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	68f8      	ldr	r0, [r7, #12]
 80004f6:	f000 fa99 	bl	8000a2c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t>
	instance->packSend(&pWrite);
}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000304 	.word	0x20000304
 8000508:	20000000 	.word	0x20000000

0800050c <main>:



int main(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 8000512:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000514:	f001 fb14 	bl	8001b40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000518:	f000 f81e 	bl	8000558 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051c:	f000 f950 	bl	80007c0 <_ZL12MX_GPIO_Initv>
	MX_I2C1_Init();
 8000520:	f000 f8aa 	bl	8000678 <_ZL12MX_I2C1_Initv>
	MX_I2S3_Init();
 8000524:	f000 f8dc 	bl	80006e0 <_ZL12MX_I2S3_Initv>
	MX_SPI1_Init();
 8000528:	f000 f90e 	bl	8000748 <_ZL12MX_SPI1_Initv>
	MX_USB_DEVICE_Init();
 800052c:	f007 fd8a 	bl	8008044 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	MP_ST_usb<packLinux2Ard, packArd2Linux, STM32MP_templateDefault()>::callBacksMP callBack;
 8000530:	2300      	movs	r3, #0
 8000532:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
	callBack.pkDetect= readMPcallBack;
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <main+0x48>)
 8000538:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c

	MP_ST_usb<packLinux2Ard, packArd2Linux, STM32MP_templateDefault()> MP_ST_class(callBack);
 800053c:	463b      	mov	r3, r7
 800053e:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fa40 	bl	80009c8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE>
	/* USER CODE END 2 */

	/* Infinite loop */

	while (1) {
		HAL_Delay(1000);
 8000548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054c:	f001 fb6a 	bl	8001c24 <HAL_Delay>
 8000550:	e7fa      	b.n	8000548 <main+0x3c>
 8000552:	bf00      	nop
 8000554:	080004c1 	.word	0x080004c1

08000558 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b098      	sub	sp, #96	; 0x60
 800055c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800055e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f008 fae8 	bl	8008b3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800056c:	f107 031c 	add.w	r3, r7, #28
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	4b38      	ldr	r3, [pc, #224]	; (8000670 <_Z18SystemClock_Configv+0x118>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	4a37      	ldr	r2, [pc, #220]	; (8000670 <_Z18SystemClock_Configv+0x118>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000598:	6413      	str	r3, [r2, #64]	; 0x40
 800059a:	4b35      	ldr	r3, [pc, #212]	; (8000670 <_Z18SystemClock_Configv+0x118>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b32      	ldr	r3, [pc, #200]	; (8000674 <_Z18SystemClock_Configv+0x11c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a31      	ldr	r2, [pc, #196]	; (8000674 <_Z18SystemClock_Configv+0x11c>)
 80005b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <_Z18SystemClock_Configv+0x11c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005d6:	2308      	movs	r3, #8
 80005d8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005da:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fd6d 	bl	80040cc <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <_Z18SystemClock_Configv+0xae>
		Error_Handler();
 8000602:	f000 f9db 	bl	80009bc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000612:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f003 ffc9 	bl	80045bc <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <_Z18SystemClock_Configv+0xe6>
		Error_Handler();
 800063a:	f000 f9bf 	bl	80009bc <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800063e:	2301      	movs	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000642:	23c0      	movs	r3, #192	; 0xc0
 8000644:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4618      	mov	r0, r3
 8000650:	f004 f99c 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <_Z18SystemClock_Configv+0x110>
		Error_Handler();
 8000664:	f000 f9aa 	bl	80009bc <Error_Handler>
	}
}
 8000668:	bf00      	nop
 800066a:	3760      	adds	r7, #96	; 0x60
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <_ZL12MX_I2C1_Initv+0x60>)
 8000680:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000684:	4a15      	ldr	r2, [pc, #84]	; (80006dc <_ZL12MX_I2C1_Initv+0x64>)
 8000686:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80006b6:	f001 fda1 	bl	80021fc <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 80006ca:	f000 f977 	bl	80009bc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000210 	.word	0x20000210
 80006d8:	40005400 	.word	0x40005400
 80006dc:	000186a0 	.word	0x000186a0

080006e0 <_ZL12MX_I2S3_Initv>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <_ZL12MX_I2S3_Initv+0x60>)
 80006e8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 8000708:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <_ZL12MX_I2S3_Initv+0x64>)
 800070a:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <_ZL12MX_I2S3_Initv+0x5c>)
 8000720:	f001 feb0 	bl	8002484 <HAL_I2S_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	bf14      	ite	ne
 800072a:	2301      	movne	r3, #1
 800072c:	2300      	moveq	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <_ZL12MX_I2S3_Initv+0x58>
		Error_Handler();
 8000734:	f000 f942 	bl	80009bc <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000264 	.word	0x20000264
 8000740:	40003c00 	.word	0x40003c00
 8000744:	00017700 	.word	0x00017700

08000748 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 800074e:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <_ZL12MX_SPI1_Initv+0x74>)
 8000750:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000794:	220a      	movs	r2, #10
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <_ZL12MX_SPI1_Initv+0x70>)
 800079a:	f004 fa37 	bl	8004c0c <HAL_SPI_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 80007ae:	f000 f905 	bl	80009bc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200002ac 	.word	0x200002ac
 80007bc:	40013000 	.word	0x40013000

080007c0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b71      	ldr	r3, [pc, #452]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a70      	ldr	r2, [pc, #448]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b6e      	ldr	r3, [pc, #440]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b6a      	ldr	r3, [pc, #424]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a69      	ldr	r2, [pc, #420]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b67      	ldr	r3, [pc, #412]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b63      	ldr	r3, [pc, #396]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a62      	ldr	r2, [pc, #392]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b60      	ldr	r3, [pc, #384]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a5b      	ldr	r2, [pc, #364]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b59      	ldr	r3, [pc, #356]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b55      	ldr	r3, [pc, #340]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a54      	ldr	r2, [pc, #336]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b52      	ldr	r3, [pc, #328]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a4d      	ldr	r2, [pc, #308]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4848      	ldr	r0, [pc, #288]	; (80009a4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000884:	f001 fca0 	bl	80021c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4846      	ldr	r0, [pc, #280]	; (80009a8 <_ZL12MX_GPIO_Initv+0x1e8>)
 800088e:	f001 fc9b 	bl	80021c8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000892:	2200      	movs	r2, #0
 8000894:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000898:	4844      	ldr	r0, [pc, #272]	; (80009ac <_ZL12MX_GPIO_Initv+0x1ec>)
 800089a:	f001 fc95 	bl	80021c8 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	483b      	ldr	r0, [pc, #236]	; (80009a4 <_ZL12MX_GPIO_Initv+0x1e4>)
 80008b6:	f001 faeb 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4835      	ldr	r0, [pc, #212]	; (80009a8 <_ZL12MX_GPIO_Initv+0x1e8>)
 80008d2:	f001 fadd 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d6:	2308      	movs	r3, #8
 80008d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	482d      	ldr	r0, [pc, #180]	; (80009a8 <_ZL12MX_GPIO_Initv+0x1e8>)
 80008f2:	f001 facd 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <_ZL12MX_GPIO_Initv+0x1f0>)
 80008fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	482a      	ldr	r0, [pc, #168]	; (80009b4 <_ZL12MX_GPIO_Initv+0x1f4>)
 800090a:	f001 fac1 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4825      	ldr	r0, [pc, #148]	; (80009b8 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000922:	f001 fab5 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000938:	2305      	movs	r3, #5
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	481d      	ldr	r0, [pc, #116]	; (80009b8 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000944:	f001 faa4 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000948:	f24f 0310 	movw	r3, #61456	; 0xf010
 800094c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4812      	ldr	r0, [pc, #72]	; (80009ac <_ZL12MX_GPIO_Initv+0x1ec>)
 8000962:	f001 fa95 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000966:	2320      	movs	r3, #32
 8000968:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <_ZL12MX_GPIO_Initv+0x1ec>)
 800097a:	f001 fa89 	bl	8001e90 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097e:	2302      	movs	r3, #2
 8000980:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000984:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000992:	f001 fa7d 	bl	8001e90 <HAL_GPIO_Init>

}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	10120000 	.word	0x10120000
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE>:
templatePar()
MP_ST_usb<templateParCall()>::MP_ST_usb() : MP_ST_usb<templateParCall()>(callBacksMP()) {
}

templatePar()
MP_ST_usb<templateParCall()>::MP_ST_usb(callBacksMP callBack) : MP<templateParCall()>(callBack) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f8c6 	bl	8000b68 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS3_10_callBacksE>
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x50>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f8e1 	bl	8000bb0 <_ZN14CircularBufferIhLt368EEC1Ev>
	byteSend.memClean();
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f8ef 	bl	8000bd8 <_ZN14CircularBufferIhLt368EE8memCleanEv>
	instance = this;
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x54>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6013      	str	r3, [r2, #0]
	USBD_Interface_fops_FS.Receive = MP_ST_usb<templateParCall()>::isrRead;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x58>)
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x5c>)
 8000a04:	60da      	str	r2, [r3, #12]
	USBD_Interface_fops_FS.TransmitCplt = MP_ST_usb<templateParCall()>::isrSendNotify;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x58>)
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x60>)
 8000a0a:	611a      	str	r2, [r3, #16]
}
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08008c3c 	.word	0x08008c3c
 8000a1c:	2000031c 	.word	0x2000031c
 8000a20:	20000128 	.word	0x20000128
 8000a24:	08000c15 	.word	0x08000c15
 8000a28:	08000c59 	.word	0x08000c59

08000a2c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t>:

templatePar() int MP<templateParCall()>::packSend(pOut *pack, uint16_t bSize) {
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b090      	sub	sp, #64	; 0x40
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4613      	mov	r3, r2
 8000a38:	80fb      	strh	r3, [r7, #6]
  sendBuf[sendSize] = '\0';
  // Send complete pack anyway, the concrete sub-system have to bufferize the pack
  if ((ret = packSend_Concrete(sendBuf, sendSize + 1)) != 0)
    return ret;

  return 0;
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	461d      	mov	r5, r3
  int ret = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t packSize = bSize + CRC8_enable();
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	3301      	adds	r3, #1
 8000a46:	867b      	strh	r3, [r7, #50]	; 0x32
  uint8_t packBuf[packSize]; // CRC8 may add 1 byte
 8000a48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000a4a:	1e5c      	subs	r4, r3, #1
 8000a4c:	637c      	str	r4, [r7, #52]	; 0x34
 8000a4e:	4623      	mov	r3, r4
 8000a50:	3301      	adds	r3, #1
 8000a52:	4618      	mov	r0, r3
 8000a54:	f04f 0100 	mov.w	r1, #0
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	f04f 0300 	mov.w	r3, #0
 8000a60:	00cb      	lsls	r3, r1, #3
 8000a62:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a66:	00c2      	lsls	r2, r0, #3
 8000a68:	4623      	mov	r3, r4
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f04f 0100 	mov.w	r1, #0
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	00cb      	lsls	r3, r1, #3
 8000a7c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a80:	00c2      	lsls	r2, r0, #3
 8000a82:	4623      	mov	r3, r4
 8000a84:	3301      	adds	r3, #1
 8000a86:	3307      	adds	r3, #7
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a90:	ab02      	add	r3, sp, #8
 8000a92:	3300      	adds	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  memcpy(packBuf, pack, bSize);
 8000a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a98:	88fa      	ldrh	r2, [r7, #6]
 8000a9a:	68b9      	ldr	r1, [r7, #8]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 f83f 	bl	8008b20 <memcpy>
    packBuf[packSize - 1] = crc8_stream((uint8_t *)pack, bSize);
 8000aa2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000aa4:	1e5c      	subs	r4, r3, #1
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	68b8      	ldr	r0, [r7, #8]
 8000aac:	f005 fe18 	bl	80066e0 <_Z11crc8_streamPht>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab6:	551a      	strb	r2, [r3, r4]
  uint16_t sendSize = packSize + 1; // Cobs add 1 byte
 8000ab8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000aba:	3301      	adds	r3, #1
 8000abc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t sendBuf[sendSize + 1]; // +1 for the final 0
 8000abe:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8000ac0:	623c      	str	r4, [r7, #32]
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f04f 0100 	mov.w	r1, #0
 8000acc:	f04f 0200 	mov.w	r2, #0
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	00cb      	lsls	r3, r1, #3
 8000ad6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ada:	00c2      	lsls	r2, r0, #3
 8000adc:	4623      	mov	r3, r4
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f04f 0100 	mov.w	r1, #0
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f04f 0300 	mov.w	r3, #0
 8000aee:	00cb      	lsls	r3, r1, #3
 8000af0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000af4:	00c2      	lsls	r2, r0, #3
 8000af6:	4623      	mov	r3, r4
 8000af8:	3301      	adds	r3, #1
 8000afa:	3307      	adds	r3, #7
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	ebad 0d03 	sub.w	sp, sp, r3
 8000b04:	ab02      	add	r3, sp, #8
 8000b06:	3300      	adds	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  cobs_encode_result res = cobs_encode(sendBuf, sendSize, packBuf, packSize);
 8000b0a:	69f9      	ldr	r1, [r7, #28]
 8000b0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b0e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000b10:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b12:	f107 0014 	add.w	r0, r7, #20
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	4623      	mov	r3, r4
 8000b1a:	f005 fc25 	bl	8006368 <cobs_encode>
  if (res.status != COBS_ENCODE_OK)
 8000b1e:	7e3b      	ldrb	r3, [r7, #24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0xfe>
    return -1;
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b28:	e019      	b.n	8000b5e <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x132>
  sendBuf[sendSize] = '\0';
 8000b2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b2c:	69fa      	ldr	r2, [r7, #28]
 8000b2e:	2100      	movs	r1, #0
 8000b30:	54d1      	strb	r1, [r2, r3]
  if ((ret = packSend_Concrete(sendBuf, sendSize + 1)) != 0)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3308      	adds	r3, #8
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	69f9      	ldr	r1, [r7, #28]
 8000b3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b3e:	3201      	adds	r2, #1
 8000b40:	b292      	uxth	r2, r2
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	4798      	blx	r3
 8000b46:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf14      	ite	ne
 8000b4e:	2301      	movne	r3, #1
 8000b50:	2300      	moveq	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x130>
    return ret;
 8000b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5a:	e000      	b.n	8000b5e <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x132>
  return 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	46ad      	mov	sp, r5
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3738      	adds	r7, #56	; 0x38
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bdb0      	pop	{r4, r5, r7, pc}

08000b68 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS3_10_callBacksE>:
templatePar() MP<templateParCall()>::MP(callBacksMP clback_) : clback(clback_) { bufClear(); }
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS3_10_callBacksE+0x44>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	811a      	strh	r2, [r3, #8]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	330a      	adds	r3, #10
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f811 	bl	8000bb0 <_ZN14CircularBufferIhLt368EEC1Ev>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f8b5 	bl	8000d04 <_ZN14CircularBufferI14_packLinux2ArdLt4EEC1Ev>
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 f8c6 	bl	8000d2c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8bufClearEv>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	08008c58 	.word	0x08008c58

08000bb0 <_ZN14CircularBufferIhLt368EEC1Ev>:
  uint16_t tailInc();
  uint16_t tailAdd(uint16_t len);
  uint16_t tailSet(uint16_t pos); // in case of error can go back
};

template <class T, uint16_t nElem> CircularBuffer<T, nElem>::CircularBuffer() {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  this->head_ = 0;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
  this->tail_ = 0;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  memClean();
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 f805 	bl	8000bd8 <_ZN14CircularBufferIhLt368EE8memCleanEv>
}
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_ZN14CircularBufferIhLt368EE8memCleanEv>:

template <class T, uint16_t nElem> void CircularBuffer<T, nElem>::memClean() {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  for (uint16_t i = 0; i < real_nElem; i++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	81fb      	strh	r3, [r7, #14]
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000bea:	d80b      	bhi.n	8000c04 <_ZN14CircularBufferIhLt368EE8memCleanEv+0x2c>
    memset(&this->buf_[i], 0, sizeof(T));
 8000bec:	89fb      	ldrh	r3, [r7, #14]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f007 ffa0 	bl	8008b3c <memset>
  for (uint16_t i = 0; i < real_nElem; i++)
 8000bfc:	89fb      	ldrh	r3, [r7, #14]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	81fb      	strh	r3, [r7, #14]
 8000c02:	e7ef      	b.n	8000be4 <_ZN14CircularBufferIhLt368EE8memCleanEv+0xc>
  reset();
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f8a7 	bl	8000d58 <_ZN14CircularBufferIhLt368EE5resetEv>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
templatePar()int8_t MP_ST_usb<templateParCall()>::isrRead(uint8_t *Buf, uint32_t *Len) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	MP_ST_usb<templateParCall()> *inst = MP_ST_usb<templateParCall()>::instance;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60fb      	str	r3, [r7, #12]
	inst->byteRecive.putArray(Buf, *Len);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f103 000a 	add.w	r0, r3, #10
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f000 f8a0 	bl	8000d78 <_ZN14CircularBufferIhLt368EE8putArrayEPht>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm+0x40>)
 8000c3a:	f006 f86f 	bl	8006d1c <USBD_CDC_ReceivePacket>
	inst->byteParsing();
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f8ab 	bl	8000d9c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv>
	return USBD_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000031c 	.word	0x2000031c
 8000c54:	20000548 	.word	0x20000548

08000c58 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh>:
templatePar()int8_t MP_ST_usb<templateParCall()>::isrSendNotify(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4613      	mov	r3, r2
 8000c64:	71fb      	strb	r3, [r7, #7]
	MP_ST_usb<templateParCall()> *inst = MP_ST_usb<templateParCall()>::instance;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0xa8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	61fb      	str	r3, [r7, #28]
	if (inst->byteSend.usedSpace()) {
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f953 	bl	8000f1e <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf14      	ite	ne
 8000c7e:	2301      	movne	r3, #1
 8000c80:	2300      	moveq	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d035      	beq.n	8000cf4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9c>
		len = inst->byteSend.usedSpaceLinear();
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f969 	bl	8000f66 <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv>
 8000c94:	4603      	mov	r3, r0
 8000c96:	837b      	strh	r3, [r7, #26]
		uint8_t *tailPtr = inst->byteSend.getTailPtr();
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f983 	bl	8000faa <_ZN14CircularBufferIhLt368EE10getTailPtrEv>
 8000ca4:	6178      	str	r0, [r7, #20]
		uint16_t tailBackUp = inst->byteSend.getTail();
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f98c 	bl	8000fca <_ZNK14CircularBufferIhLt368EE7getTailEv>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	827b      	strh	r3, [r7, #18]
		inst->byteSend.tailAdd(len);
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000cbc:	8b7a      	ldrh	r2, [r7, #26]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f98f 	bl	8000fe4 <_ZN14CircularBufferIhLt368EE7tailAddEt>
		if (CDC_Transmit_FS(tailPtr, len) == USBD_BUSY) {
 8000cc6:	8b7b      	ldrh	r3, [r7, #26]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f007 fa78 	bl	80081c0 <CDC_Transmit_FS>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	bf0c      	ite	eq
 8000cd6:	2301      	moveq	r3, #1
 8000cd8:	2300      	movne	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9c>
			inst->byteSend.tailSet(tailBackUp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000ce6:	8a7a      	ldrh	r2, [r7, #18]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f9b0 	bl	8001050 <_ZN14CircularBufferIhLt368EE7tailSetEt>
			return USBD_FAIL;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9e>
	return USBD_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000031c 	.word	0x2000031c

08000d04 <_ZN14CircularBufferI14_packLinux2ArdLt4EEC1Ev>:
template <class T, uint16_t nElem> CircularBuffer<T, nElem>::CircularBuffer() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  this->head_ = 0;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  this->tail_ = 0;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  memClean();
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f000 f9ac 	bl	800107a <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>
}
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8bufClearEv>:
templatePar() void MP<templateParCall()>::bufClear() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  byteRecive.memClean();
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	330a      	adds	r3, #10
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff4d 	bl	8000bd8 <_ZN14CircularBufferIhLt368EE8memCleanEv>
  packRecive.memClean();
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f998 	bl	800107a <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>
  lastStartIndex = 0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	811a      	strh	r2, [r3, #8]
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_ZN14CircularBufferIhLt368EE5resetEv>:

template <class T, uint16_t nElem> inline void CircularBuffer<T, nElem>::reset() { head_ = tail_; }
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8b3 2174 	ldrh.w	r2, [r3, #372]	; 0x174
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_ZN14CircularBufferIhLt368EE8putArrayEPht>:
    return -2;
  memcpy((void *)&buf_[head_], item, bSize);
  return headInc(); // old head
}

template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::putArray(T *item, uint16_t nItem) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]

  return putArray(item, nItem, sizeof(T));
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f000 f993 	bl	80010b8 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt>
 8000d92:	4603      	mov	r3, r0
    memcpy((void *)&buf_[head_], &item[linLen + 1], (nItem - linLen) * sizeof(T));
    headAdd(nItem - linLen);
  }

  return ret;
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv>:

templatePar() int MP<templateParCall()>::packSend_Concrete(uint8_t byteSend) { return packSend_Concrete(&byteSend, 1); }

/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// Byte parsing using CRC8 and COBS to
templatePar() uint16_t MP<templateParCall()>::byteParsing() {
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b092      	sub	sp, #72	; 0x48
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	6078      	str	r0, [r7, #4]
  uint8_t dato;
  uint16_t datoId;
  uint16_t packFound = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  while (!byteRecive.isEmpty()) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	330a      	adds	r3, #10
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fa0f 	bl	80011d0 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f083 0301 	eor.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80aa 	beq.w	8000f14 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x178>
 8000dc0:	466b      	mov	r3, sp
 8000dc2:	461d      	mov	r5, r3
    // Get the byte and his position (if is a 0, need to be saved)
    dato = byteRecive.get(&datoId);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	330a      	adds	r3, #10
 8000dc8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fa13 	bl	80011fa <_ZN14CircularBufferIhLt368EE3getEPt>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if (dato != 0)
 8000dda:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8091 	bne.w	8000f06 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x16a>
      continue;

    /// ########################## COBS DECODE ##########################
    // NB:COBS protocol add 1 byte at the pack, At the start
    uint16_t COBSsrcSize = byteRecive.countSlotBetween(lastStartIndex, datoId);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f103 000a 	add.w	r0, r3, #10
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	891b      	ldrh	r3, [r3, #8]
 8000dee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	f000 fa17 	bl	8001224 <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>
 8000df6:	4603      	mov	r3, r0
 8000df8:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (COBSsrcSize - 1 > MAXPackINsize || COBSsrcSize < 2) {
 8000dfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000dfc:	2b18      	cmp	r3, #24
 8000dfe:	d802      	bhi.n	8000e06 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x6a>
 8000e00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d805      	bhi.n	8000e12 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x76>
      // Someting wrong, no 0 was recived in time, or too many zero are received
      // Anyway the pack are lost
      lastStartIndex = datoId + 1; // restart the logic from the next byte
 8000e06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	811a      	strh	r2, [r3, #8]
      continue;
 8000e10:	e07e      	b.n	8000f10 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x174>
    }
    // Fill the buffer for the decoding
    uint8_t COBSEncoded[COBSsrcSize];
 8000e12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e14:	1e5c      	subs	r4, r3, #1
 8000e16:	637c      	str	r4, [r7, #52]	; 0x34
 8000e18:	4623      	mov	r3, r4
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f04f 0100 	mov.w	r1, #0
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	00cb      	lsls	r3, r1, #3
 8000e2c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e30:	00c2      	lsls	r2, r0, #3
 8000e32:	4623      	mov	r3, r4
 8000e34:	3301      	adds	r3, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	f04f 0100 	mov.w	r1, #0
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	00cb      	lsls	r3, r1, #3
 8000e46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e4a:	00c2      	lsls	r2, r0, #3
 8000e4c:	4623      	mov	r3, r4
 8000e4e:	3301      	adds	r3, #1
 8000e50:	3307      	adds	r3, #7
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	ebad 0d03 	sub.w	sp, sp, r3
 8000e5a:	ab02      	add	r3, sp, #8
 8000e5c:	3300      	adds	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
    byteRecive.memcpyCb(COBSEncoded, lastStartIndex, COBSsrcSize);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f103 000a 	add.w	r0, r3, #10
 8000e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	891a      	ldrh	r2, [r3, #8]
 8000e6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e6e:	f000 f9fb 	bl	8001268 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt>
    uint8_t COBSDecode[MAXPackINsize];

    cobs_decode_result res = cobs_decode(COBSDecode, MAXPackINsize, COBSEncoded, COBSsrcSize);
 8000e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e76:	f107 000c 	add.w	r0, r7, #12
 8000e7a:	f107 0114 	add.w	r1, r7, #20
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	2217      	movs	r2, #23
 8000e84:	f005 fb08 	bl	8006498 <cobs_decode>
    lastStartIndex = datoId + 1; // From now, in any case, datoId are the new lastStartIndex
 8000e88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	811a      	strh	r2, [r3, #8]

    if (res.status != COBS_DECODE_OK) {
 8000e92:	7c3b      	ldrb	r3, [r7, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d138      	bne.n	8000f0a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x16e>
      continue;
    }
    /// ######################## CRC8 VALIDATION ########################
    if (CRC8_enable()) {
      uint8_t calcCRC = crc8_stream(COBSDecode, res.out_len - 1); // Last byte are the CRC
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f005 fc1a 	bl	80066e0 <_Z11crc8_streamPht>
 8000eac:	4603      	mov	r3, r0
 8000eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (calcCRC != COBSDecode[res.out_len - 1])
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000eba:	4413      	add	r3, r2
 8000ebc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000ec0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d122      	bne.n	8000f0e <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x172>
        continue; // CRC8 Fail!!!
    }
    packRecive.put((pIn *)COBSDecode, res.out_len - 1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	f000 f9f6 	bl	80012cc <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t>
    packTimeRefresh(); // from now, the pack are available to the system
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
    packFound++;
 8000eec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000eee:	3301      	adds	r3, #1
 8000ef0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    if (clback.pkDetect)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x166>
      clback.pkDetect(this);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	4798      	blx	r3
 8000f02:	46ad      	mov	sp, r5
 8000f04:	e750      	b.n	8000da8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0xc>
      continue;
 8000f06:	bf00      	nop
 8000f08:	e002      	b.n	8000f10 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x174>
      continue;
 8000f0a:	bf00      	nop
 8000f0c:	e000      	b.n	8000f10 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x174>
        continue; // CRC8 Fail!!!
 8000f0e:	bf00      	nop
 8000f10:	46ad      	mov	sp, r5
  while (!byteRecive.isEmpty()) {
 8000f12:	e749      	b.n	8000da8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0xc>
  } //  while (!byteRecive->isEmpty())
  return packFound;
 8000f14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3740      	adds	r7, #64	; 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bdb0      	pop	{r4, r5, r7, pc}

08000f1e <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>:
template <class T, uint16_t nElem>
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
}

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpace() const {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  // This 2 block are only to speed-up, formula always function
  if (isFull())
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f9fc 	bl	8001324 <_ZNK14CircularBufferIhLt368EE6isFullEv>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x1a>
    return nElem;
 8000f32:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000f36:	e012      	b.n	8000f5e <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x40>
  if (isEmpty())
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f949 	bl	80011d0 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x2a>
    return 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e00a      	b.n	8000f5e <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x40>

  return countSlotBetween(tail_, head_);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8b3 1174 	ldrh.w	r1, [r3, #372]	; 0x174
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8000f54:	461a      	mov	r2, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f964 	bl	8001224 <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>
 8000f5c:	4603      	mov	r3, r0
  // return modSub(head_, tail_, real_nElem); // One Free Slot Logic
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv>:

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpaceLinear() const {
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	if(tail_ <= head_)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f8b3 2174 	ldrh.w	r2, [r3, #372]	; 0x174
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d808      	bhi.n	8000f90 <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv+0x2a>
	    return head_ - tail_; // include empty case
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8b3 2172 	ldrh.w	r2, [r3, #370]	; 0x172
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	e006      	b.n	8000f9e <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv+0x38>

    return real_nElem - tail_; // the end of the array are reach before the end of buffered
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8000f96:	f5c3 73b8 	rsb	r3, r3, #368	; 0x170
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_ZN14CircularBufferIhLt368EE10getTailPtrEv>:
template <class T, uint16_t nElem> inline T *CircularBuffer<T, nElem>::getTailPtr() { return &buf_[tail_]; }
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_ZNK14CircularBufferIhLt368EE7getTailEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::getTail() const { return tail_; }
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN14CircularBufferIhLt368EE7tailAddEt>:
  return posOld;
}

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailAdd(uint16_t len) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
  if (usedSpace() < len)
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff94 	bl	8000f1e <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	bf8c      	ite	hi
 8001000:	2301      	movhi	r3, #1
 8001002:	2300      	movls	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <_ZN14CircularBufferIhLt368EE7tailAddEt+0x2c>
    return -1;
 800100a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100e:	e018      	b.n	8001042 <_ZN14CircularBufferIhLt368EE7tailAddEt+0x5e>
  tail_ = (tail_ + len) % real_nElem;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001016:	461a      	mov	r2, r3
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	4413      	add	r3, r2
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <_ZN14CircularBufferIhLt368EE7tailAddEt+0x68>)
 800101e:	fb82 1203 	smull	r1, r2, r2, r3
 8001022:	441a      	add	r2, r3
 8001024:	1211      	asrs	r1, r2, #8
 8001026:	17da      	asrs	r2, r3, #31
 8001028:	1a8a      	subs	r2, r1, r2
 800102a:	f240 1171 	movw	r1, #369	; 0x171
 800102e:	fb01 f202 	mul.w	r2, r1, r2
 8001032:	1a9a      	subs	r2, r3, r2
 8001034:	b292      	uxth	r2, r2
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  return tail_;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	b19ab5c5 	.word	0xb19ab5c5

08001050 <_ZN14CircularBufferIhLt368EE7tailSetEt>:

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailSet(uint16_t pos) {
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
  uint16_t posOld = tail_;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001062:	81fb      	strh	r3, [r7, #14]
  tail_ = pos;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  return posOld;
 800106c:	89fb      	ldrh	r3, [r7, #14]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>:
template <class T, uint16_t nElem> void CircularBuffer<T, nElem>::memClean() {
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  for (uint16_t i = 0; i < real_nElem; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	81fb      	strh	r3, [r7, #14]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d80e      	bhi.n	80010aa <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv+0x30>
    memset(&this->buf_[i], 0, sizeof(T));
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	2216      	movs	r2, #22
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	2216      	movs	r2, #22
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f007 fd4d 	bl	8008b3c <memset>
  for (uint16_t i = 0; i < real_nElem; i++)
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	3301      	adds	r3, #1
 80010a6:	81fb      	strh	r3, [r7, #14]
 80010a8:	e7ed      	b.n	8001086 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv+0xc>
  reset();
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f960 	bl	8001370 <_ZN14CircularBufferI14_packLinux2ArdLt4EE5resetEv>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt>:
uint16_t CircularBuffer<T, nElem>::putArray(T *item, uint16_t nItem, uint16_t bSize) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	460b      	mov	r3, r1
 80010c8:	80fb      	strh	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	80bb      	strh	r3, [r7, #4]
  if (availableSpace() < nItem)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f837 	bl	8001142 <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	4293      	cmp	r3, r2
 80010dc:	bf8c      	ite	hi
 80010de:	2301      	movhi	r3, #1
 80010e0:	2300      	movls	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x36>
    return -1;
 80010e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ec:	e025      	b.n	800113a <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x82>
  if (bSize > sizeof(T))
 80010ee:	88bb      	ldrh	r3, [r7, #4]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d902      	bls.n	80010fa <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x42>
    return -2;
 80010f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80010f8:	e01f      	b.n	800113a <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x82>
  int ret = head_; // old head
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8001100:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < nItem; i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	429a      	cmp	r2, r3
 800110c:	da13      	bge.n	8001136 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x7e>
    memcpy((void *)&buf_[head_], &item[i], bSize);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8001114:	461a      	mov	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1898      	adds	r0, r3, r2
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	4413      	add	r3, r2
 8001120:	88ba      	ldrh	r2, [r7, #4]
 8001122:	4619      	mov	r1, r3
 8001124:	f007 fcfc 	bl	8008b20 <memcpy>
    headInc();
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f000 f931 	bl	8001390 <_ZN14CircularBufferIhLt368EE7headIncEv>
  for (int i = 0; i < nItem; i++) {
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e7e7      	b.n	8001106 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x4e>
  return ret; // old head
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	b29b      	uxth	r3, r3
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::availableSpace() const {
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  return nElem - usedSpace();
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fee7 	bl	8000f1e <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 8001150:	4603      	mov	r3, r0
 8001152:	f5c3 73b8 	rsb	r3, r3, #368	; 0x170
 8001156:	b29b      	uxth	r3, r3
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZN14CircularBufferIhLt368EE7headAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headAdd(uint16_t len) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
  if (availableSpace() < len)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffe8 	bl	8001142 <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	4293      	cmp	r3, r2
 800117a:	bf8c      	ite	hi
 800117c:	2301      	movhi	r3, #1
 800117e:	2300      	movls	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <_ZN14CircularBufferIhLt368EE7headAddEt+0x2c>
    return -1;
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	e01a      	b.n	80011c2 <_ZN14CircularBufferIhLt368EE7headAddEt+0x62>
  uint16_t oldHead = head_;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8001192:	81fb      	strh	r3, [r7, #14]
  head_ = (head_ + len) % real_nElem;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800119a:	461a      	mov	r2, r3
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	4413      	add	r3, r2
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <_ZN14CircularBufferIhLt368EE7headAddEt+0x6c>)
 80011a2:	fb82 1203 	smull	r1, r2, r2, r3
 80011a6:	441a      	add	r2, r3
 80011a8:	1211      	asrs	r1, r2, #8
 80011aa:	17da      	asrs	r2, r3, #31
 80011ac:	1a8a      	subs	r2, r1, r2
 80011ae:	f240 1171 	movw	r1, #369	; 0x171
 80011b2:	fb01 f202 	mul.w	r2, r1, r2
 80011b6:	1a9a      	subs	r2, r3, r2
 80011b8:	b292      	uxth	r2, r2
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
  return oldHead; // old head
 80011c0:	89fb      	ldrh	r3, [r7, #14]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	b19ab5c5 	.word	0xb19ab5c5

080011d0 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isEmpty() const { return head_ == tail_; }
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8b3 2172 	ldrh.w	r2, [r3, #370]	; 0x172
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 80011e4:	429a      	cmp	r2, r3
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_ZN14CircularBufferIhLt368EE3getEPt>:
template <class T, uint16_t nElem> T CircularBuffer<T, nElem>::get(uint16_t *indexRet) {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
  *indexRet = getTail();
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fee0 	bl	8000fca <_ZNK14CircularBufferIhLt368EE7getTailEv>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	801a      	strh	r2, [r3, #0]
  return get();
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f8c9 	bl	80013aa <_ZN14CircularBufferIhLt368EE3getEv>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>:
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	803b      	strh	r3, [r7, #0]
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
 8001234:	883a      	ldrh	r2, [r7, #0]
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f203 1371 	addw	r3, r3, #369	; 0x171
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt+0x40>)
 8001240:	fb82 1203 	smull	r1, r2, r2, r3
 8001244:	441a      	add	r2, r3
 8001246:	1211      	asrs	r1, r2, #8
 8001248:	17da      	asrs	r2, r3, #31
 800124a:	1a8a      	subs	r2, r1, r2
 800124c:	f240 1171 	movw	r1, #369	; 0x171
 8001250:	fb01 f202 	mul.w	r2, r1, r2
 8001254:	1a9a      	subs	r2, r3, r2
 8001256:	b293      	uxth	r3, r2
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	b19ab5c5 	.word	0xb19ab5c5

08001268 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt>:
void CircularBuffer<T, nElem>::memcpyCb(T *memDestArray, uint16_t localTail, uint16_t len) {
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	460b      	mov	r3, r1
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	4613      	mov	r3, r2
 800127c:	80bb      	strh	r3, [r7, #4]
  for (uint16_t i = 0; i < len; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	82fb      	strh	r3, [r7, #22]
 8001282:	8afa      	ldrh	r2, [r7, #22]
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d218      	bcs.n	80012bc <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x54>
    memDestArray[i] = buf_[(localTail + i) % real_nElem];
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	8afb      	ldrh	r3, [r7, #22]
 800128e:	4413      	add	r3, r2
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x60>)
 8001292:	fb82 1203 	smull	r1, r2, r2, r3
 8001296:	441a      	add	r2, r3
 8001298:	1211      	asrs	r1, r2, #8
 800129a:	17da      	asrs	r2, r3, #31
 800129c:	1a8a      	subs	r2, r1, r2
 800129e:	f240 1171 	movw	r1, #369	; 0x171
 80012a2:	fb01 f202 	mul.w	r2, r1, r2
 80012a6:	1a9a      	subs	r2, r3, r2
 80012a8:	8afb      	ldrh	r3, [r7, #22]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	440b      	add	r3, r1
 80012ae:	68f9      	ldr	r1, [r7, #12]
 80012b0:	5c8a      	ldrb	r2, [r1, r2]
 80012b2:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < len; i++) {
 80012b4:	8afb      	ldrh	r3, [r7, #22]
 80012b6:	3301      	adds	r3, #1
 80012b8:	82fb      	strh	r3, [r7, #22]
 80012ba:	e7e2      	b.n	8001282 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x1a>
}
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	b19ab5c5 	.word	0xb19ab5c5

080012cc <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::put(T *item, uint16_t bSize) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	4613      	mov	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]
  if (isFull())
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f87e 	bl	80013dc <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x20>
    return -1;
 80012e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ea:	e017      	b.n	800131c <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x50>
  if (bSize > sizeof(T))
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	2b16      	cmp	r3, #22
 80012f0:	d902      	bls.n	80012f8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x2c>
    return -2;
 80012f2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80012f6:	e011      	b.n	800131c <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x50>
  memcpy((void *)&buf_[head_], item, bSize);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80012fe:	461a      	mov	r2, r3
 8001300:	2316      	movs	r3, #22
 8001302:	fb03 f302 	mul.w	r3, r3, r2
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	88fa      	ldrh	r2, [r7, #6]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	4618      	mov	r0, r3
 8001310:	f007 fc06 	bl	8008b20 <memcpy>
  return headInc(); // old head
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 f885 	bl	8001424 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headIncEv>
 800131a:	4603      	mov	r3, r0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_ZNK14CircularBufferIhLt368EE6isFullEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isFull() const {
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return head_ == modSub(tail_, 1, real_nElem);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8001332:	4618      	mov	r0, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800133a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <_ZNK14CircularBufferIhLt368EE6isFullEv+0x48>)
 8001340:	fb82 1203 	smull	r1, r2, r2, r3
 8001344:	441a      	add	r2, r3
 8001346:	1211      	asrs	r1, r2, #8
 8001348:	17da      	asrs	r2, r3, #31
 800134a:	1a8a      	subs	r2, r1, r2
 800134c:	f240 1171 	movw	r1, #369	; 0x171
 8001350:	fb01 f202 	mul.w	r2, r1, r2
 8001354:	1a9a      	subs	r2, r3, r2
 8001356:	4290      	cmp	r0, r2
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	b19ab5c5 	.word	0xb19ab5c5

08001370 <_ZN14CircularBufferI14_packLinux2ArdLt4EE5resetEv>:
template <class T, uint16_t nElem> inline void CircularBuffer<T, nElem>::reset() { head_ = tail_; }
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_ZN14CircularBufferIhLt368EE7headIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headInc() {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return headAdd(1); // old head
 8001398:	2101      	movs	r1, #1
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fee0 	bl	8001160 <_ZN14CircularBufferIhLt368EE7headAddEt>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_ZN14CircularBufferIhLt368EE3getEv>:
template <class T, uint16_t nElem> T CircularBuffer<T, nElem>::get() {
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  if (isEmpty()) {
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff0c 	bl	80011d0 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <_ZN14CircularBufferIhLt368EE3getEv+0x18>
    return T();
 80013be:	2300      	movs	r3, #0
 80013c0:	e008      	b.n	80013d4 <_ZN14CircularBufferIhLt368EE3getEv+0x2a>
  auto val = readTail();
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f83b 	bl	800143e <_ZNK14CircularBufferIhLt368EE8readTailEv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
  this->tailInc();
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f846 	bl	800145e <_ZN14CircularBufferIhLt368EE7tailIncEv>
  return val;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isFull() const {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return head_ == modSub(tail_, 1, real_nElem);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80013ea:	4618      	mov	r0, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80013f2:	1d19      	adds	r1, r3, #4
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv+0x44>)
 80013f6:	fb83 2301 	smull	r2, r3, r3, r1
 80013fa:	105a      	asrs	r2, r3, #1
 80013fc:	17cb      	asrs	r3, r1, #31
 80013fe:	1ad2      	subs	r2, r2, r3
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	1aca      	subs	r2, r1, r3
 8001408:	4290      	cmp	r0, r2
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	66666667 	.word	0x66666667

08001424 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headInc() {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return headAdd(1); // old head
 800142c:	2101      	movs	r1, #1
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f822 	bl	8001478 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_ZNK14CircularBufferIhLt368EE8readTailEv>:
template <class T, uint16_t nElem> inline T CircularBuffer<T, nElem>::readTail() const { return this->buf_[tail_]; }
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800144c:	461a      	mov	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	5c9b      	ldrb	r3, [r3, r2]
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_ZN14CircularBufferIhLt368EE7tailIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	2101      	movs	r1, #1
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fdbb 	bl	8000fe4 <_ZN14CircularBufferIhLt368EE7tailAddEt>
 800146e:	4603      	mov	r3, r0
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headAdd(uint16_t len) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  if (availableSpace() < len)
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f82d 	bl	80014e4 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE14availableSpaceEv>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	4293      	cmp	r3, r2
 8001492:	bf8c      	ite	hi
 8001494:	2301      	movhi	r3, #1
 8001496:	2300      	movls	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x2c>
    return -1;
 800149e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a2:	e018      	b.n	80014d6 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x5e>
  uint16_t oldHead = head_;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80014aa:	81fb      	strh	r3, [r7, #14]
  head_ = (head_ + len) % real_nElem;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80014b2:	461a      	mov	r2, r3
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	441a      	add	r2, r3
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x68>)
 80014ba:	fb83 1302 	smull	r1, r3, r3, r2
 80014be:	1059      	asrs	r1, r3, #1
 80014c0:	17d3      	asrs	r3, r2, #31
 80014c2:	1ac9      	subs	r1, r1, r3
 80014c4:	460b      	mov	r3, r1
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	1ad1      	subs	r1, r2, r3
 80014cc:	b28a      	uxth	r2, r1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  return oldHead; // old head
 80014d4:	89fb      	ldrh	r3, [r7, #14]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	66666667 	.word	0x66666667

080014e4 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE14availableSpaceEv>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::availableSpace() const {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return nElem - usedSpace();
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f808 	bl	8001502 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f1c3 0304 	rsb	r3, r3, #4
 80014f8:	b29b      	uxth	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpace() const {
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  if (isFull())
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ff66 	bl	80013dc <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x18>
    return nElem;
 8001516:	2304      	movs	r3, #4
 8001518:	e012      	b.n	8001540 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x3e>
  if (isEmpty())
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f814 	bl	8001548 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x28>
    return 0;
 8001526:	2300      	movs	r3, #0
 8001528:	e00a      	b.n	8001540 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x3e>
  return countSlotBetween(tail_, head_);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001536:	461a      	mov	r2, r3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f81b 	bl	8001574 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt>
 800153e:	4603      	mov	r3, r0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isEmpty() const { return head_ == tail_; }
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800155c:	429a      	cmp	r2, r3
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt>:
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	803b      	strh	r3, [r7, #0]
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
 8001584:	883a      	ldrh	r2, [r7, #0]
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	1d5a      	adds	r2, r3, #5
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt+0x3c>)
 800158e:	fb83 1302 	smull	r1, r3, r3, r2
 8001592:	1059      	asrs	r1, r3, #1
 8001594:	17d3      	asrs	r3, r2, #31
 8001596:	1ac9      	subs	r1, r1, r3
 8001598:	460b      	mov	r3, r1
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	1ad1      	subs	r1, r2, r3
 80015a0:	b28b      	uxth	r3, r1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	66666667 	.word	0x66666667

080015b4 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_>:
templatePar() int16_t MP<templateParCall()>::getData_try(pIn *pack) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  if (packRecive.isEmpty())
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ffbf 	bl	8001548 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_+0x22>
    return -1;
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015d4:	e010      	b.n	80015f8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_+0x44>
  memcpy(pack, packRecive.getPtr(), sizeof(pIn));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f881 	bl	80016e4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2216      	movs	r2, #22
 80015e6:	4619      	mov	r1, r3
 80015e8:	6838      	ldr	r0, [r7, #0]
 80015ea:	f007 fa99 	bl	8008b20 <memcpy>
  return dataAvailable();
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f890 	bl	8001714 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b21b      	sxth	r3, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_>:
templatePar()int16_t MP_ST_usb<templateParCall()>::getData_wait(pIn *pack) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	while (this->dataAvailable() < 1) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f881 	bl	8001714 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf0c      	ite	eq
 8001618:	2301      	moveq	r3, #1
 800161a:	2300      	movne	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d000      	beq.n	8001624 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_+0x24>
 8001622:	e7f2      	b.n	800160a <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_+0xa>
	return this->getData_try(pack);
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	4610      	mov	r0, r2
 8001630:	4798      	blx	r3
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht>:

templatePar()int MP_ST_usb<templateParCall()>::packSend_Concrete(uint8_t *stream, uint16_t len) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	4613      	mov	r3, r2
 8001648:	80fb      	strh	r3, [r7, #6]
	//return 0;
	if (byteSend.availableSpace() < len) {
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fd76 	bl	8001142 <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4293      	cmp	r3, r2
 800165e:	bf8c      	ite	hi
 8001660:	2301      	movhi	r3, #1
 8001662:	2300      	movls	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x34>
		return -2;
 800166a:	f06f 0301 	mvn.w	r3, #1
 800166e:	e018      	b.n	80016a2 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x66>
	}
	byteSend.putArray(stream, len);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8001676:	88fa      	ldrh	r2, [r7, #6]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb7c 	bl	8000d78 <_ZN14CircularBufferIhLt368EE8putArrayEPht>
	if (isrSendNotify(nullptr, nullptr, 0) == USBD_FAIL)
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fae7 	bl	8000c58 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh>
 800168a:	4603      	mov	r3, r0
 800168c:	2b03      	cmp	r3, #3
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x64>
		return -3;
 800169a:	f06f 0302 	mvn.w	r3, #2
 800169e:	e000      	b.n	80016a2 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x66>
	return 0;
 80016a0:	2300      	movs	r3, #0
		return -3;
	}

	return 0;

}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE15packTimeRefreshEv>:

templatePar()void MP_ST_usb<templateParCall()>::packTimeRefresh() {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	lastDecodeTime = HAL_GetTick();
 80016b2:	f000 faab 	bl	8001c0c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE15lastPackElapsedEv>:

templatePar()unsigned long MP_ST_usb<templateParCall()>::lastPackElapsed() {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - lastDecodeTime;
 80016ce:	f000 fa9d 	bl	8001c0c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 80016da:	1ad3      	subs	r3, r2, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv>:
template <class T, uint16_t nElem> T *CircularBuffer<T, nElem>::getPtr() {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if (isEmpty()) {
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff2b 	bl	8001548 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv+0x18>
    return nullptr;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e007      	b.n	800170c <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv+0x28>
  auto val = getTailPtr();
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f818 	bl	8001732 <_ZN14CircularBufferI14_packLinux2ArdLt4EE10getTailPtrEv>
 8001702:	60f8      	str	r0, [r7, #12]
  this->tailInc();
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f827 	bl	8001758 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailIncEv>
  return val;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>:
templatePar() uint16_t MP<templateParCall()>::dataAvailable() { return this->packRecive.usedSpace(); }
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff feed 	bl	8001502 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 8001728:	4603      	mov	r3, r0
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_ZN14CircularBufferI14_packLinux2ArdLt4EE10getTailPtrEv>:
template <class T, uint16_t nElem> inline T *CircularBuffer<T, nElem>::getTailPtr() { return &buf_[tail_]; }
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001740:	461a      	mov	r2, r3
 8001742:	2316      	movs	r3, #22
 8001744:	fb03 f302 	mul.w	r3, r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	2101      	movs	r1, #1
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f806 	bl	8001774 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailAdd(uint16_t len) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  if (usedSpace() < len)
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff febe 	bl	8001502 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	4293      	cmp	r3, r2
 800178e:	bf8c      	ite	hi
 8001790:	2301      	movhi	r3, #1
 8001792:	2300      	movls	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x2c>
    return -1;
 800179a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179e:	e016      	b.n	80017ce <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x5a>
  tail_ = (tail_ + len) % real_nElem;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80017a6:	461a      	mov	r2, r3
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	441a      	add	r2, r3
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x64>)
 80017ae:	fb83 1302 	smull	r1, r3, r3, r2
 80017b2:	1059      	asrs	r1, r3, #1
 80017b4:	17d3      	asrs	r3, r2, #31
 80017b6:	1ac9      	subs	r1, r1, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	1ad1      	subs	r1, r2, r3
 80017c0:	b28a      	uxth	r2, r1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  return tail_;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	66666667 	.word	0x66666667

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_MspInit+0x4c>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_MspInit+0x4c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800181a:	2007      	movs	r0, #7
 800181c:	f000 faf6 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_I2C_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12c      	bne.n	80018a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800186a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001870:	2312      	movs	r3, #18
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001874:	2301      	movs	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187c:	2304      	movs	r3, #4
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <HAL_I2C_MspInit+0x8c>)
 8001888:	f000 fb02 	bl	8001e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020400 	.word	0x40020400

080018bc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a28      	ldr	r2, [pc, #160]	; (800197c <HAL_I2S_MspInit+0xc0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d14a      	bne.n	8001974 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a26      	ldr	r2, [pc, #152]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 80018e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_I2S_MspInit+0xc4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001932:	2310      	movs	r3, #16
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001942:	2306      	movs	r3, #6
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <HAL_I2S_MspInit+0xc8>)
 800194e:	f000 fa9f 	bl	8001e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001952:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001964:	2306      	movs	r3, #6
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <HAL_I2S_MspInit+0xcc>)
 8001970:	f000 fa8e 	bl	8001e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40003c00 	.word	0x40003c00
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000
 8001988:	40020800 	.word	0x40020800

0800198c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_SPI_MspInit+0x84>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d12b      	bne.n	8001a06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019e6:	23e0      	movs	r3, #224	; 0xe0
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019f6:	2305      	movs	r3, #5
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <HAL_SPI_MspInit+0x8c>)
 8001a02:	f000 fa45 	bl	8001e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	; 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40013000 	.word	0x40013000
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f8bc 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <OTG_FS_IRQHandler+0x10>)
 8001a76:	f001 faf5 	bl	8003064 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20001a18 	.word	0x20001a18

08001a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
	return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_kill>:

int _kill(int pid, int sig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a9e:	f007 f815 	bl	8008acc <__errno>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2216      	movs	r2, #22
 8001aa6:	601a      	str	r2, [r3, #0]
	return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_exit>:

void _exit (int status)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffe7 	bl	8001a94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ac6:	e7fe      	b.n	8001ac6 <_exit+0x12>

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b16:	f7ff ffd7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f006 ffdd 	bl	8008ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7fe fcf5 	bl	800050c <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001b30:	08008c94 	.word	0x08008c94
  ldr r2, =_sbss
 8001b34:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001b38:	20001e24 	.word	0x20001e24

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f94f 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fe32 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f967 	bl	8001e76 <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc0:	f000 f92f 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000000c 	.word	0x2000000c
 8001bdc:	20000014 	.word	0x20000014
 8001be0:	20000010 	.word	0x20000010

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000014 	.word	0x20000014
 8001c08:	20000544 	.word	0x20000544

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000544 	.word	0x20000544

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000014 	.word	0x20000014

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
         );
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dec:	f7ff ff8e 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff29 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff3e 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff8e 	bl	8001d60 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5d 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff31 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffa2 	bl	8001dc8 <SysTick_Config>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e16b      	b.n	8002184 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 815a 	bne.w	800217e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d005      	beq.n	8001ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d130      	bne.n	8001f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 0201 	and.w	r2, r3, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d017      	beq.n	8001f80 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d123      	bne.n	8001fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80b4 	beq.w	800217e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b60      	ldr	r3, [pc, #384]	; (800219c <HAL_GPIO_Init+0x30c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a5f      	ldr	r2, [pc, #380]	; (800219c <HAL_GPIO_Init+0x30c>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b5d      	ldr	r3, [pc, #372]	; (800219c <HAL_GPIO_Init+0x30c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002032:	4a5b      	ldr	r2, [pc, #364]	; (80021a0 <HAL_GPIO_Init+0x310>)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <HAL_GPIO_Init+0x314>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <HAL_GPIO_Init+0x226>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a51      	ldr	r2, [pc, #324]	; (80021a8 <HAL_GPIO_Init+0x318>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d025      	beq.n	80020b2 <HAL_GPIO_Init+0x222>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a50      	ldr	r2, [pc, #320]	; (80021ac <HAL_GPIO_Init+0x31c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <HAL_GPIO_Init+0x21e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4f      	ldr	r2, [pc, #316]	; (80021b0 <HAL_GPIO_Init+0x320>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_GPIO_Init+0x21a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4e      	ldr	r2, [pc, #312]	; (80021b4 <HAL_GPIO_Init+0x324>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0x216>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <HAL_GPIO_Init+0x328>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00d      	beq.n	80020a2 <HAL_GPIO_Init+0x212>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_GPIO_Init+0x32c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <HAL_GPIO_Init+0x20e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4b      	ldr	r2, [pc, #300]	; (80021c0 <HAL_GPIO_Init+0x330>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_GPIO_Init+0x20a>
 8002096:	2307      	movs	r3, #7
 8002098:	e00e      	b.n	80020b8 <HAL_GPIO_Init+0x228>
 800209a:	2308      	movs	r3, #8
 800209c:	e00c      	b.n	80020b8 <HAL_GPIO_Init+0x228>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00a      	b.n	80020b8 <HAL_GPIO_Init+0x228>
 80020a2:	2305      	movs	r3, #5
 80020a4:	e008      	b.n	80020b8 <HAL_GPIO_Init+0x228>
 80020a6:	2304      	movs	r3, #4
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x228>
 80020aa:	2303      	movs	r3, #3
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x228>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x228>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x228>
 80020b6:	2300      	movs	r3, #0
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	f002 0203 	and.w	r2, r2, #3
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	4093      	lsls	r3, r2
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c8:	4935      	ldr	r1, [pc, #212]	; (80021a0 <HAL_GPIO_Init+0x310>)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3302      	adds	r3, #2
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_GPIO_Init+0x334>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fa:	4a32      	ldr	r2, [pc, #200]	; (80021c4 <HAL_GPIO_Init+0x334>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002100:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <HAL_GPIO_Init+0x334>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_GPIO_Init+0x334>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <HAL_GPIO_Init+0x334>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214e:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_GPIO_Init+0x334>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_GPIO_Init+0x334>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <HAL_GPIO_Init+0x334>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3301      	adds	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b0f      	cmp	r3, #15
 8002188:	f67f ae90 	bls.w	8001eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	40013800 	.word	0x40013800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40021400 	.word	0x40021400
 80021bc:	40021800 	.word	0x40021800
 80021c0:	40021c00 	.word	0x40021c00
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e12b      	b.n	8002466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fb02 	bl	800182c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002260:	f002 fb80 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 8002264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a81      	ldr	r2, [pc, #516]	; (8002470 <HAL_I2C_Init+0x274>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d807      	bhi.n	8002280 <HAL_I2C_Init+0x84>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a80      	ldr	r2, [pc, #512]	; (8002474 <HAL_I2C_Init+0x278>)
 8002274:	4293      	cmp	r3, r2
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e006      	b.n	800228e <HAL_I2C_Init+0x92>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a7d      	ldr	r2, [pc, #500]	; (8002478 <HAL_I2C_Init+0x27c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e7      	b.n	8002466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a78      	ldr	r2, [pc, #480]	; (800247c <HAL_I2C_Init+0x280>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_I2C_Init+0x274>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d802      	bhi.n	80022d0 <HAL_I2C_Init+0xd4>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	e009      	b.n	80022e4 <HAL_I2C_Init+0xe8>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	4a69      	ldr	r2, [pc, #420]	; (8002480 <HAL_I2C_Init+0x284>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	3301      	adds	r3, #1
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	495c      	ldr	r1, [pc, #368]	; (8002470 <HAL_I2C_Init+0x274>)
 8002300:	428b      	cmp	r3, r1
 8002302:	d819      	bhi.n	8002338 <HAL_I2C_Init+0x13c>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e59      	subs	r1, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002318:	400b      	ands	r3, r1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_I2C_Init+0x138>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e59      	subs	r1, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fbb1 f3f3 	udiv	r3, r1, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002332:	e051      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002334:	2304      	movs	r3, #4
 8002336:	e04f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d111      	bne.n	8002364 <HAL_I2C_Init+0x168>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e012      	b.n	800238a <HAL_I2C_Init+0x18e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	0099      	lsls	r1, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Init+0x196>
 800238e:	2301      	movs	r3, #1
 8002390:	e022      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <HAL_I2C_Init+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1e58      	subs	r0, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b6:	e00f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	0099      	lsls	r1, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	6809      	ldr	r1, [r1, #0]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6911      	ldr	r1, [r2, #16]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	4311      	orrs	r1, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	430b      	orrs	r3, r1
 800241a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	000186a0 	.word	0x000186a0
 8002474:	001e847f 	.word	0x001e847f
 8002478:	003d08ff 	.word	0x003d08ff
 800247c:	431bde83 	.word	0x431bde83
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e128      	b.n	80026e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a90      	ldr	r2, [pc, #576]	; (80026f0 <HAL_I2S_Init+0x26c>)
 80024ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fa03 	bl	80018bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024cc:	f023 030f 	bic.w	r3, r3, #15
 80024d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2202      	movs	r2, #2
 80024d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d060      	beq.n	80025a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024ea:	2310      	movs	r3, #16
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e001      	b.n	80024f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d802      	bhi.n	8002502 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002502:	2001      	movs	r0, #1
 8002504:	f002 fb24 	bl	8004b50 <HAL_RCCEx_GetPeriphCLKFreq>
 8002508:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002512:	d125      	bne.n	8002560 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d010      	beq.n	800253e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	fbb2 f2f3 	udiv	r2, r2, r3
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	461a      	mov	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	3305      	adds	r3, #5
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	e01f      	b.n	800257e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	fbb2 f2f3 	udiv	r2, r2, r3
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	3305      	adds	r3, #5
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e00e      	b.n	800257e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fbb2 f2f3 	udiv	r2, r2, r3
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	3305      	adds	r3, #5
 800257c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_I2S_Init+0x270>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e003      	b.n	80025ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025a4:	2302      	movs	r3, #2
 80025a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d902      	bls.n	80025b8 <HAL_I2S_Init+0x134>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	2bff      	cmp	r3, #255	; 0xff
 80025b6:	d907      	bls.n	80025c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f043 0210 	orr.w	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e08f      	b.n	80026e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	ea42 0103 	orr.w	r1, r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	430a      	orrs	r2, r1
 80025da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025e6:	f023 030f 	bic.w	r3, r3, #15
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6851      	ldr	r1, [r2, #4]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	4311      	orrs	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6992      	ldr	r2, [r2, #24]
 80025fe:	430a      	orrs	r2, r1
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d161      	bne.n	80026d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a38      	ldr	r2, [pc, #224]	; (80026f8 <HAL_I2S_Init+0x274>)
 8002618:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a37      	ldr	r2, [pc, #220]	; (80026fc <HAL_I2S_Init+0x278>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_I2S_Init+0x1a4>
 8002624:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_I2S_Init+0x27c>)
 8002626:	e001      	b.n	800262c <HAL_I2S_Init+0x1a8>
 8002628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4932      	ldr	r1, [pc, #200]	; (80026fc <HAL_I2S_Init+0x278>)
 8002634:	428a      	cmp	r2, r1
 8002636:	d101      	bne.n	800263c <HAL_I2S_Init+0x1b8>
 8002638:	4a31      	ldr	r2, [pc, #196]	; (8002700 <HAL_I2S_Init+0x27c>)
 800263a:	e001      	b.n	8002640 <HAL_I2S_Init+0x1bc>
 800263c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002640:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002644:	f023 030f 	bic.w	r3, r3, #15
 8002648:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_I2S_Init+0x278>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_I2S_Init+0x1d4>
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_I2S_Init+0x27c>)
 8002656:	e001      	b.n	800265c <HAL_I2S_Init+0x1d8>
 8002658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265c:	2202      	movs	r2, #2
 800265e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a25      	ldr	r2, [pc, #148]	; (80026fc <HAL_I2S_Init+0x278>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_I2S_Init+0x1ea>
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_I2S_Init+0x27c>)
 800266c:	e001      	b.n	8002672 <HAL_I2S_Init+0x1ee>
 800266e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267e:	d003      	beq.n	8002688 <HAL_I2S_Init+0x204>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e001      	b.n	8002694 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800269e:	4313      	orrs	r3, r2
 80026a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_I2S_Init+0x278>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d101      	bne.n	80026d0 <HAL_I2S_Init+0x24c>
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_I2S_Init+0x27c>)
 80026ce:	e001      	b.n	80026d4 <HAL_I2S_Init+0x250>
 80026d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d4:	897a      	ldrh	r2, [r7, #10]
 80026d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	080027fb 	.word	0x080027fb
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	08002911 	.word	0x08002911
 80026fc:	40003800 	.word	0x40003800
 8002700:	40003400 	.word	0x40003400

08002704 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c9a      	adds	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10e      	bne.n	8002794 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002784:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffb8 	bl	8002704 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	b292      	uxth	r2, r2
 80027b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	1c9a      	adds	r2, r3, #2
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10e      	bne.n	80027f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff93 	bl	8002718 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b04      	cmp	r3, #4
 8002814:	d13a      	bne.n	800288c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d109      	bne.n	8002834 <I2S_IRQHandler+0x3a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d102      	bne.n	8002834 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffb4 	bl	800279c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d126      	bne.n	800288c <I2S_IRQHandler+0x92>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b20      	cmp	r3, #32
 800284a:	d11f      	bne.n	800288c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800285a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ff50 	bl	800272c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d136      	bne.n	8002906 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d109      	bne.n	80028b6 <I2S_IRQHandler+0xbc>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d102      	bne.n	80028b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff45 	bl	8002740 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d122      	bne.n	8002906 <I2S_IRQHandler+0x10c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d11b      	bne.n	8002906 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff13 	bl	800272c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4aa2      	ldr	r2, [pc, #648]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800292a:	4ba2      	ldr	r3, [pc, #648]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800292c:	e001      	b.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a9b      	ldr	r2, [pc, #620]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002948:	4b9a      	ldr	r3, [pc, #616]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800294a:	e001      	b.n	8002950 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800294c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295c:	d004      	beq.n	8002968 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8099 	bne.w	8002a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d107      	bne.n	8002982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f925 	bl	8002bcc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9c8 	bl	8002d2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d13a      	bne.n	8002a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d035      	beq.n	8002a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7e      	ldr	r2, [pc, #504]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80029ba:	4b7e      	ldr	r3, [pc, #504]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029bc:	e001      	b.n	80029c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80029be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4979      	ldr	r1, [pc, #484]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029ca:	428b      	cmp	r3, r1
 80029cc:	d101      	bne.n	80029d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80029ce:	4b79      	ldr	r3, [pc, #484]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029d0:	e001      	b.n	80029d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80029d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f043 0202 	orr.w	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fe88 	bl	800272c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	f040 80be 	bne.w	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80b8 	beq.w	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a59      	ldr	r2, [pc, #356]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a4e:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a50:	e001      	b.n	8002a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4954      	ldr	r1, [pc, #336]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a5e:	428b      	cmp	r3, r1
 8002a60:	d101      	bne.n	8002a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a62:	4b54      	ldr	r3, [pc, #336]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a64:	e001      	b.n	8002a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f043 0204 	orr.w	r2, r3, #4
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fe4a 	bl	800272c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a98:	e084      	b.n	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d107      	bne.n	8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8be 	bl	8002c30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8fd 	bl	8002cc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d12f      	bne.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02a      	beq.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002af0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2e      	ldr	r2, [pc, #184]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002afe:	e001      	b.n	8002b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b0c:	428b      	cmp	r3, r1
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b12:	e001      	b.n	8002b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f043 0202 	orr.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fdfa 	bl	800272c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d131      	bne.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02c      	beq.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b58:	e001      	b.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4912      	ldr	r1, [pc, #72]	; (8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b66:	428b      	cmp	r3, r1
 8002b68:	d101      	bne.n	8002b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b6c:	e001      	b.n	8002b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b86:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fdc5 	bl	800272c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ba2:	e000      	b.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ba4:	bf00      	nop
}
 8002ba6:	bf00      	nop
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40003800 	.word	0x40003800
 8002bb4:	40003400 	.word	0x40003400

08002bb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	1c99      	adds	r1, r3, #2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6251      	str	r1, [r2, #36]	; 0x24
 8002bde:	881a      	ldrh	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d113      	bne.n	8002c26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffc9 	bl	8002bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c99      	adds	r1, r3, #2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6251      	str	r1, [r2, #36]	; 0x24
 8002c42:	8819      	ldrh	r1, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <I2SEx_TxISR_I2SExt+0x22>
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002c50:	e001      	b.n	8002c56 <I2SEx_TxISR_I2SExt+0x26>
 8002c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c56:	460a      	mov	r2, r1
 8002c58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d121      	bne.n	8002cb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <I2SEx_TxISR_I2SExt+0x50>
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002c7e:	e001      	b.n	8002c84 <I2SEx_TxISR_I2SExt+0x54>
 8002c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	d101      	bne.n	8002c94 <I2SEx_TxISR_I2SExt+0x64>
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002c92:	e001      	b.n	8002c98 <I2SEx_TxISR_I2SExt+0x68>
 8002c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff81 	bl	8002bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40003800 	.word	0x40003800
 8002cc4:	40003400 	.word	0x40003400

08002cc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68d8      	ldr	r0, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	1c99      	adds	r1, r3, #2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ce0:	b282      	uxth	r2, r0
 8002ce2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d113      	bne.n	8002d24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff4a 	bl	8002bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a20      	ldr	r2, [pc, #128]	; (8002dbc <I2SEx_RxISR_I2SExt+0x90>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <I2SEx_RxISR_I2SExt+0x16>
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002d40:	e001      	b.n	8002d46 <I2SEx_RxISR_I2SExt+0x1a>
 8002d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d46:	68d8      	ldr	r0, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	1c99      	adds	r1, r3, #2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d52:	b282      	uxth	r2, r0
 8002d54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d121      	bne.n	8002db2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <I2SEx_RxISR_I2SExt+0x90>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <I2SEx_RxISR_I2SExt+0x50>
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002d7a:	e001      	b.n	8002d80 <I2SEx_RxISR_I2SExt+0x54>
 8002d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	490d      	ldr	r1, [pc, #52]	; (8002dbc <I2SEx_RxISR_I2SExt+0x90>)
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	d101      	bne.n	8002d90 <I2SEx_RxISR_I2SExt+0x64>
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002d8e:	e001      	b.n	8002d94 <I2SEx_RxISR_I2SExt+0x68>
 8002d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff03 	bl	8002bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40003800 	.word	0x40003800
 8002dc0:	40003400 	.word	0x40003400

08002dc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	b08f      	sub	sp, #60	; 0x3c
 8002dc8:	af0a      	add	r7, sp, #40	; 0x28
 8002dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e10f      	b.n	8002ff6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d106      	bne.n	8002df6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f005 fb2d 	bl	8008450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 f896 	bl	8004f46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	687e      	ldr	r6, [r7, #4]
 8002e22:	466d      	mov	r5, sp
 8002e24:	f106 0410 	add.w	r4, r6, #16
 8002e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e38:	1d33      	adds	r3, r6, #4
 8002e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3c:	6838      	ldr	r0, [r7, #0]
 8002e3e:	f001 ff6e 	bl	8004d1e <USB_CoreInit>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0d0      	b.n	8002ff6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 f884 	bl	8004f68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e04a      	b.n	8002efc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	333d      	adds	r3, #61	; 0x3d
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	333c      	adds	r3, #60	; 0x3c
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	b298      	uxth	r0, r3
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3342      	adds	r3, #66	; 0x42
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	333f      	adds	r3, #63	; 0x3f
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3344      	adds	r3, #68	; 0x44
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3348      	adds	r3, #72	; 0x48
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee2:	7bfa      	ldrb	r2, [r7, #15]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3350      	adds	r3, #80	; 0x50
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3af      	bcc.n	8002e66 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	e044      	b.n	8002f96 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	3301      	adds	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d3b5      	bcc.n	8002f0c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	687e      	ldr	r6, [r7, #4]
 8002fa8:	466d      	mov	r5, sp
 8002faa:	f106 0410 	add.w	r4, r6, #16
 8002fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fba:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fbe:	1d33      	adds	r3, r6, #4
 8002fc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc2:	6838      	ldr	r0, [r7, #0]
 8002fc4:	f001 fffa 	bl	8004fbc <USB_DevInit>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00d      	b.n	8002ff6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f003 f842 	bl	8006078 <USB_DevDisconnect>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ffe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_PCD_Start+0x1c>
 8003016:	2302      	movs	r3, #2
 8003018:	e020      	b.n	800305c <HAL_PCD_Start+0x5e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	2b01      	cmp	r3, #1
 8003028:	d109      	bne.n	800303e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800302e:	2b01      	cmp	r3, #1
 8003030:	d005      	beq.n	800303e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f001 ff6e 	bl	8004f24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f002 fff2 	bl	8006036 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b08d      	sub	sp, #52	; 0x34
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f003 f8b0 	bl	80061e0 <USB_GetMode>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 839d 	bne.w	80037c2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 f814 	bl	80060ba <USB_ReadInterrupts>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8393 	beq.w	80037c0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 f80b 	bl	80060ba <USB_ReadInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d107      	bne.n	80030be <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f002 0202 	and.w	r2, r2, #2
 80030bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f002 fff9 	bl	80060ba <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d161      	bne.n	8003196 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0210 	bic.w	r2, r2, #16
 80030e0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f003 020f 	and.w	r2, r3, #15
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	3304      	adds	r3, #4
 8003100:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	0c5b      	lsrs	r3, r3, #17
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	2b02      	cmp	r3, #2
 800310c:	d124      	bne.n	8003158 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d035      	beq.n	8003186 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003124:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	6a38      	ldr	r0, [r7, #32]
 800312e:	f002 fe5f 	bl	8005df0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313e:	441a      	add	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003150:	441a      	add	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	619a      	str	r2, [r3, #24]
 8003156:	e016      	b.n	8003186 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	0c5b      	lsrs	r3, r3, #17
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	2b06      	cmp	r3, #6
 8003162:	d110      	bne.n	8003186 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800316a:	2208      	movs	r2, #8
 800316c:	4619      	mov	r1, r3
 800316e:	6a38      	ldr	r0, [r7, #32]
 8003170:	f002 fe3e 	bl	8005df0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003180:	441a      	add	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0210 	orr.w	r2, r2, #16
 8003194:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f002 ff8d 	bl	80060ba <USB_ReadInterrupts>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031aa:	d16e      	bne.n	800328a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f002 ff93 	bl	80060e0 <USB_ReadDevAllOutEpInterrupt>
 80031ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031bc:	e062      	b.n	8003284 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d057      	beq.n	8003278 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 ffb8 	bl	8006148 <USB_ReadDevOutEPInterrupt>
 80031d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00c      	beq.n	80031fe <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	2301      	movs	r3, #1
 80031f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fdb1 	bl	8003d60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00c      	beq.n	8003222 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003214:	461a      	mov	r2, r3
 8003216:	2308      	movs	r3, #8
 8003218:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800321a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 feab 	bl	8003f78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	2310      	movs	r3, #16
 800323c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	2320      	movs	r3, #32
 8003258:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d009      	beq.n	8003278 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003270:	461a      	mov	r2, r3
 8003272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003276:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	3301      	adds	r3, #1
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	d199      	bne.n	80031be <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f002 ff13 	bl	80060ba <USB_ReadInterrupts>
 8003294:	4603      	mov	r3, r0
 8003296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800329e:	f040 80c0 	bne.w	8003422 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f002 ff34 	bl	8006114 <USB_ReadDevAllInEpInterrupt>
 80032ac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032b2:	e0b2      	b.n	800341a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80a7 	beq.w	800340e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 ff5a 	bl	8006184 <USB_ReadDevInEPInterrupt>
 80032d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d057      	beq.n	800338c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	2201      	movs	r2, #1
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69f9      	ldr	r1, [r7, #28]
 80032f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032fc:	4013      	ands	r3, r2
 80032fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330c:	461a      	mov	r2, r3
 800330e:	2301      	movs	r3, #1
 8003310:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d132      	bne.n	8003380 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3348      	adds	r3, #72	; 0x48
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4403      	add	r3, r0
 800333a:	3344      	adds	r3, #68	; 0x44
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4419      	add	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4403      	add	r3, r0
 800334e:	3348      	adds	r3, #72	; 0x48
 8003350:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d113      	bne.n	8003380 <HAL_PCD_IRQHandler+0x31c>
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3350      	adds	r3, #80	; 0x50
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d108      	bne.n	8003380 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003378:	461a      	mov	r2, r3
 800337a:	2101      	movs	r1, #1
 800337c:	f002 ff62 	bl	8006244 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f005 f8f1 	bl	800856e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a2:	461a      	mov	r2, r3
 80033a4:	2308      	movs	r3, #8
 80033a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033be:	461a      	mov	r2, r3
 80033c0:	2310      	movs	r3, #16
 80033c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	461a      	mov	r2, r3
 80033dc:	2340      	movs	r3, #64	; 0x40
 80033de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f6:	461a      	mov	r2, r3
 80033f8:	2302      	movs	r3, #2
 80033fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fc1b 	bl	8003c44 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	3301      	adds	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	f47f af49 	bne.w	80032b4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f002 fe47 	bl	80060ba <USB_ReadInterrupts>
 800342c:	4603      	mov	r3, r0
 800342e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003436:	d122      	bne.n	800347e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003452:	2b01      	cmp	r3, #1
 8003454:	d108      	bne.n	8003468 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800345e:	2100      	movs	r1, #0
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fe27 	bl	80040b4 <HAL_PCDEx_LPM_Callback>
 8003466:	e002      	b.n	800346e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f005 f8f7 	bl	800865c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800347c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f002 fe19 	bl	80060ba <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800348e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003492:	d112      	bne.n	80034ba <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f005 f8b3 	bl	8008610 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034b8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f002 fdfb 	bl	80060ba <USB_ReadInterrupts>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	f040 80c7 	bne.w	8003660 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2110      	movs	r1, #16
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fec9 	bl	8005284 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f6:	e056      	b.n	80035a6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	461a      	mov	r2, r3
 8003506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800350a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351c:	0151      	lsls	r1, r2, #5
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	440a      	add	r2, r1
 8003522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800352a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	440a      	add	r2, r1
 8003542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003546:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800354a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	461a      	mov	r2, r3
 800355a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800355e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	440a      	add	r2, r1
 8003576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800357a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800357e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003590:	0151      	lsls	r1, r2, #5
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	440a      	add	r2, r1
 8003596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800359a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800359e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	3301      	adds	r3, #1
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d3a3      	bcc.n	80034f8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d016      	beq.n	80035fa <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035dc:	f043 030b 	orr.w	r3, r3, #11
 80035e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f2:	f043 030b 	orr.w	r3, r3, #11
 80035f6:	6453      	str	r3, [r2, #68]	; 0x44
 80035f8:	e015      	b.n	8003626 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800360c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003610:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003620:	f043 030b 	orr.w	r3, r3, #11
 8003624:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003634:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003638:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800364a:	461a      	mov	r2, r3
 800364c:	f002 fdfa 	bl	8006244 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800365e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f002 fd28 	bl	80060ba <USB_ReadInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003674:	d124      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f002 fdbe 	bl	80061fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f001 fe5e 	bl	8005346 <USB_GetDevSpeed>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681c      	ldr	r4, [r3, #0]
 8003696:	f001 f959 	bl	800494c <HAL_RCC_GetHCLKFreq>
 800369a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	4620      	mov	r0, r4
 80036a6:	f001 fb9b 	bl	8004de0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f004 ff87 	bl	80085be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fcf8 	bl	80060ba <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d10a      	bne.n	80036ea <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f004 ff64 	bl	80085a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f002 0208 	and.w	r2, r2, #8
 80036e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 fce3 	bl	80060ba <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fe:	d10f      	bne.n	8003720 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	b2db      	uxtb	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f004 ffc6 	bl	800869c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f002 fcc8 	bl	80060ba <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003734:	d10f      	bne.n	8003756 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f004 ff99 	bl	8008678 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f002 fcad 	bl	80060ba <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d10a      	bne.n	8003782 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f004 ffa7 	bl	80086c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f002 fc97 	bl	80060ba <USB_ReadInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d115      	bne.n	80037c2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f004 ff97 	bl	80086dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e000      	b.n	80037c2 <HAL_PCD_IRQHandler+0x75e>
      return;
 80037c0:	bf00      	nop
    }
  }
}
 80037c2:	3734      	adds	r7, #52	; 0x34
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd90      	pop	{r4, r7, pc}

080037c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_PCD_SetAddress+0x1a>
 80037de:	2302      	movs	r3, #2
 80037e0:	e013      	b.n	800380a <HAL_PCD_SetAddress+0x42>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f002 fbf5 	bl	8005fea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	4608      	mov	r0, r1
 800381c:	4611      	mov	r1, r2
 800381e:	461a      	mov	r2, r3
 8003820:	4603      	mov	r3, r0
 8003822:	70fb      	strb	r3, [r7, #3]
 8003824:	460b      	mov	r3, r1
 8003826:	803b      	strh	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003834:	2b00      	cmp	r3, #0
 8003836:	da0f      	bge.n	8003858 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	3338      	adds	r3, #56	; 0x38
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	3304      	adds	r3, #4
 800384e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	705a      	strb	r2, [r3, #1]
 8003856:	e00f      	b.n	8003878 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	3304      	adds	r3, #4
 8003870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	b2da      	uxtb	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003884:	883a      	ldrh	r2, [r7, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	78ba      	ldrb	r2, [r7, #2]
 800388e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038a2:	78bb      	ldrb	r3, [r7, #2]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d102      	bne.n	80038ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_PCD_EP_Open+0xaa>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e00e      	b.n	80038da <HAL_PCD_EP_Open+0xc8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68f9      	ldr	r1, [r7, #12]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fd60 	bl	8005390 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80038d8:	7afb      	ldrb	r3, [r7, #11]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da0f      	bge.n	8003916 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	3338      	adds	r3, #56	; 0x38
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	3304      	adds	r3, #4
 800390c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	705a      	strb	r2, [r3, #1]
 8003914:	e00f      	b.n	8003936 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	f003 020f 	and.w	r2, r3, #15
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	3304      	adds	r3, #4
 800392e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_PCD_EP_Close+0x6e>
 800394c:	2302      	movs	r3, #2
 800394e:	e00e      	b.n	800396e <HAL_PCD_EP_Close+0x8c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fd9e 	bl	80054a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	460b      	mov	r3, r1
 8003984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003986:	7afb      	ldrb	r3, [r7, #11]
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	3304      	adds	r3, #4
 800399e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b8:	7afb      	ldrb	r3, [r7, #11]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d102      	bne.n	80039d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d2:	7afb      	ldrb	r3, [r7, #11]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d109      	bne.n	80039f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	6979      	ldr	r1, [r7, #20]
 80039ea:	f002 f879 	bl	8005ae0 <USB_EP0StartXfer>
 80039ee:	e008      	b.n	8003a02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	6979      	ldr	r1, [r7, #20]
 80039fe:	f001 fe2b 	bl	8005658 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	3338      	adds	r3, #56	; 0x38
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6979      	ldr	r1, [r7, #20]
 8003aae:	f002 f817 	bl	8005ae0 <USB_EP0StartXfer>
 8003ab2:	e008      	b.n	8003ac6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6979      	ldr	r1, [r7, #20]
 8003ac2:	f001 fdc9 	bl	8005658 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d901      	bls.n	8003aee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e050      	b.n	8003b90 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da0f      	bge.n	8003b16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	3338      	adds	r3, #56	; 0x38
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	705a      	strb	r2, [r3, #1]
 8003b14:	e00d      	b.n	8003b32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	3304      	adds	r3, #4
 8003b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_PCD_EP_SetStall+0x82>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e01e      	b.n	8003b90 <HAL_PCD_EP_SetStall+0xc0>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f002 f96e 	bl	8005e42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	b2d9      	uxtb	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b80:	461a      	mov	r2, r3
 8003b82:	f002 fb5f 	bl	8006244 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	f003 020f 	and.w	r2, r3, #15
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d901      	bls.n	8003bb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e042      	b.n	8003c3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da0f      	bge.n	8003bde <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3338      	adds	r3, #56	; 0x38
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	705a      	strb	r2, [r3, #1]
 8003bdc:	e00f      	b.n	8003bfe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 020f 	and.w	r2, r3, #15
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_PCD_EP_ClrStall+0x86>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e00e      	b.n	8003c3c <HAL_PCD_EP_ClrStall+0xa4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f002 f976 	bl	8005f1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	3338      	adds	r3, #56	; 0x38
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d901      	bls.n	8003c7c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e06c      	b.n	8003d56 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d902      	bls.n	8003c98 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3303      	adds	r3, #3
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ca0:	e02b      	b.n	8003cfa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d902      	bls.n	8003cbe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3303      	adds	r3, #3
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68d9      	ldr	r1, [r3, #12]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6978      	ldr	r0, [r7, #20]
 8003cde:	f002 f852 	bl	8005d86 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	441a      	add	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	441a      	add	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d809      	bhi.n	8003d24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d203      	bcs.n	8003d24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1be      	bne.n	8003ca2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d811      	bhi.n	8003d54 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	2201      	movs	r2, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	6939      	ldr	r1, [r7, #16]
 8003d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d50:	4013      	ands	r3, r2
 8003d52:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	333c      	adds	r3, #60	; 0x3c
 8003d78:	3304      	adds	r3, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	f040 80a0 	bne.w	8003ed8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d015      	beq.n	8003dce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a72      	ldr	r2, [pc, #456]	; (8003f70 <PCD_EP_OutXfrComplete_int+0x210>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	f240 80dd 	bls.w	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80d7 	beq.w	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dca:	6093      	str	r3, [r2, #8]
 8003dcc:	e0cb      	b.n	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de4:	461a      	mov	r2, r3
 8003de6:	2320      	movs	r3, #32
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	e0bc      	b.n	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 80b7 	bne.w	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a5d      	ldr	r2, [pc, #372]	; (8003f70 <PCD_EP_OutXfrComplete_int+0x210>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d90f      	bls.n	8003e20 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e16:	461a      	mov	r2, r3
 8003e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1c:	6093      	str	r3, [r2, #8]
 8003e1e:	e0a2      	b.n	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e32:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	0159      	lsls	r1, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003e46:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4403      	add	r3, r0
 8003e56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e5a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4403      	add	r3, r0
 8003e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4419      	add	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4403      	add	r3, r0
 8003e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e98:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d114      	bne.n	8003eca <PCD_EP_OutXfrComplete_int+0x16a>
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d108      	bne.n	8003eca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	f002 f9bd 	bl	8006244 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f004 fb31 	bl	8008538 <HAL_PCD_DataOutStageCallback>
 8003ed6:	e046      	b.n	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <PCD_EP_OutXfrComplete_int+0x214>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d124      	bne.n	8003f2a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003efc:	6093      	str	r3, [r2, #8]
 8003efe:	e032      	b.n	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f16:	461a      	mov	r2, r3
 8003f18:	2320      	movs	r3, #32
 8003f1a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f004 fb08 	bl	8008538 <HAL_PCD_DataOutStageCallback>
 8003f28:	e01d      	b.n	8003f66 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d114      	bne.n	8003f5a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f52:	461a      	mov	r2, r3
 8003f54:	2100      	movs	r1, #0
 8003f56:	f002 f975 	bl	8006244 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f004 fae9 	bl	8008538 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	4f54300a 	.word	0x4f54300a
 8003f74:	4f54310a 	.word	0x4f54310a

08003f78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	333c      	adds	r3, #60	; 0x3c
 8003f90:	3304      	adds	r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a15      	ldr	r2, [pc, #84]	; (8004000 <PCD_EP_OutSetupPacket_int+0x88>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d90e      	bls.n	8003fcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f004 faa1 	bl	8008514 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d90c      	bls.n	8003ff4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d108      	bne.n	8003ff4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fec:	461a      	mov	r2, r3
 8003fee:	2101      	movs	r1, #1
 8003ff0:	f002 f928 	bl	8006244 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	4f54300a 	.word	0x4f54300a

08004004 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
 8004010:	4613      	mov	r3, r2
 8004012:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004022:	883b      	ldrh	r3, [r7, #0]
 8004024:	0419      	lsls	r1, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	430a      	orrs	r2, r1
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
 8004030:	e028      	b.n	8004084 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4413      	add	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e00d      	b.n	8004062 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3340      	adds	r3, #64	; 0x40
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4413      	add	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	3301      	adds	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	3b01      	subs	r3, #1
 8004068:	429a      	cmp	r2, r3
 800406a:	d3ec      	bcc.n	8004046 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800406c:	883b      	ldrh	r3, [r7, #0]
 800406e:	0418      	lsls	r0, r3, #16
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	3b01      	subs	r3, #1
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	4302      	orrs	r2, r0
 800407c:	3340      	adds	r3, #64	; 0x40
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e264      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d075      	beq.n	80041d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ea:	4ba3      	ldr	r3, [pc, #652]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d00c      	beq.n	8004110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f6:	4ba0      	ldr	r3, [pc, #640]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d112      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004102:	4b9d      	ldr	r3, [pc, #628]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410e:	d10b      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4b99      	ldr	r3, [pc, #612]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d05b      	beq.n	80041d4 <HAL_RCC_OscConfig+0x108>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d157      	bne.n	80041d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e23f      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x74>
 8004132:	4b91      	ldr	r3, [pc, #580]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a90      	ldr	r2, [pc, #576]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e01d      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x98>
 800414a:	4b8b      	ldr	r3, [pc, #556]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a8a      	ldr	r2, [pc, #552]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a87      	ldr	r2, [pc, #540]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004164:	4b84      	ldr	r3, [pc, #528]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a83      	ldr	r2, [pc, #524]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a80      	ldr	r2, [pc, #512]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd fd42 	bl	8001c0c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418c:	f7fd fd3e 	bl	8001c0c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e204      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b76      	ldr	r3, [pc, #472]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0xc0>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fd fd2e 	bl	8001c0c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fd fd2a 	bl	8001c0c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1f0      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c6:	4b6c      	ldr	r3, [pc, #432]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0xe8>
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d063      	beq.n	80042aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	4b62      	ldr	r3, [pc, #392]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d11c      	bne.n	8004234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d116      	bne.n	8004234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x152>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e1c4      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421e:	4b56      	ldr	r3, [pc, #344]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4952      	ldr	r1, [pc, #328]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	e03a      	b.n	80042aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800423c:	4b4f      	ldr	r3, [pc, #316]	; (800437c <HAL_RCC_OscConfig+0x2b0>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fd fce3 	bl	8001c0c <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424a:	f7fd fcdf 	bl	8001c0c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e1a5      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	4b46      	ldr	r3, [pc, #280]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b43      	ldr	r3, [pc, #268]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4940      	ldr	r1, [pc, #256]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]
 800427c:	e015      	b.n	80042aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427e:	4b3f      	ldr	r3, [pc, #252]	; (800437c <HAL_RCC_OscConfig+0x2b0>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd fcc2 	bl	8001c0c <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800428c:	f7fd fcbe 	bl	8001c0c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e184      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429e:	4b36      	ldr	r3, [pc, #216]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d030      	beq.n	8004318 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042be:	4b30      	ldr	r3, [pc, #192]	; (8004380 <HAL_RCC_OscConfig+0x2b4>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fd fca2 	bl	8001c0c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fd fc9e 	bl	8001c0c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e164      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x200>
 80042ea:	e015      	b.n	8004318 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCC_OscConfig+0x2b4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fd fc8b 	bl	8001c0c <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fd fc87 	bl	8001c0c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e14d      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80a0 	beq.w	8004466 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_RCC_OscConfig+0x2b8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d121      	bne.n	80043a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_RCC_OscConfig+0x2b8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a07      	ldr	r2, [pc, #28]	; (8004384 <HAL_RCC_OscConfig+0x2b8>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436e:	f7fd fc4d 	bl	8001c0c <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	e011      	b.n	800439a <HAL_RCC_OscConfig+0x2ce>
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	42470000 	.word	0x42470000
 8004380:	42470e80 	.word	0x42470e80
 8004384:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fd fc40 	bl	8001c0c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e106      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439a:	4b85      	ldr	r3, [pc, #532]	; (80045b0 <HAL_RCC_OscConfig+0x4e4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x2f0>
 80043ae:	4b81      	ldr	r3, [pc, #516]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a80      	ldr	r2, [pc, #512]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	e01c      	b.n	80043f6 <HAL_RCC_OscConfig+0x32a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d10c      	bne.n	80043de <HAL_RCC_OscConfig+0x312>
 80043c4:	4b7b      	ldr	r3, [pc, #492]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4a7a      	ldr	r2, [pc, #488]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043ca:	f043 0304 	orr.w	r3, r3, #4
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70
 80043d0:	4b78      	ldr	r3, [pc, #480]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a77      	ldr	r2, [pc, #476]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	e00b      	b.n	80043f6 <HAL_RCC_OscConfig+0x32a>
 80043de:	4b75      	ldr	r3, [pc, #468]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a74      	ldr	r2, [pc, #464]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ea:	4b72      	ldr	r3, [pc, #456]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a71      	ldr	r2, [pc, #452]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d015      	beq.n	800442a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fd fc05 	bl	8001c0c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fd fc01 	bl	8001c0c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0c5      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ee      	beq.n	8004406 <HAL_RCC_OscConfig+0x33a>
 8004428:	e014      	b.n	8004454 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442a:	f7fd fbef 	bl	8001c0c <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fd fbeb 	bl	8001c0c <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0af      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004448:	4b5a      	ldr	r3, [pc, #360]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ee      	bne.n	8004432 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	4a55      	ldr	r2, [pc, #340]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004464:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 809b 	beq.w	80045a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d05c      	beq.n	8004536 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d141      	bne.n	8004508 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004484:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <HAL_RCC_OscConfig+0x4ec>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fd fbbf 	bl	8001c0c <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004492:	f7fd fbbb 	bl	8001c0c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e081      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a4:	4b43      	ldr	r3, [pc, #268]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	019b      	lsls	r3, r3, #6
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	3b01      	subs	r3, #1
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	4937      	ldr	r1, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_RCC_OscConfig+0x4ec>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fd fb94 	bl	8001c0c <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fd fb90 	bl	8001c0c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e056      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fa:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x41c>
 8004506:	e04e      	b.n	80045a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004508:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <HAL_RCC_OscConfig+0x4ec>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fd fb7d 	bl	8001c0c <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004516:	f7fd fb79 	bl	8001c0c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e03f      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004528:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x44a>
 8004534:	e037      	b.n	80045a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e032      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <HAL_RCC_OscConfig+0x4e8>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d028      	beq.n	80045a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d121      	bne.n	80045a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d11a      	bne.n	80045a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004572:	4013      	ands	r3, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004578:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800457a:	4293      	cmp	r3, r2
 800457c:	d111      	bne.n	80045a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	3b01      	subs	r3, #1
 800458c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40007000 	.word	0x40007000
 80045b4:	40023800 	.word	0x40023800
 80045b8:	42470060 	.word	0x42470060

080045bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0cc      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b68      	ldr	r3, [pc, #416]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d90c      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b65      	ldr	r3, [pc, #404]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b63      	ldr	r3, [pc, #396]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0b8      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b59      	ldr	r3, [pc, #356]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a58      	ldr	r2, [pc, #352]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800461a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004628:	4b53      	ldr	r3, [pc, #332]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b50      	ldr	r3, [pc, #320]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	494d      	ldr	r1, [pc, #308]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d044      	beq.n	80046dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d119      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d003      	beq.n	800467a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b3f      	ldr	r3, [pc, #252]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e067      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4934      	ldr	r1, [pc, #208]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fd faae 	bl	8001c0c <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fd faaa 	bl	8001c0c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e04f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d20c      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b22      	ldr	r3, [pc, #136]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e032      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4916      	ldr	r1, [pc, #88]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490e      	ldr	r1, [pc, #56]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004742:	f000 f821 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490a      	ldr	r1, [pc, #40]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fd fa0e 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023c00 	.word	0x40023c00
 8004778:	40023800 	.word	0x40023800
 800477c:	08008c6c 	.word	0x08008c6c
 8004780:	2000000c 	.word	0x2000000c
 8004784:	20000010 	.word	0x20000010

08004788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	2300      	movs	r3, #0
 800479a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a0:	4b67      	ldr	r3, [pc, #412]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d00d      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x40>
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	f200 80bd 	bhi.w	800492c <HAL_RCC_GetSysClockFreq+0x1a4>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x34>
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d003      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ba:	e0b7      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b61      	ldr	r3, [pc, #388]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047be:	60bb      	str	r3, [r7, #8]
       break;
 80047c0:	e0b7      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c2:	4b61      	ldr	r3, [pc, #388]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047c4:	60bb      	str	r3, [r7, #8]
      break;
 80047c6:	e0b4      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c8:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d2:	4b5b      	ldr	r3, [pc, #364]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d04d      	beq.n	800487a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047de:	4b58      	ldr	r3, [pc, #352]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	461a      	mov	r2, r3
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	ea02 0800 	and.w	r8, r2, r0
 80047f6:	ea03 0901 	and.w	r9, r3, r1
 80047fa:	4640      	mov	r0, r8
 80047fc:	4649      	mov	r1, r9
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	014b      	lsls	r3, r1, #5
 8004808:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800480c:	0142      	lsls	r2, r0, #5
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	ebb0 0008 	subs.w	r0, r0, r8
 8004816:	eb61 0109 	sbc.w	r1, r1, r9
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	018b      	lsls	r3, r1, #6
 8004824:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004828:	0182      	lsls	r2, r0, #6
 800482a:	1a12      	subs	r2, r2, r0
 800482c:	eb63 0301 	sbc.w	r3, r3, r1
 8004830:	f04f 0000 	mov.w	r0, #0
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	00d9      	lsls	r1, r3, #3
 800483a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800483e:	00d0      	lsls	r0, r2, #3
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	eb12 0208 	adds.w	r2, r2, r8
 8004848:	eb43 0309 	adc.w	r3, r3, r9
 800484c:	f04f 0000 	mov.w	r0, #0
 8004850:	f04f 0100 	mov.w	r1, #0
 8004854:	0259      	lsls	r1, r3, #9
 8004856:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800485a:	0250      	lsls	r0, r2, #9
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	461a      	mov	r2, r3
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	f7fb fcac 	bl	80001c8 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	e04a      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	099b      	lsrs	r3, r3, #6
 8004880:	461a      	mov	r2, r3
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	f240 10ff 	movw	r0, #511	; 0x1ff
 800488a:	f04f 0100 	mov.w	r1, #0
 800488e:	ea02 0400 	and.w	r4, r2, r0
 8004892:	ea03 0501 	and.w	r5, r3, r1
 8004896:	4620      	mov	r0, r4
 8004898:	4629      	mov	r1, r5
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	014b      	lsls	r3, r1, #5
 80048a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048a8:	0142      	lsls	r2, r0, #5
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	1b00      	subs	r0, r0, r4
 80048b0:	eb61 0105 	sbc.w	r1, r1, r5
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	018b      	lsls	r3, r1, #6
 80048be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048c2:	0182      	lsls	r2, r0, #6
 80048c4:	1a12      	subs	r2, r2, r0
 80048c6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ca:	f04f 0000 	mov.w	r0, #0
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	00d9      	lsls	r1, r3, #3
 80048d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048d8:	00d0      	lsls	r0, r2, #3
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	1912      	adds	r2, r2, r4
 80048e0:	eb45 0303 	adc.w	r3, r5, r3
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f04f 0100 	mov.w	r1, #0
 80048ec:	0299      	lsls	r1, r3, #10
 80048ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048f2:	0290      	lsls	r0, r2, #10
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	461a      	mov	r2, r3
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	f7fb fc60 	bl	80001c8 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	3301      	adds	r3, #1
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	60bb      	str	r3, [r7, #8]
      break;
 800492a:	e002      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800492e:	60bb      	str	r3, [r7, #8]
      break;
 8004930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004932:	68bb      	ldr	r3, [r7, #8]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800
 8004944:	00f42400 	.word	0x00f42400
 8004948:	007a1200 	.word	0x007a1200

0800494c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_RCC_GetHCLKFreq+0x14>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	2000000c 	.word	0x2000000c

08004964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004968:	f7ff fff0 	bl	800494c <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4903      	ldr	r1, [pc, #12]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023800 	.word	0x40023800
 8004988:	08008c7c 	.word	0x08008c7c

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d035      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049b4:	4b62      	ldr	r3, [pc, #392]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049ba:	f7fd f927 	bl	8001c0c <HAL_GetTick>
 80049be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049c0:	e008      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049c2:	f7fd f923 	bl	8001c0c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e0b0      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d4:	4b5b      	ldr	r3, [pc, #364]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f0      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	019a      	lsls	r2, r3, #6
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	071b      	lsls	r3, r3, #28
 80049ec:	4955      	ldr	r1, [pc, #340]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049f4:	4b52      	ldr	r3, [pc, #328]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049fa:	f7fd f907 	bl	8001c0c <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a02:	f7fd f903 	bl	8001c0c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e090      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a14:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8083 	beq.w	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a43      	ldr	r2, [pc, #268]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3e:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a3e      	ldr	r2, [pc, #248]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a56:	f7fd f8d9 	bl	8001c0c <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a5e:	f7fd f8d5 	bl	8001c0c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e062      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a70:	4b35      	ldr	r3, [pc, #212]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a7c:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d02f      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d028      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a9a:	4b2a      	ldr	r3, [pc, #168]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ab0:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d114      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7fd f8a3 	bl	8001c0c <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fd f89f 	bl	8001c0c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e02a      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ee      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af8:	d10d      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	490d      	ldr	r1, [pc, #52]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	608b      	str	r3, [r1, #8]
 8004b14:	e005      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b20:	6093      	str	r3, [r2, #8]
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2e:	4905      	ldr	r1, [pc, #20]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	42470068 	.word	0x42470068
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	42470e40 	.word	0x42470e40

08004b50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d13e      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b6e:	4b23      	ldr	r3, [pc, #140]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d12f      	bne.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b84:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b86:	617b      	str	r3, [r7, #20]
          break;
 8004b88:	e02f      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b96:	d108      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b98:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba0:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e007      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd4:	0f1b      	lsrs	r3, r3, #28
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]
          break;
 8004be2:	e002      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
          break;
 8004be8:	bf00      	nop
        }
      }
      break;
 8004bea:	bf00      	nop
    }
  }
  return frequency;
 8004bec:	697b      	ldr	r3, [r7, #20]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	00bb8000 	.word	0x00bb8000
 8004c04:	007a1200 	.word	0x007a1200
 8004c08:	00f42400 	.word	0x00f42400

08004c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e07b      	b.n	8004d16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d108      	bne.n	8004c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2e:	d009      	beq.n	8004c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	61da      	str	r2, [r3, #28]
 8004c36:	e005      	b.n	8004c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fe94 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	ea42 0103 	orr.w	r1, r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	f003 0104 	and.w	r1, r3, #4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	f003 0210 	and.w	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d1e:	b084      	sub	sp, #16
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	f107 001c 	add.w	r0, r7, #28
 8004d2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d122      	bne.n	8004d7c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d105      	bne.n	8004d70 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 fac5 	bl	8006300 <USB_CoreReset>
 8004d76:	4603      	mov	r3, r0
 8004d78:	73fb      	strb	r3, [r7, #15]
 8004d7a:	e01a      	b.n	8004db2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 fab9 	bl	8006300 <USB_CoreReset>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
 8004da4:	e005      	b.n	8004db2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10b      	bne.n	8004dd0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f043 0206 	orr.w	r2, r3, #6
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ddc:	b004      	add	sp, #16
 8004dde:	4770      	bx	lr

08004de0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d165      	bne.n	8004ec0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a41      	ldr	r2, [pc, #260]	; (8004efc <USB_SetTurnaroundTime+0x11c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d906      	bls.n	8004e0a <USB_SetTurnaroundTime+0x2a>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a40      	ldr	r2, [pc, #256]	; (8004f00 <USB_SetTurnaroundTime+0x120>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d202      	bcs.n	8004e0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e04:	230f      	movs	r3, #15
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e062      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a3c      	ldr	r2, [pc, #240]	; (8004f00 <USB_SetTurnaroundTime+0x120>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d306      	bcc.n	8004e20 <USB_SetTurnaroundTime+0x40>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4a3b      	ldr	r2, [pc, #236]	; (8004f04 <USB_SetTurnaroundTime+0x124>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d202      	bcs.n	8004e20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e1a:	230e      	movs	r3, #14
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e057      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a38      	ldr	r2, [pc, #224]	; (8004f04 <USB_SetTurnaroundTime+0x124>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d306      	bcc.n	8004e36 <USB_SetTurnaroundTime+0x56>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a37      	ldr	r2, [pc, #220]	; (8004f08 <USB_SetTurnaroundTime+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d202      	bcs.n	8004e36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e30:	230d      	movs	r3, #13
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e04c      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a33      	ldr	r2, [pc, #204]	; (8004f08 <USB_SetTurnaroundTime+0x128>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d306      	bcc.n	8004e4c <USB_SetTurnaroundTime+0x6c>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4a32      	ldr	r2, [pc, #200]	; (8004f0c <USB_SetTurnaroundTime+0x12c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d802      	bhi.n	8004e4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e46:	230c      	movs	r3, #12
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e041      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <USB_SetTurnaroundTime+0x12c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d906      	bls.n	8004e62 <USB_SetTurnaroundTime+0x82>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a2e      	ldr	r2, [pc, #184]	; (8004f10 <USB_SetTurnaroundTime+0x130>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d802      	bhi.n	8004e62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e5c:	230b      	movs	r3, #11
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e036      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <USB_SetTurnaroundTime+0x130>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d906      	bls.n	8004e78 <USB_SetTurnaroundTime+0x98>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <USB_SetTurnaroundTime+0x134>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d802      	bhi.n	8004e78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e72:	230a      	movs	r3, #10
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e02b      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a26      	ldr	r2, [pc, #152]	; (8004f14 <USB_SetTurnaroundTime+0x134>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d906      	bls.n	8004e8e <USB_SetTurnaroundTime+0xae>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <USB_SetTurnaroundTime+0x138>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d202      	bcs.n	8004e8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e88:	2309      	movs	r3, #9
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e020      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <USB_SetTurnaroundTime+0x138>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d306      	bcc.n	8004ea4 <USB_SetTurnaroundTime+0xc4>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a20      	ldr	r2, [pc, #128]	; (8004f1c <USB_SetTurnaroundTime+0x13c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d802      	bhi.n	8004ea4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e015      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <USB_SetTurnaroundTime+0x13c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d906      	bls.n	8004eba <USB_SetTurnaroundTime+0xda>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <USB_SetTurnaroundTime+0x140>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d202      	bcs.n	8004eba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004eb4:	2307      	movs	r3, #7
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e00a      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004eba:	2306      	movs	r3, #6
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e007      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ec6:	2309      	movs	r3, #9
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e001      	b.n	8004ed0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ecc:	2309      	movs	r3, #9
 8004ece:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	029b      	lsls	r3, r3, #10
 8004ee4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	00d8acbf 	.word	0x00d8acbf
 8004f00:	00e4e1c0 	.word	0x00e4e1c0
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	01067380 	.word	0x01067380
 8004f0c:	011a499f 	.word	0x011a499f
 8004f10:	01312cff 	.word	0x01312cff
 8004f14:	014ca43f 	.word	0x014ca43f
 8004f18:	016e3600 	.word	0x016e3600
 8004f1c:	01a6ab1f 	.word	0x01a6ab1f
 8004f20:	01e84800 	.word	0x01e84800

08004f24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f043 0201 	orr.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 0201 	bic.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d106      	bne.n	8004f94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60da      	str	r2, [r3, #12]
 8004f92:	e00b      	b.n	8004fac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60da      	str	r2, [r3, #12]
 8004fa6:	e001      	b.n	8004fac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e003      	b.n	8004fb4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fac:	2032      	movs	r0, #50	; 0x32
 8004fae:	f7fc fe39 	bl	8001c24 <HAL_Delay>

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e009      	b.n	8004ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	3340      	adds	r3, #64	; 0x40
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3301      	adds	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b0e      	cmp	r3, #14
 8004ff4:	d9f2      	bls.n	8004fdc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d11c      	bne.n	8005036 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
 8005034:	e00b      	b.n	800504e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005054:	461a      	mov	r2, r3
 8005056:	2300      	movs	r3, #0
 8005058:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	4619      	mov	r1, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005068:	461a      	mov	r2, r3
 800506a:	680b      	ldr	r3, [r1, #0]
 800506c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	2b01      	cmp	r3, #1
 8005072:	d10c      	bne.n	800508e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800507a:	2100      	movs	r1, #0
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f949 	bl	8005314 <USB_SetDevSpeed>
 8005082:	e008      	b.n	8005096 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005084:	2101      	movs	r1, #1
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f944 	bl	8005314 <USB_SetDevSpeed>
 800508c:	e003      	b.n	8005096 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800508e:	2103      	movs	r1, #3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f93f 	bl	8005314 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005096:	2110      	movs	r1, #16
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f8f3 	bl	8005284 <USB_FlushTxFifo>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f911 	bl	80052d0 <USB_FlushRxFifo>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050be:	461a      	mov	r2, r3
 80050c0:	2300      	movs	r3, #0
 80050c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	461a      	mov	r2, r3
 80050cc:	2300      	movs	r3, #0
 80050ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d6:	461a      	mov	r2, r3
 80050d8:	2300      	movs	r3, #0
 80050da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	e043      	b.n	800516a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050f8:	d118      	bne.n	800512c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	461a      	mov	r2, r3
 800510e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	e013      	b.n	800513e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005122:	461a      	mov	r2, r3
 8005124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e008      	b.n	800513e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	461a      	mov	r2, r3
 800515e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	3301      	adds	r3, #1
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	429a      	cmp	r2, r3
 8005170:	d3b7      	bcc.n	80050e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005172:	2300      	movs	r3, #0
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	e043      	b.n	8005200 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800518a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800518e:	d118      	bne.n	80051c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	461a      	mov	r2, r3
 80051a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e013      	b.n	80051d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	461a      	mov	r2, r3
 80051ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	e008      	b.n	80051d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	461a      	mov	r2, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	461a      	mov	r2, r3
 80051f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3301      	adds	r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	429a      	cmp	r2, r3
 8005206:	d3b7      	bcc.n	8005178 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800521a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005228:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	2b00      	cmp	r3, #0
 800522e:	d105      	bne.n	800523c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f043 0210 	orr.w	r2, r3, #16
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <USB_DevInit+0x2c4>)
 8005242:	4313      	orrs	r3, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f043 0208 	orr.w	r2, r3, #8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800525a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005268:	f043 0304 	orr.w	r3, r3, #4
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800527c:	b004      	add	sp, #16
 800527e:	4770      	bx	lr
 8005280:	803c3800 	.word	0x803c3800

08005284 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	f043 0220 	orr.w	r2, r3, #32
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3301      	adds	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a09      	ldr	r2, [pc, #36]	; (80052cc <USB_FlushTxFifo+0x48>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e006      	b.n	80052be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d0f0      	beq.n	800529e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	00030d40 	.word	0x00030d40

080052d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2210      	movs	r2, #16
 80052e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3301      	adds	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4a09      	ldr	r2, [pc, #36]	; (8005310 <USB_FlushRxFifo+0x40>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e006      	b.n	8005302 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d0f0      	beq.n	80052e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	00030d40 	.word	0x00030d40

08005314 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0306 	and.w	r3, r3, #6
 800535e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005366:	2300      	movs	r3, #0
 8005368:	75fb      	strb	r3, [r7, #23]
 800536a:	e00a      	b.n	8005382 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d002      	beq.n	8005378 <USB_GetDevSpeed+0x32>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b06      	cmp	r3, #6
 8005376:	d102      	bne.n	800537e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005378:	2302      	movs	r3, #2
 800537a:	75fb      	strb	r3, [r7, #23]
 800537c:	e001      	b.n	8005382 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800537e:	230f      	movs	r3, #15
 8005380:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d13a      	bne.n	8005422 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d155      	bne.n	8005490 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	78db      	ldrb	r3, [r3, #3]
 80053fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005400:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	059b      	lsls	r3, r3, #22
 8005406:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005408:	4313      	orrs	r3, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e036      	b.n	8005490 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	69da      	ldr	r2, [r3, #28]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	2101      	movs	r1, #1
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005440:	4313      	orrs	r3, r2
 8005442:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d11a      	bne.n	8005490 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	78db      	ldrb	r3, [r3, #3]
 8005474:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005476:	430b      	orrs	r3, r1
 8005478:	4313      	orrs	r3, r2
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d161      	bne.n	8005580 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d2:	d11f      	bne.n	8005514 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005512:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	2101      	movs	r1, #1
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	b29b      	uxth	r3, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005534:	4013      	ands	r3, r2
 8005536:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	2101      	movs	r1, #1
 800554a:	fa01 f303 	lsl.w	r3, r1, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	43db      	mvns	r3, r3
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005558:	4013      	ands	r3, r2
 800555a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	0159      	lsls	r1, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	440b      	add	r3, r1
 8005572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005576:	4619      	mov	r1, r3
 8005578:	4b35      	ldr	r3, [pc, #212]	; (8005650 <USB_DeactivateEndpoint+0x1b0>)
 800557a:	4013      	ands	r3, r2
 800557c:	600b      	str	r3, [r1, #0]
 800557e:	e060      	b.n	8005642 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005596:	d11f      	bne.n	80055d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	43db      	mvns	r3, r3
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f8:	4013      	ands	r3, r2
 80055fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	041b      	lsls	r3, r3, #16
 8005614:	43db      	mvns	r3, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561c:	4013      	ands	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	0159      	lsls	r1, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	440b      	add	r3, r1
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	4619      	mov	r1, r3
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <USB_DeactivateEndpoint+0x1b4>)
 800563e:	4013      	ands	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	ec337800 	.word	0xec337800
 8005654:	eff37800 	.word	0xeff37800

08005658 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	; 0x28
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b01      	cmp	r3, #1
 8005676:	f040 815c 	bne.w	8005932 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d132      	bne.n	80056e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e0:	0cdb      	lsrs	r3, r3, #19
 80056e2:	04db      	lsls	r3, r3, #19
 80056e4:	6113      	str	r3, [r2, #16]
 80056e6:	e074      	b.n	80057d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005702:	0cdb      	lsrs	r3, r3, #19
 8005704:	04db      	lsls	r3, r3, #19
 8005706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005722:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005726:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800572a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6959      	ldr	r1, [r3, #20]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	440b      	add	r3, r1
 8005744:	1e59      	subs	r1, r3, #1
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	fbb1 f3f3 	udiv	r3, r1, r3
 800574e:	04d9      	lsls	r1, r3, #19
 8005750:	4b9d      	ldr	r3, [pc, #628]	; (80059c8 <USB_EPStartXfer+0x370>)
 8005752:	400b      	ands	r3, r1
 8005754:	69b9      	ldr	r1, [r7, #24]
 8005756:	0148      	lsls	r0, r1, #5
 8005758:	69f9      	ldr	r1, [r7, #28]
 800575a:	4401      	add	r1, r0
 800575c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005760:	4313      	orrs	r3, r2
 8005762:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577a:	69b9      	ldr	r1, [r7, #24]
 800577c:	0148      	lsls	r0, r1, #5
 800577e:	69f9      	ldr	r1, [r7, #28]
 8005780:	4401      	add	r1, r0
 8005782:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005786:	4313      	orrs	r3, r2
 8005788:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	78db      	ldrb	r3, [r3, #3]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d11f      	bne.n	80057d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d14b      	bne.n	8005870 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	78db      	ldrb	r3, [r3, #3]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d128      	bne.n	800584e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d110      	bne.n	800582e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	e00f      	b.n	800584e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005868:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	e12f      	b.n	8005ad0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800588e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	78db      	ldrb	r3, [r3, #3]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d015      	beq.n	80058c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8117 	beq.w	8005ad0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	69f9      	ldr	r1, [r7, #28]
 80058ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058be:	4313      	orrs	r3, r2
 80058c0:	634b      	str	r3, [r1, #52]	; 0x34
 80058c2:	e105      	b.n	8005ad0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d110      	bne.n	80058f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	e00f      	b.n	8005916 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005914:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	68d9      	ldr	r1, [r3, #12]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	781a      	ldrb	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	b298      	uxth	r0, r3
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	4603      	mov	r3, r0
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fa2b 	bl	8005d86 <USB_WritePacket>
 8005930:	e0ce      	b.n	8005ad0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594c:	0cdb      	lsrs	r3, r3, #19
 800594e:	04db      	lsls	r3, r3, #19
 8005950:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005970:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005974:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d126      	bne.n	80059cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	0148      	lsls	r0, r1, #5
 8005998:	69f9      	ldr	r1, [r7, #28]
 800599a:	4401      	add	r1, r0
 800599c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a0:	4313      	orrs	r3, r2
 80059a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059c2:	6113      	str	r3, [r2, #16]
 80059c4:	e036      	b.n	8005a34 <USB_EPStartXfer+0x3dc>
 80059c6:	bf00      	nop
 80059c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4413      	add	r3, r2
 80059d6:	1e5a      	subs	r2, r3, #1
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	8afb      	ldrh	r3, [r7, #22]
 80059f2:	04d9      	lsls	r1, r3, #19
 80059f4:	4b39      	ldr	r3, [pc, #228]	; (8005adc <USB_EPStartXfer+0x484>)
 80059f6:	400b      	ands	r3, r1
 80059f8:	69b9      	ldr	r1, [r7, #24]
 80059fa:	0148      	lsls	r0, r1, #5
 80059fc:	69f9      	ldr	r1, [r7, #28]
 80059fe:	4401      	add	r1, r0
 8005a00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a04:	4313      	orrs	r3, r2
 8005a06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	8af9      	ldrh	r1, [r7, #22]
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	0148      	lsls	r0, r1, #5
 8005a28:	69f9      	ldr	r1, [r7, #28]
 8005a2a:	4401      	add	r1, r0
 8005a2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a30:	4313      	orrs	r3, r2
 8005a32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d10d      	bne.n	8005a56 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	68d9      	ldr	r1, [r3, #12]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a52:	460a      	mov	r2, r1
 8005a54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	78db      	ldrb	r3, [r3, #3]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d128      	bne.n	8005ab0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d110      	bne.n	8005a90 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	e00f      	b.n	8005ab0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ace:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	1ff80000 	.word	0x1ff80000

08005ae0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	f040 80cd 	bne.w	8005c9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d132      	bne.n	8005b70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b68:	0cdb      	lsrs	r3, r3, #19
 8005b6a:	04db      	lsls	r3, r3, #19
 8005b6c:	6113      	str	r3, [r2, #16]
 8005b6e:	e04e      	b.n	8005c0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8a:	0cdb      	lsrs	r3, r3, #19
 8005b8c:	04db      	lsls	r3, r3, #19
 8005b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005baa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d903      	bls.n	8005bc8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfe:	6939      	ldr	r1, [r7, #16]
 8005c00:	0148      	lsls	r0, r1, #5
 8005c02:	6979      	ldr	r1, [r7, #20]
 8005c04:	4401      	add	r1, r0
 8005c06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d11e      	bne.n	8005c52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d009      	beq.n	8005c30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	e092      	b.n	8005d78 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d07e      	beq.n	8005d78 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	6979      	ldr	r1, [r7, #20]
 8005c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c96:	4313      	orrs	r3, r2
 8005c98:	634b      	str	r3, [r1, #52]	; 0x34
 8005c9a:	e06d      	b.n	8005d78 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb6:	0cdb      	lsrs	r3, r3, #19
 8005cb8:	04db      	lsls	r3, r3, #19
 8005cba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cde:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d26:	6939      	ldr	r1, [r7, #16]
 8005d28:	0148      	lsls	r0, r1, #5
 8005d2a:	6979      	ldr	r1, [r7, #20]
 8005d2c:	4401      	add	r1, r0
 8005d2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d32:	4313      	orrs	r3, r2
 8005d34:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d10d      	bne.n	8005d58 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d009      	beq.n	8005d58 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	68d9      	ldr	r1, [r3, #12]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	460a      	mov	r2, r1
 8005d56:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b089      	sub	sp, #36	; 0x24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	4611      	mov	r1, r2
 8005d92:	461a      	mov	r2, r3
 8005d94:	460b      	mov	r3, r1
 8005d96:	71fb      	strb	r3, [r7, #7]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11a      	bne.n	8005de2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dac:	88bb      	ldrh	r3, [r7, #4]
 8005dae:	3303      	adds	r3, #3
 8005db0:	089b      	lsrs	r3, r3, #2
 8005db2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e00f      	b.n	8005dda <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	031a      	lsls	r2, r3, #12
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3eb      	bcc.n	8005dba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3724      	adds	r7, #36	; 0x24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b089      	sub	sp, #36	; 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	3303      	adds	r3, #3
 8005e0a:	089b      	lsrs	r3, r3, #2
 8005e0c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	e00b      	b.n	8005e2c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	3304      	adds	r3, #4
 8005e24:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d3ef      	bcc.n	8005e14 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e34:	69fb      	ldr	r3, [r7, #28]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3724      	adds	r7, #36	; 0x24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d12c      	bne.n	8005eb8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	db12      	blt.n	8005e96 <USB_EPSetStall+0x54>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e94:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e02b      	b.n	8005f10 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	db12      	blt.n	8005ef0 <USB_EPSetStall+0xae>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00f      	beq.n	8005ef0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d128      	bne.n	8005f8c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	78db      	ldrb	r3, [r3, #3]
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d003      	beq.n	8005f6a <USB_EPClearStall+0x4c>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	78db      	ldrb	r3, [r3, #3]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d138      	bne.n	8005fdc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e027      	b.n	8005fdc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	78db      	ldrb	r3, [r3, #3]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d003      	beq.n	8005fbc <USB_EPClearStall+0x9e>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	78db      	ldrb	r3, [r3, #3]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d10f      	bne.n	8005fdc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fda:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006008:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800600c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006050:	f023 0303 	bic.w	r3, r3, #3
 8006054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006064:	f023 0302 	bic.w	r3, r3, #2
 8006068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4013      	ands	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060d2:	68fb      	ldr	r3, [r7, #12]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4013      	ands	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	0c1b      	lsrs	r3, r3, #16
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4013      	ands	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	b29b      	uxth	r3, r3
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006176:	68bb      	ldr	r3, [r7, #8]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	01db      	lsls	r3, r3, #7
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4013      	ands	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061d2:	68bb      	ldr	r3, [r7, #8]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f003 0301 	and.w	r3, r3, #1
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800621a:	f023 0307 	bic.w	r3, r3, #7
 800621e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800622e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006232:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	460b      	mov	r3, r1
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	333c      	adds	r3, #60	; 0x3c
 800625a:	3304      	adds	r3, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4a26      	ldr	r2, [pc, #152]	; (80062fc <USB_EP0_OutStart+0xb8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d90a      	bls.n	800627e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006278:	d101      	bne.n	800627e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e037      	b.n	80062ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	461a      	mov	r2, r3
 8006286:	2300      	movs	r3, #0
 8006288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800629c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ac:	f043 0318 	orr.w	r3, r3, #24
 80062b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062c6:	7afb      	ldrb	r3, [r7, #11]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d10f      	bne.n	80062ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	4f54300a 	.word	0x4f54300a

08006300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4a13      	ldr	r2, [pc, #76]	; (8006364 <USB_CoreReset+0x64>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e01b      	b.n	8006356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	daf2      	bge.n	800630c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f043 0201 	orr.w	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a09      	ldr	r2, [pc, #36]	; (8006364 <USB_CoreReset+0x64>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d901      	bls.n	8006348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e006      	b.n	8006356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b01      	cmp	r3, #1
 8006352:	d0f0      	beq.n	8006336 <USB_CoreReset+0x36>

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	00030d40 	.word	0x00030d40

08006368 <cobs_encode>:
 *
 * returns:        A struct containing the success status of the encoding
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result cobs_encode(void *dst_buf_ptr, size_t dst_buf_len, const void *src_ptr, size_t src_len) {
 8006368:	b480      	push	{r7}
 800636a:	b08f      	sub	sp, #60	; 0x3c
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
  cobs_encode_result result = {0, COBS_ENCODE_OK};
 8006376:	2300      	movs	r3, #0
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	2300      	movs	r3, #0
 800637c:	753b      	strb	r3, [r7, #20]
  const uint8_t *src_read_ptr = src_ptr;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
  const uint8_t *src_end_ptr = src_read_ptr + src_len;
 8006382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006386:	4413      	add	r3, r2
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *dst_buf_start_ptr = dst_buf_ptr;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	623b      	str	r3, [r7, #32]
  uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 800638e:	6a3a      	ldr	r2, [r7, #32]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4413      	add	r3, r2
 8006394:	61fb      	str	r3, [r7, #28]
  uint8_t *dst_code_write_ptr = dst_buf_ptr;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t *dst_write_ptr = dst_code_write_ptr + 1;
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	3301      	adds	r3, #1
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t src_byte = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	76fb      	strb	r3, [r7, #27]
  uint8_t search_len = 1;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* First, do a NULL pointer check and return immediately if it fails. */
  if ((dst_buf_ptr == NULL) || (src_ptr == NULL)) {
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <cobs_encode+0x4e>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <cobs_encode+0x64>
    result.status = COBS_ENCODE_NULL_POINTER;
 80063b6:	2301      	movs	r3, #1
 80063b8:	753b      	strb	r3, [r7, #20]
    return result;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	461a      	mov	r2, r3
 80063be:	f107 0310 	add.w	r3, r7, #16
 80063c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80063c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80063ca:	e05f      	b.n	800648c <cobs_encode+0x124>
  }

  if (src_len != 0) {
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d040      	beq.n	8006454 <cobs_encode+0xec>
    /* Iterate over the source bytes */
    for (;;) {
      /* Check for running out of output buffer space */
      if (dst_write_ptr >= dst_buf_end_ptr) {
 80063d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d305      	bcc.n	80063e6 <cobs_encode+0x7e>
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 80063da:	7d3b      	ldrb	r3, [r7, #20]
 80063dc:	f043 0302 	orr.w	r3, r3, #2
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	753b      	strb	r3, [r7, #20]
        break;
 80063e4:	e036      	b.n	8006454 <cobs_encode+0xec>
      }

      src_byte = *src_read_ptr++;
 80063e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	637a      	str	r2, [r7, #52]	; 0x34
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	76fb      	strb	r3, [r7, #27]
      if (src_byte == 0) {
 80063f0:	7efb      	ldrb	r3, [r7, #27]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10f      	bne.n	8006416 <cobs_encode+0xae>
        /* We found a zero byte */
        *dst_code_write_ptr = search_len;
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80063fc:	701a      	strb	r2, [r3, #0]
        dst_code_write_ptr = dst_write_ptr++;
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
        search_len = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (src_read_ptr >= src_end_ptr) {
 800640c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	429a      	cmp	r2, r3
 8006412:	d3de      	bcc.n	80063d2 <cobs_encode+0x6a>
          break;
 8006414:	e01e      	b.n	8006454 <cobs_encode+0xec>
        }
      } else {
        /* Copy the non-zero byte to the destination buffer */
        *dst_write_ptr++ = src_byte;
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800641c:	7efa      	ldrb	r2, [r7, #27]
 800641e:	701a      	strb	r2, [r3, #0]
        search_len++;
 8006420:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006424:	3301      	adds	r3, #1
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (src_read_ptr >= src_end_ptr) {
 800642a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	429a      	cmp	r2, r3
 8006430:	d20f      	bcs.n	8006452 <cobs_encode+0xea>
          break;
        }
        if (search_len == 0xFF) {
 8006432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006436:	2bff      	cmp	r3, #255	; 0xff
 8006438:	d1cb      	bne.n	80063d2 <cobs_encode+0x6a>
          /* We have a long string of non-zero bytes, so we need
           * to write out a length code of 0xFF. */
          *dst_code_write_ptr = search_len;
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006440:	701a      	strb	r2, [r3, #0]
          dst_code_write_ptr = dst_write_ptr++;
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006448:	633b      	str	r3, [r7, #48]	; 0x30
          search_len = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (dst_write_ptr >= dst_buf_end_ptr) {
 8006450:	e7bf      	b.n	80063d2 <cobs_encode+0x6a>
          break;
 8006452:	bf00      	nop

  /* We've reached the end of the source data (or possibly run out of output buffer)
   * Finalise the remaining output. In particular, write the code (length) byte.
   * Update the pointer to calculate the final output length.
   */
  if (dst_code_write_ptr >= dst_buf_end_ptr) {
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	429a      	cmp	r2, r3
 800645a:	d307      	bcc.n	800646c <cobs_encode+0x104>
    /* We've run out of output buffer to write the code byte. */
    result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 800645c:	7d3b      	ldrb	r3, [r7, #20]
 800645e:	f043 0302 	orr.w	r3, r3, #2
 8006462:	b2db      	uxtb	r3, r3
 8006464:	753b      	strb	r3, [r7, #20]
    dst_write_ptr = dst_buf_end_ptr;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646a:	e003      	b.n	8006474 <cobs_encode+0x10c>
  } else {
    /* Write the last code (length) byte. */
    *dst_code_write_ptr = search_len;
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006472:	701a      	strb	r2, [r3, #0]
  }

  /* Calculate the output length, from the value of dst_code_write_ptr */
  result.out_len = dst_write_ptr - dst_buf_start_ptr;
 8006474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	613b      	str	r3, [r7, #16]

  return result;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	461a      	mov	r2, r3
 8006480:	f107 0310 	add.w	r3, r7, #16
 8006484:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006488:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	373c      	adds	r7, #60	; 0x3c
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <cobs_decode>:
 *
 * returns:        A struct containing the success status of the decoding
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_decode_result cobs_decode(void *dst_buf_ptr, size_t dst_buf_len, const void *src_ptr, size_t src_len) {
 8006498:	b480      	push	{r7}
 800649a:	b08f      	sub	sp, #60	; 0x3c
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
  cobs_decode_result result = {0, COBS_DECODE_OK};
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	2300      	movs	r3, #0
 80064ac:	753b      	strb	r3, [r7, #20]
  const uint8_t *src_read_ptr = src_ptr;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
  const uint8_t *src_end_ptr = src_read_ptr + src_len;
 80064b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b6:	4413      	add	r3, r2
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t *dst_buf_start_ptr = dst_buf_ptr;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 80064be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	623b      	str	r3, [r7, #32]
  uint8_t *dst_write_ptr = dst_buf_ptr;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t src_byte;
  uint8_t i;
  uint8_t len_code;

  /* First, do a NULL pointer check and return immediately if it fails. */
  if ((dst_buf_ptr == NULL) || (src_ptr == NULL)) {
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <cobs_decode+0x3e>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <cobs_decode+0x54>
    result.status = COBS_DECODE_NULL_POINTER;
 80064d6:	2301      	movs	r3, #1
 80064d8:	753b      	strb	r3, [r7, #20]
    return result;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	461a      	mov	r2, r3
 80064de:	f107 0310 	add.w	r3, r7, #16
 80064e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80064e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80064ea:	e07e      	b.n	80065ea <cobs_decode+0x152>
  }

  if (src_len != 0) {
 80064ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d06f      	beq.n	80065d2 <cobs_decode+0x13a>
    for (;;) {
      len_code = *src_read_ptr++;
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	637a      	str	r2, [r7, #52]	; 0x34
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      if (len_code == 0) {
 80064fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <cobs_decode+0x7a>
        result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 8006506:	7d3b      	ldrb	r3, [r7, #20]
 8006508:	f043 0304 	orr.w	r3, r3, #4
 800650c:	b2db      	uxtb	r3, r3
 800650e:	753b      	strb	r3, [r7, #20]
        break;
 8006510:	e05f      	b.n	80065d2 <cobs_decode+0x13a>
      }
      len_code--;
 8006512:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006516:	3b01      	subs	r3, #1
 8006518:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      /* Check length code against remaining input bytes */
      remaining_bytes = src_end_ptr - src_read_ptr;
 800651c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	61fb      	str	r3, [r7, #28]
      if (len_code > remaining_bytes) {
 8006524:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	429a      	cmp	r2, r3
 800652c:	d207      	bcs.n	800653e <cobs_decode+0xa6>
        result.status |= COBS_DECODE_INPUT_TOO_SHORT;
 800652e:	7d3b      	ldrb	r3, [r7, #20]
 8006530:	f043 0308 	orr.w	r3, r3, #8
 8006534:	b2db      	uxtb	r3, r3
 8006536:	753b      	strb	r3, [r7, #20]
        len_code = remaining_bytes;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

      /* Check length code against remaining output buffer space */
      remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
 800653e:	6a3a      	ldr	r2, [r7, #32]
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	61fb      	str	r3, [r7, #28]
      if (len_code > remaining_bytes) {
 8006546:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	429a      	cmp	r2, r3
 800654e:	d207      	bcs.n	8006560 <cobs_decode+0xc8>
        result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 8006550:	7d3b      	ldrb	r3, [r7, #20]
 8006552:	f043 0302 	orr.w	r3, r3, #2
 8006556:	b2db      	uxtb	r3, r3
 8006558:	753b      	strb	r3, [r7, #20]
        len_code = remaining_bytes;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

      for (i = len_code; i != 0; i--) {
 8006560:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006568:	e016      	b.n	8006598 <cobs_decode+0x100>
        src_byte = *src_read_ptr++;
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	637a      	str	r2, [r7, #52]	; 0x34
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	76fb      	strb	r3, [r7, #27]
        if (src_byte == 0) {
 8006574:	7efb      	ldrb	r3, [r7, #27]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <cobs_decode+0xec>
          result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 800657a:	7d3b      	ldrb	r3, [r7, #20]
 800657c:	f043 0304 	orr.w	r3, r3, #4
 8006580:	b2db      	uxtb	r3, r3
 8006582:	753b      	strb	r3, [r7, #20]
        }
        *dst_write_ptr++ = src_byte;
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	633a      	str	r2, [r7, #48]	; 0x30
 800658a:	7efa      	ldrb	r2, [r7, #27]
 800658c:	701a      	strb	r2, [r3, #0]
      for (i = len_code; i != 0; i--) {
 800658e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006592:	3b01      	subs	r3, #1
 8006594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e4      	bne.n	800656a <cobs_decode+0xd2>
      }

      if (src_read_ptr >= src_end_ptr) {
 80065a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d213      	bcs.n	80065d0 <cobs_decode+0x138>
        break;
      }

      /* Add a zero to the end */
      if (len_code != 0xFE) {
 80065a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065ac:	2bfe      	cmp	r3, #254	; 0xfe
 80065ae:	d0a0      	beq.n	80064f2 <cobs_decode+0x5a>
        if (dst_write_ptr >= dst_buf_end_ptr) {
 80065b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d305      	bcc.n	80065c4 <cobs_decode+0x12c>
          result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 80065b8:	7d3b      	ldrb	r3, [r7, #20]
 80065ba:	f043 0302 	orr.w	r3, r3, #2
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	753b      	strb	r3, [r7, #20]
          break;
 80065c2:	e006      	b.n	80065d2 <cobs_decode+0x13a>
        }
        *dst_write_ptr++ = 0;
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	633a      	str	r2, [r7, #48]	; 0x30
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
      len_code = *src_read_ptr++;
 80065ce:	e790      	b.n	80064f2 <cobs_decode+0x5a>
        break;
 80065d0:	bf00      	nop
      }
    }
  }

  result.out_len = dst_write_ptr - dst_buf_start_ptr;
 80065d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	613b      	str	r3, [r7, #16]

  return result;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	461a      	mov	r2, r3
 80065de:	f107 0310 	add.w	r3, r7, #16
 80065e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80065e6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	373c      	adds	r7, #60	; 0x3c
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <_Z8crc_mathhh>:
// callers use crc8_byte

#ifdef CRC_MATH
// A basic implementation of CRC8 using only arithmetic

uint8_t crc_math(uint8_t data, uint8_t crc) {
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	4603      	mov	r3, r0
 80065fe:	460a      	mov	r2, r1
 8006600:	71fb      	strb	r3, [r7, #7]
 8006602:	4613      	mov	r3, r2
 8006604:	71bb      	strb	r3, [r7, #6]
  uint8_t i = (data ^ crc);
 8006606:	79fa      	ldrb	r2, [r7, #7]
 8006608:	79bb      	ldrb	r3, [r7, #6]
 800660a:	4053      	eors	r3, r2
 800660c:	73fb      	strb	r3, [r7, #15]

  crc = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	71bb      	strb	r3, [r7, #6]

  if (i & 1)
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <_Z8crc_mathhh+0x2e>
    crc ^= 0x5e;
 800661c:	79bb      	ldrb	r3, [r7, #6]
 800661e:	f083 035e 	eor.w	r3, r3, #94	; 0x5e
 8006622:	71bb      	strb	r3, [r7, #6]
  if (i & 2)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <_Z8crc_mathhh+0x42>
    crc ^= 0xbc;
 800662e:	79bb      	ldrb	r3, [r7, #6]
 8006630:	f083 0343 	eor.w	r3, r3, #67	; 0x43
 8006634:	43db      	mvns	r3, r3
 8006636:	71bb      	strb	r3, [r7, #6]
  if (i & 4)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <_Z8crc_mathhh+0x54>
    crc ^= 0x61;
 8006642:	79bb      	ldrb	r3, [r7, #6]
 8006644:	f083 0361 	eor.w	r3, r3, #97	; 0x61
 8006648:	71bb      	strb	r3, [r7, #6]
  if (i & 8)
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <_Z8crc_mathhh+0x68>
    crc ^= 0xc2;
 8006654:	79bb      	ldrb	r3, [r7, #6]
 8006656:	f083 033d 	eor.w	r3, r3, #61	; 0x3d
 800665a:	43db      	mvns	r3, r3
 800665c:	71bb      	strb	r3, [r7, #6]
  if (i & 0x10)
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <_Z8crc_mathhh+0x7c>
    crc ^= 0x9d;
 8006668:	79bb      	ldrb	r3, [r7, #6]
 800666a:	f083 0362 	eor.w	r3, r3, #98	; 0x62
 800666e:	43db      	mvns	r3, r3
 8006670:	71bb      	strb	r3, [r7, #6]
  if (i & 0x20)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <_Z8crc_mathhh+0x8e>
    crc ^= 0x23;
 800667c:	79bb      	ldrb	r3, [r7, #6]
 800667e:	f083 0323 	eor.w	r3, r3, #35	; 0x23
 8006682:	71bb      	strb	r3, [r7, #6]
  if (i & 0x40)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <_Z8crc_mathhh+0xa0>
    crc ^= 0x46;
 800668e:	79bb      	ldrb	r3, [r7, #6]
 8006690:	f083 0346 	eor.w	r3, r3, #70	; 0x46
 8006694:	71bb      	strb	r3, [r7, #6]
  if (i & 0x80)
 8006696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	da04      	bge.n	80066a8 <_Z8crc_mathhh+0xb2>
    crc ^= 0x8c;
 800669e:	79bb      	ldrb	r3, [r7, #6]
 80066a0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80066a4:	43db      	mvns	r3, r3
 80066a6:	71bb      	strb	r3, [r7, #6]

  return crc;
 80066a8:	79bb      	ldrb	r3, [r7, #6]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <_Z9crc8_bytehh>:
/* Calculate the CRC for an individual byte using the method you have been chosen inside "crc8_inc.h"
 * data   :=    New byte use to calculate the crc
 * crc    :=    Previus CRC
 * return :=    CRC for the [oldCRC|data]
 */
uint8_t crc8_byte(uint8_t data, uint8_t crc) {
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	4603      	mov	r3, r0
 80066be:	460a      	mov	r2, r1
 80066c0:	71fb      	strb	r3, [r7, #7]
 80066c2:	4613      	mov	r3, r2
 80066c4:	71bb      	strb	r3, [r7, #6]
#ifdef CRC_NIBBLES
  crc = crc_nibbles(data, crc);
#endif

#ifdef CRC_MATH
  crc = crc_math(data, crc);
 80066c6:	79ba      	ldrb	r2, [r7, #6]
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff ff92 	bl	80065f6 <_Z8crc_mathhh>
 80066d2:	4603      	mov	r3, r0
 80066d4:	71bb      	strb	r3, [r7, #6]
#endif

  return crc;
 80066d6:	79bb      	ldrb	r3, [r7, #6]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <_Z11crc8_streamPht>:

uint8_t crc8_stream(uint8_t *data, uint16_t length) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	807b      	strh	r3, [r7, #2]
  uint8_t crc = 0xff;
 80066ec:	23ff      	movs	r3, #255	; 0xff
 80066ee:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < length; i++) {
 80066f0:	2300      	movs	r3, #0
 80066f2:	81bb      	strh	r3, [r7, #12]
 80066f4:	89ba      	ldrh	r2, [r7, #12]
 80066f6:	887b      	ldrh	r3, [r7, #2]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d20e      	bcs.n	800671a <_Z11crc8_streamPht+0x3a>
    crc = crc8_byte(data[i], crc);
 80066fc:	89bb      	ldrh	r3, [r7, #12]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	7bfa      	ldrb	r2, [r7, #15]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff ffd4 	bl	80066b6 <_Z9crc8_bytehh>
 800670e:	4603      	mov	r3, r0
 8006710:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < length; i++) {
 8006712:	89bb      	ldrh	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	81bb      	strh	r3, [r7, #12]
 8006718:	e7ec      	b.n	80066f4 <_Z11crc8_streamPht+0x14>
  }
  return crc;
 800671a:	7bfb      	ldrb	r3, [r7, #15]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006730:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006734:	f002 f96a 	bl	8008a0c <USBD_static_malloc>
 8006738:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d105      	bne.n	800674c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006748:	2302      	movs	r3, #2
 800674a:	e066      	b.n	800681a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	7c1b      	ldrb	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d119      	bne.n	8006790 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800675c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006760:	2202      	movs	r2, #2
 8006762:	2181      	movs	r1, #129	; 0x81
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f002 f82e 	bl	80087c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006774:	2202      	movs	r2, #2
 8006776:	2101      	movs	r1, #1
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f002 f824 	bl	80087c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2210      	movs	r2, #16
 800678a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800678e:	e016      	b.n	80067be <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	2202      	movs	r2, #2
 8006794:	2181      	movs	r1, #129	; 0x81
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f002 f815 	bl	80087c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067a2:	2340      	movs	r3, #64	; 0x40
 80067a4:	2202      	movs	r2, #2
 80067a6:	2101      	movs	r1, #1
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f002 f80c 	bl	80087c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2210      	movs	r2, #16
 80067ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067be:	2308      	movs	r3, #8
 80067c0:	2203      	movs	r2, #3
 80067c2:	2182      	movs	r1, #130	; 0x82
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fffe 	bl	80087c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7c1b      	ldrb	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067fe:	2101      	movs	r1, #1
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f002 f8cf 	bl	80089a4 <USBD_LL_PrepareReceive>
 8006806:	e007      	b.n	8006818 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	2101      	movs	r1, #1
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f002 f8c6 	bl	80089a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800682e:	2181      	movs	r1, #129	; 0x81
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 ffee 	bl	8008812 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800683c:	2101      	movs	r1, #1
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 ffe7 	bl	8008812 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800684c:	2182      	movs	r1, #130	; 0x82
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 ffdf 	bl	8008812 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800687e:	4618      	mov	r0, r3
 8006880:	f002 f8d2 	bl	8008a28 <USBD_static_free>
    pdev->pClassData = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0af      	b.n	8006a20 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d03f      	beq.n	800694c <USBD_CDC_Setup+0xb4>
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	f040 809f 	bne.w	8006a10 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	88db      	ldrh	r3, [r3, #6]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02e      	beq.n	8006938 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da16      	bge.n	8006912 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80068f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	88d2      	ldrh	r2, [r2, #6]
 80068f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	88db      	ldrh	r3, [r3, #6]
 80068fc:	2b07      	cmp	r3, #7
 80068fe:	bf28      	it	cs
 8006900:	2307      	movcs	r3, #7
 8006902:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	89fa      	ldrh	r2, [r7, #14]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fb19 	bl	8007f42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006910:	e085      	b.n	8006a1e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785a      	ldrb	r2, [r3, #1]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	88db      	ldrh	r3, [r3, #6]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006928:	6939      	ldr	r1, [r7, #16]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	88db      	ldrh	r3, [r3, #6]
 800692e:	461a      	mov	r2, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 fb32 	bl	8007f9a <USBD_CtlPrepareRx>
      break;
 8006936:	e072      	b.n	8006a1e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	7850      	ldrb	r0, [r2, #1]
 8006944:	2200      	movs	r2, #0
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	4798      	blx	r3
      break;
 800694a:	e068      	b.n	8006a1e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b0b      	cmp	r3, #11
 8006952:	d852      	bhi.n	80069fa <USBD_CDC_Setup+0x162>
 8006954:	a201      	add	r2, pc, #4	; (adr r2, 800695c <USBD_CDC_Setup+0xc4>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	0800698d 	.word	0x0800698d
 8006960:	08006a09 	.word	0x08006a09
 8006964:	080069fb 	.word	0x080069fb
 8006968:	080069fb 	.word	0x080069fb
 800696c:	080069fb 	.word	0x080069fb
 8006970:	080069fb 	.word	0x080069fb
 8006974:	080069fb 	.word	0x080069fb
 8006978:	080069fb 	.word	0x080069fb
 800697c:	080069fb 	.word	0x080069fb
 8006980:	080069fb 	.word	0x080069fb
 8006984:	080069b7 	.word	0x080069b7
 8006988:	080069e1 	.word	0x080069e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b03      	cmp	r3, #3
 8006996:	d107      	bne.n	80069a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006998:	f107 030a 	add.w	r3, r7, #10
 800699c:	2202      	movs	r2, #2
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 face 	bl	8007f42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069a6:	e032      	b.n	8006a0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fa58 	bl	8007e60 <USBD_CtlError>
            ret = USBD_FAIL;
 80069b0:	2303      	movs	r3, #3
 80069b2:	75fb      	strb	r3, [r7, #23]
          break;
 80069b4:	e02b      	b.n	8006a0e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d107      	bne.n	80069d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069c2:	f107 030d 	add.w	r3, r7, #13
 80069c6:	2201      	movs	r2, #1
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fab9 	bl	8007f42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069d0:	e01d      	b.n	8006a0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fa43 	bl	8007e60 <USBD_CtlError>
            ret = USBD_FAIL;
 80069da:	2303      	movs	r3, #3
 80069dc:	75fb      	strb	r3, [r7, #23]
          break;
 80069de:	e016      	b.n	8006a0e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d00f      	beq.n	8006a0c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fa36 	bl	8007e60 <USBD_CtlError>
            ret = USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069f8:	e008      	b.n	8006a0c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fa2f 	bl	8007e60 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a02:	2303      	movs	r3, #3
 8006a04:	75fb      	strb	r3, [r7, #23]
          break;
 8006a06:	e002      	b.n	8006a0e <USBD_CDC_Setup+0x176>
          break;
 8006a08:	bf00      	nop
 8006a0a:	e008      	b.n	8006a1e <USBD_CDC_Setup+0x186>
          break;
 8006a0c:	bf00      	nop
      }
      break;
 8006a0e:	e006      	b.n	8006a1e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fa24 	bl	8007e60 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e04f      	b.n	8006aea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	3318      	adds	r3, #24
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d029      	beq.n	8006abc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a68:	78fa      	ldrb	r2, [r7, #3]
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	440b      	add	r3, r1
 8006a76:	3318      	adds	r3, #24
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	78f9      	ldrb	r1, [r7, #3]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4403      	add	r3, r0
 8006a88:	3344      	adds	r3, #68	; 0x44
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a90:	fb03 f301 	mul.w	r3, r3, r1
 8006a94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d110      	bne.n	8006abc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006aae:	78f9      	ldrb	r1, [r7, #3]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 ff54 	bl	8008962 <USBD_LL_Transmit>
 8006aba:	e015      	b.n	8006ae8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ae4:	78fa      	ldrb	r2, [r7, #3]
 8006ae6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e015      	b.n	8006b40 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 ff64 	bl	80089e6 <USBD_LL_GetRxDataSize>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e01b      	b.n	8006b9a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d015      	beq.n	8006b98 <USBD_CDC_EP0_RxReady+0x50>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b72:	2bff      	cmp	r3, #255	; 0xff
 8006b74:	d010      	beq.n	8006b98 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006b84:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b8c:	b292      	uxth	r2, r2
 8006b8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	22ff      	movs	r2, #255	; 0xff
 8006b94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2243      	movs	r2, #67	; 0x43
 8006bb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006bb2:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	200000a0 	.word	0x200000a0

08006bc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2243      	movs	r2, #67	; 0x43
 8006bd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006bd2:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	2000005c 	.word	0x2000005c

08006be4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2243      	movs	r2, #67	; 0x43
 8006bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006bf2:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	200000e4 	.word	0x200000e4

08006c04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	220a      	movs	r2, #10
 8006c10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c12:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	20000018 	.word	0x20000018

08006c24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e004      	b.n	8006c42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e008      	b.n	8006c7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e004      	b.n	8006cb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e01a      	b.n	8006d14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d114      	bne.n	8006d12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d06:	2181      	movs	r1, #129	; 0x81
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fe2a 	bl	8008962 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e016      	b.n	8006d68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	7c1b      	ldrb	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fe28 	bl	80089a4 <USBD_LL_PrepareReceive>
 8006d54:	e007      	b.n	8006d66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	2101      	movs	r1, #1
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fe1f 	bl	80089a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e01f      	b.n	8006dc8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	79fa      	ldrb	r2, [r7, #7]
 8006dba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f001 fc9b 	bl	80086f8 <USBD_LL_Init>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e016      	b.n	8006e16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	f107 020e 	add.w	r2, r7, #14
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fcb2 	bl	8008790 <USBD_LL_Start>
 8006e2c:	4603      	mov	r3, r0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
 8006e70:	4611      	mov	r1, r2
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
  }

  return USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 ff90 	bl	8007dec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006eda:	461a      	mov	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d01a      	beq.n	8006f26 <USBD_LL_SetupStage+0x72>
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d822      	bhi.n	8006f3a <USBD_LL_SetupStage+0x86>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <USBD_LL_SetupStage+0x4a>
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d00a      	beq.n	8006f12 <USBD_LL_SetupStage+0x5e>
 8006efc:	e01d      	b.n	8006f3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa62 	bl	80073d0 <USBD_StdDevReq>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f10:	e020      	b.n	8006f54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fac6 	bl	80074ac <USBD_StdItfReq>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]
      break;
 8006f24:	e016      	b.n	8006f54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fb05 	bl	800753e <USBD_StdEPReq>
 8006f34:	4603      	mov	r3, r0
 8006f36:	73fb      	strb	r3, [r7, #15]
      break;
 8006f38:	e00c      	b.n	8006f54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fc81 	bl	8008850 <USBD_LL_StallEP>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73fb      	strb	r3, [r7, #15]
      break;
 8006f52:	bf00      	nop
  }

  return ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	460b      	mov	r3, r1
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d138      	bne.n	8006fe4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d14a      	bne.n	800701a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d913      	bls.n	8006fb8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	1ad2      	subs	r2, r2, r3
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bf28      	it	cs
 8006faa:	4613      	movcs	r3, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f001 f80f 	bl	8007fd4 <USBD_CtlContinueRx>
 8006fb6:	e030      	b.n	800701a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d10b      	bne.n	8006fdc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f001 f80a 	bl	8007ff6 <USBD_CtlSendStatus>
 8006fe2:	e01a      	b.n	800701a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d114      	bne.n	800701a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00e      	beq.n	800701a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	7afa      	ldrb	r2, [r7, #11]
 8007006:	4611      	mov	r1, r2
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	4798      	blx	r3
 800700c:	4603      	mov	r3, r0
 800700e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	e000      	b.n	800701c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	460b      	mov	r3, r1
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d16b      	bne.n	8007110 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3314      	adds	r3, #20
 800703c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007044:	2b02      	cmp	r3, #2
 8007046:	d156      	bne.n	80070f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	429a      	cmp	r2, r3
 8007052:	d914      	bls.n	800707e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	1ad2      	subs	r2, r2, r3
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	461a      	mov	r2, r3
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 ff84 	bl	8007f78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007070:	2300      	movs	r3, #0
 8007072:	2200      	movs	r2, #0
 8007074:	2100      	movs	r1, #0
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f001 fc94 	bl	80089a4 <USBD_LL_PrepareReceive>
 800707c:	e03b      	b.n	80070f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	429a      	cmp	r2, r3
 8007088:	d11c      	bne.n	80070c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007092:	429a      	cmp	r2, r3
 8007094:	d316      	bcc.n	80070c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d20f      	bcs.n	80070c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070a4:	2200      	movs	r2, #0
 80070a6:	2100      	movs	r1, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 ff65 	bl	8007f78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070b6:	2300      	movs	r3, #0
 80070b8:	2200      	movs	r2, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f001 fc71 	bl	80089a4 <USBD_LL_PrepareReceive>
 80070c2:	e018      	b.n	80070f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d10b      	bne.n	80070e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070e8:	2180      	movs	r1, #128	; 0x80
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f001 fbb0 	bl	8008850 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 ff93 	bl	800801c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d122      	bne.n	8007146 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff fe98 	bl	8006e36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800710e:	e01a      	b.n	8007146 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b03      	cmp	r3, #3
 800711a:	d114      	bne.n	8007146 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00e      	beq.n	8007146 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	7afa      	ldrb	r2, [r7, #11]
 8007132:	4611      	mov	r1, r2
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	4798      	blx	r3
 8007138:	4603      	mov	r3, r0
 800713a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	e000      	b.n	8007148 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007180:	2303      	movs	r3, #3
 8007182:	e02f      	b.n	80071e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00f      	beq.n	80071ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6852      	ldr	r2, [r2, #4]
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	4611      	mov	r1, r2
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	2200      	movs	r2, #0
 80071b2:	2100      	movs	r1, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fb06 	bl	80087c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ca:	2340      	movs	r3, #64	; 0x40
 80071cc:	2200      	movs	r2, #0
 80071ce:	2180      	movs	r1, #128	; 0x80
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 faf8 	bl	80087c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2240      	movs	r2, #64	; 0x40
 80071e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	78fa      	ldrb	r2, [r7, #3]
 80071fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721a:	b2da      	uxtb	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2204      	movs	r2, #4
 8007226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b04      	cmp	r3, #4
 800724a:	d106      	bne.n	800725a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007252:	b2da      	uxtb	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800727a:	2303      	movs	r3, #3
 800727c:	e012      	b.n	80072a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b03      	cmp	r3, #3
 8007288:	d10b      	bne.n	80072a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e014      	b.n	80072f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d10d      	bne.n	80072ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	4611      	mov	r1, r2
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800730e:	2303      	movs	r3, #3
 8007310:	e014      	b.n	800733c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b03      	cmp	r3, #3
 800731c:	d10d      	bne.n	800733a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	d007      	beq.n	800733a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	78fa      	ldrb	r2, [r7, #3]
 8007334:	4611      	mov	r1, r2
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d009      	beq.n	8007388 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6852      	ldr	r2, [r2, #4]
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	4611      	mov	r1, r2
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
  }

  return USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007392:	b480      	push	{r7}
 8007394:	b087      	sub	sp, #28
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	3301      	adds	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073b0:	8a3b      	ldrh	r3, [r7, #16]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	b21a      	sxth	r2, r3
 80073b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	b21b      	sxth	r3, r3
 80073be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073c0:	89fb      	ldrh	r3, [r7, #14]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073e6:	2b40      	cmp	r3, #64	; 0x40
 80073e8:	d005      	beq.n	80073f6 <USBD_StdDevReq+0x26>
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d853      	bhi.n	8007496 <USBD_StdDevReq+0xc6>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00b      	beq.n	800740a <USBD_StdDevReq+0x3a>
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d14f      	bne.n	8007496 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4798      	blx	r3
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]
      break;
 8007408:	e04a      	b.n	80074a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b09      	cmp	r3, #9
 8007410:	d83b      	bhi.n	800748a <USBD_StdDevReq+0xba>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <USBD_StdDevReq+0x48>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	0800746d 	.word	0x0800746d
 800741c:	08007481 	.word	0x08007481
 8007420:	0800748b 	.word	0x0800748b
 8007424:	08007477 	.word	0x08007477
 8007428:	0800748b 	.word	0x0800748b
 800742c:	0800744b 	.word	0x0800744b
 8007430:	08007441 	.word	0x08007441
 8007434:	0800748b 	.word	0x0800748b
 8007438:	08007463 	.word	0x08007463
 800743c:	08007455 	.word	0x08007455
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f9de 	bl	8007804 <USBD_GetDescriptor>
          break;
 8007448:	e024      	b.n	8007494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fb43 	bl	8007ad8 <USBD_SetAddress>
          break;
 8007452:	e01f      	b.n	8007494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fb82 	bl	8007b60 <USBD_SetConfig>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]
          break;
 8007460:	e018      	b.n	8007494 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fc21 	bl	8007cac <USBD_GetConfig>
          break;
 800746a:	e013      	b.n	8007494 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fc52 	bl	8007d18 <USBD_GetStatus>
          break;
 8007474:	e00e      	b.n	8007494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fc81 	bl	8007d80 <USBD_SetFeature>
          break;
 800747e:	e009      	b.n	8007494 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fc90 	bl	8007da8 <USBD_ClrFeature>
          break;
 8007488:	e004      	b.n	8007494 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fce7 	bl	8007e60 <USBD_CtlError>
          break;
 8007492:	bf00      	nop
      }
      break;
 8007494:	e004      	b.n	80074a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fce1 	bl	8007e60 <USBD_CtlError>
      break;
 800749e:	bf00      	nop
  }

  return ret;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop

080074ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d005      	beq.n	80074d2 <USBD_StdItfReq+0x26>
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d82f      	bhi.n	800752a <USBD_StdItfReq+0x7e>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <USBD_StdItfReq+0x26>
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d12b      	bne.n	800752a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d81d      	bhi.n	800751c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	889b      	ldrh	r3, [r3, #4]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d813      	bhi.n	8007512 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	88db      	ldrh	r3, [r3, #6]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d110      	bne.n	8007526 <USBD_StdItfReq+0x7a>
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10d      	bne.n	8007526 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fd73 	bl	8007ff6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007510:	e009      	b.n	8007526 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fca3 	bl	8007e60 <USBD_CtlError>
          break;
 800751a:	e004      	b.n	8007526 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fc9e 	bl	8007e60 <USBD_CtlError>
          break;
 8007524:	e000      	b.n	8007528 <USBD_StdItfReq+0x7c>
          break;
 8007526:	bf00      	nop
      }
      break;
 8007528:	e004      	b.n	8007534 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fc97 	bl	8007e60 <USBD_CtlError>
      break;
 8007532:	bf00      	nop
  }

  return ret;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	889b      	ldrh	r3, [r3, #4]
 8007550:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755a:	2b40      	cmp	r3, #64	; 0x40
 800755c:	d007      	beq.n	800756e <USBD_StdEPReq+0x30>
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	f200 8145 	bhi.w	80077ee <USBD_StdEPReq+0x2b0>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00c      	beq.n	8007582 <USBD_StdEPReq+0x44>
 8007568:	2b20      	cmp	r3, #32
 800756a:	f040 8140 	bne.w	80077ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]
      break;
 8007580:	e13a      	b.n	80077f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b03      	cmp	r3, #3
 8007588:	d007      	beq.n	800759a <USBD_StdEPReq+0x5c>
 800758a:	2b03      	cmp	r3, #3
 800758c:	f300 8129 	bgt.w	80077e2 <USBD_StdEPReq+0x2a4>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d07f      	beq.n	8007694 <USBD_StdEPReq+0x156>
 8007594:	2b01      	cmp	r3, #1
 8007596:	d03c      	beq.n	8007612 <USBD_StdEPReq+0xd4>
 8007598:	e123      	b.n	80077e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d002      	beq.n	80075ac <USBD_StdEPReq+0x6e>
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d016      	beq.n	80075d8 <USBD_StdEPReq+0x9a>
 80075aa:	e02c      	b.n	8007606 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00d      	beq.n	80075ce <USBD_StdEPReq+0x90>
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d00a      	beq.n	80075ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 f947 	bl	8008850 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075c2:	2180      	movs	r1, #128	; 0x80
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f943 	bl	8008850 <USBD_LL_StallEP>
 80075ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075cc:	e020      	b.n	8007610 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fc45 	bl	8007e60 <USBD_CtlError>
              break;
 80075d6:	e01b      	b.n	8007610 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	885b      	ldrh	r3, [r3, #2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10e      	bne.n	80075fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <USBD_StdEPReq+0xc0>
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b80      	cmp	r3, #128	; 0x80
 80075ea:	d008      	beq.n	80075fe <USBD_StdEPReq+0xc0>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	88db      	ldrh	r3, [r3, #6]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f929 	bl	8008850 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fcf9 	bl	8007ff6 <USBD_CtlSendStatus>

              break;
 8007604:	e004      	b.n	8007610 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc29 	bl	8007e60 <USBD_CtlError>
              break;
 800760e:	bf00      	nop
          }
          break;
 8007610:	e0ec      	b.n	80077ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d002      	beq.n	8007624 <USBD_StdEPReq+0xe6>
 800761e:	2b03      	cmp	r3, #3
 8007620:	d016      	beq.n	8007650 <USBD_StdEPReq+0x112>
 8007622:	e030      	b.n	8007686 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00d      	beq.n	8007646 <USBD_StdEPReq+0x108>
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b80      	cmp	r3, #128	; 0x80
 800762e:	d00a      	beq.n	8007646 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f90b 	bl	8008850 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800763a:	2180      	movs	r1, #128	; 0x80
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f907 	bl	8008850 <USBD_LL_StallEP>
 8007642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007644:	e025      	b.n	8007692 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fc09 	bl	8007e60 <USBD_CtlError>
              break;
 800764e:	e020      	b.n	8007692 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	885b      	ldrh	r3, [r3, #2]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d11b      	bne.n	8007690 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 f911 	bl	800888e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fcc2 	bl	8007ff6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007684:	e004      	b.n	8007690 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fbe9 	bl	8007e60 <USBD_CtlError>
              break;
 800768e:	e000      	b.n	8007692 <USBD_StdEPReq+0x154>
              break;
 8007690:	bf00      	nop
          }
          break;
 8007692:	e0ab      	b.n	80077ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d002      	beq.n	80076a6 <USBD_StdEPReq+0x168>
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d032      	beq.n	800770a <USBD_StdEPReq+0x1cc>
 80076a4:	e097      	b.n	80077d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <USBD_StdEPReq+0x17e>
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b80      	cmp	r3, #128	; 0x80
 80076b0:	d004      	beq.n	80076bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fbd3 	bl	8007e60 <USBD_CtlError>
                break;
 80076ba:	e091      	b.n	80077e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	da0b      	bge.n	80076dc <USBD_StdEPReq+0x19e>
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	3310      	adds	r3, #16
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	3304      	adds	r3, #4
 80076da:	e00b      	b.n	80076f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	3304      	adds	r3, #4
 80076f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2202      	movs	r2, #2
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fc1d 	bl	8007f42 <USBD_CtlSendData>
              break;
 8007708:	e06a      	b.n	80077e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800770a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	da11      	bge.n	8007736 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	f003 020f 	and.w	r2, r3, #15
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	3324      	adds	r3, #36	; 0x24
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d117      	bne.n	800775c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb96 	bl	8007e60 <USBD_CtlError>
                  break;
 8007734:	e054      	b.n	80077e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fb83 	bl	8007e60 <USBD_CtlError>
                  break;
 800775a:	e041      	b.n	80077e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800775c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da0b      	bge.n	800777c <USBD_StdEPReq+0x23e>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	3310      	adds	r3, #16
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	3304      	adds	r3, #4
 800777a:	e00b      	b.n	8007794 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <USBD_StdEPReq+0x264>
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	2b80      	cmp	r3, #128	; 0x80
 80077a0:	d103      	bne.n	80077aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	e00e      	b.n	80077c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 f88c 	bl	80088cc <USBD_LL_IsStallEP>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2201      	movs	r2, #1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e002      	b.n	80077c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2202      	movs	r2, #2
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fbb7 	bl	8007f42 <USBD_CtlSendData>
              break;
 80077d4:	e004      	b.n	80077e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fb41 	bl	8007e60 <USBD_CtlError>
              break;
 80077de:	bf00      	nop
          }
          break;
 80077e0:	e004      	b.n	80077ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fb3b 	bl	8007e60 <USBD_CtlError>
          break;
 80077ea:	bf00      	nop
      }
      break;
 80077ec:	e004      	b.n	80077f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb35 	bl	8007e60 <USBD_CtlError>
      break;
 80077f6:	bf00      	nop
  }

  return ret;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	885b      	ldrh	r3, [r3, #2]
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	2b06      	cmp	r3, #6
 8007826:	f200 8128 	bhi.w	8007a7a <USBD_GetDescriptor+0x276>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <USBD_GetDescriptor+0x2c>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	0800784d 	.word	0x0800784d
 8007834:	08007865 	.word	0x08007865
 8007838:	080078a5 	.word	0x080078a5
 800783c:	08007a7b 	.word	0x08007a7b
 8007840:	08007a7b 	.word	0x08007a7b
 8007844:	08007a1b 	.word	0x08007a1b
 8007848:	08007a47 	.word	0x08007a47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
      break;
 8007862:	e112      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7c1b      	ldrb	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10d      	bne.n	8007888 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f107 0208 	add.w	r2, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	2202      	movs	r2, #2
 8007884:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007886:	e100      	b.n	8007a8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	f107 0208 	add.w	r2, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3301      	adds	r3, #1
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
      break;
 80078a2:	e0f2      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	885b      	ldrh	r3, [r3, #2]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	f200 80ac 	bhi.w	8007a08 <USBD_GetDescriptor+0x204>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <USBD_GetDescriptor+0xb4>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078d1 	.word	0x080078d1
 80078bc:	08007905 	.word	0x08007905
 80078c0:	08007939 	.word	0x08007939
 80078c4:	0800796d 	.word	0x0800796d
 80078c8:	080079a1 	.word	0x080079a1
 80078cc:	080079d5 	.word	0x080079d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	7c12      	ldrb	r2, [r2, #16]
 80078e8:	f107 0108 	add.w	r1, r7, #8
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f2:	e091      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fab2 	bl	8007e60 <USBD_CtlError>
            err++;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	3301      	adds	r3, #1
 8007900:	72fb      	strb	r3, [r7, #11]
          break;
 8007902:	e089      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	7c12      	ldrb	r2, [r2, #16]
 800791c:	f107 0108 	add.w	r1, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007926:	e077      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa98 	bl	8007e60 <USBD_CtlError>
            err++;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	3301      	adds	r3, #1
 8007934:	72fb      	strb	r3, [r7, #11]
          break;
 8007936:	e06f      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795a:	e05d      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa7e 	bl	8007e60 <USBD_CtlError>
            err++;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	3301      	adds	r3, #1
 8007968:	72fb      	strb	r3, [r7, #11]
          break;
 800796a:	e055      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7c12      	ldrb	r2, [r2, #16]
 8007984:	f107 0108 	add.w	r1, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798e:	e043      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa64 	bl	8007e60 <USBD_CtlError>
            err++;
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	3301      	adds	r3, #1
 800799c:	72fb      	strb	r3, [r7, #11]
          break;
 800799e:	e03b      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c2:	e029      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa4a 	bl	8007e60 <USBD_CtlError>
            err++;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	3301      	adds	r3, #1
 80079d0:	72fb      	strb	r3, [r7, #11]
          break;
 80079d2:	e021      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7c12      	ldrb	r2, [r2, #16]
 80079ec:	f107 0108 	add.w	r1, r7, #8
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f6:	e00f      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa30 	bl	8007e60 <USBD_CtlError>
            err++;
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	3301      	adds	r3, #1
 8007a04:	72fb      	strb	r3, [r7, #11]
          break;
 8007a06:	e007      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa28 	bl	8007e60 <USBD_CtlError>
          err++;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	3301      	adds	r3, #1
 8007a14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a16:	bf00      	nop
      }
      break;
 8007a18:	e037      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2a:	f107 0208 	add.w	r2, r7, #8
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4798      	blx	r3
 8007a32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a34:	e029      	b.n	8007a8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fa11 	bl	8007e60 <USBD_CtlError>
        err++;
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	3301      	adds	r3, #1
 8007a42:	72fb      	strb	r3, [r7, #11]
      break;
 8007a44:	e021      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	7c1b      	ldrb	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10d      	bne.n	8007a6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	f107 0208 	add.w	r2, r7, #8
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4798      	blx	r3
 8007a5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	2207      	movs	r2, #7
 8007a66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a68:	e00f      	b.n	8007a8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9f7 	bl	8007e60 <USBD_CtlError>
        err++;
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	3301      	adds	r3, #1
 8007a76:	72fb      	strb	r3, [r7, #11]
      break;
 8007a78:	e007      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9ef 	bl	8007e60 <USBD_CtlError>
      err++;
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	3301      	adds	r3, #1
 8007a86:	72fb      	strb	r3, [r7, #11]
      break;
 8007a88:	bf00      	nop
  }

  if (err != 0U)
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d11e      	bne.n	8007ace <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d016      	beq.n	8007ac6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a98:	893b      	ldrh	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	88da      	ldrh	r2, [r3, #6]
 8007aa2:	893b      	ldrh	r3, [r7, #8]
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	bf28      	it	cs
 8007aa8:	4613      	movcs	r3, r2
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007aae:	893b      	ldrh	r3, [r7, #8]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	68f9      	ldr	r1, [r7, #12]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fa44 	bl	8007f42 <USBD_CtlSendData>
 8007aba:	e009      	b.n	8007ad0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9ce 	bl	8007e60 <USBD_CtlError>
 8007ac4:	e004      	b.n	8007ad0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa95 	bl	8007ff6 <USBD_CtlSendStatus>
 8007acc:	e000      	b.n	8007ad0 <USBD_GetDescriptor+0x2cc>
    return;
 8007ace:	bf00      	nop
  }
}
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	889b      	ldrh	r3, [r3, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d131      	bne.n	8007b4e <USBD_SetAddress+0x76>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	88db      	ldrh	r3, [r3, #6]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d12d      	bne.n	8007b4e <USBD_SetAddress+0x76>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	2b7f      	cmp	r3, #127	; 0x7f
 8007af8:	d829      	bhi.n	8007b4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d104      	bne.n	8007b1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9a3 	bl	8007e60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1a:	e01d      	b.n	8007b58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	7bfa      	ldrb	r2, [r7, #15]
 8007b20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fefb 	bl	8008924 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa61 	bl	8007ff6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b42:	e009      	b.n	8007b58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4c:	e004      	b.n	8007b58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f985 	bl	8007e60 <USBD_CtlError>
  }
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	885b      	ldrh	r3, [r3, #2]
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	4b4c      	ldr	r3, [pc, #304]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007b76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b78:	4b4b      	ldr	r3, [pc, #300]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d905      	bls.n	8007b8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f96c 	bl	8007e60 <USBD_CtlError>
    return USBD_FAIL;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e088      	b.n	8007c9e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d002      	beq.n	8007b9e <USBD_SetConfig+0x3e>
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d025      	beq.n	8007be8 <USBD_SetConfig+0x88>
 8007b9c:	e071      	b.n	8007c82 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b9e:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01c      	beq.n	8007be0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007ba6:	4b40      	ldr	r3, [pc, #256]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bb0:	4b3d      	ldr	r3, [pc, #244]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff f948 	bl	8006e4c <USBD_SetClassConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d004      	beq.n	8007bd0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f949 	bl	8007e60 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bce:	e065      	b.n	8007c9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fa10 	bl	8007ff6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2203      	movs	r2, #3
 8007bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bde:	e05d      	b.n	8007c9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa08 	bl	8007ff6 <USBD_CtlSendStatus>
      break;
 8007be6:	e059      	b.n	8007c9c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007be8:	4b2f      	ldr	r3, [pc, #188]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d112      	bne.n	8007c16 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bf8:	4b2b      	ldr	r3, [pc, #172]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c02:	4b29      	ldr	r3, [pc, #164]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff f93b 	bl	8006e84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f9f1 	bl	8007ff6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c14:	e042      	b.n	8007c9c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c16:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d02a      	beq.n	8007c7a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff f929 	bl	8006e84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c32:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff f902 	bl	8006e4c <USBD_SetClassConfig>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00f      	beq.n	8007c72 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f903 	bl	8007e60 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff f90e 	bl	8006e84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c70:	e014      	b.n	8007c9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9bf 	bl	8007ff6 <USBD_CtlSendStatus>
      break;
 8007c78:	e010      	b.n	8007c9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9bb 	bl	8007ff6 <USBD_CtlSendStatus>
      break;
 8007c80:	e00c      	b.n	8007c9c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f8eb 	bl	8007e60 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c8a:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <USBD_SetConfig+0x148>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff f8f7 	bl	8006e84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c96:	2303      	movs	r3, #3
 8007c98:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9a:	bf00      	nop
  }

  return ret;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000320 	.word	0x20000320

08007cac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	88db      	ldrh	r3, [r3, #6]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d004      	beq.n	8007cc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8cd 	bl	8007e60 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cc6:	e023      	b.n	8007d10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	dc02      	bgt.n	8007cda <USBD_GetConfig+0x2e>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dc03      	bgt.n	8007ce0 <USBD_GetConfig+0x34>
 8007cd8:	e015      	b.n	8007d06 <USBD_GetConfig+0x5a>
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d00b      	beq.n	8007cf6 <USBD_GetConfig+0x4a>
 8007cde:	e012      	b.n	8007d06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	2201      	movs	r2, #1
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f927 	bl	8007f42 <USBD_CtlSendData>
        break;
 8007cf4:	e00c      	b.n	8007d10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f91f 	bl	8007f42 <USBD_CtlSendData>
        break;
 8007d04:	e004      	b.n	8007d10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8a9 	bl	8007e60 <USBD_CtlError>
        break;
 8007d0e:	bf00      	nop
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d81e      	bhi.n	8007d6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	88db      	ldrh	r3, [r3, #6]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d004      	beq.n	8007d42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f890 	bl	8007e60 <USBD_CtlError>
        break;
 8007d40:	e01a      	b.n	8007d78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f043 0202 	orr.w	r2, r3, #2
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	330c      	adds	r3, #12
 8007d62:	2202      	movs	r2, #2
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f8eb 	bl	8007f42 <USBD_CtlSendData>
      break;
 8007d6c:	e004      	b.n	8007d78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f875 	bl	8007e60 <USBD_CtlError>
      break;
 8007d76:	bf00      	nop
  }
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	885b      	ldrh	r3, [r3, #2]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d106      	bne.n	8007da0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f92b 	bl	8007ff6 <USBD_CtlSendStatus>
  }
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d80b      	bhi.n	8007dd8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	885b      	ldrh	r3, [r3, #2]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d10c      	bne.n	8007de2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f910 	bl	8007ff6 <USBD_CtlSendStatus>
      }
      break;
 8007dd6:	e004      	b.n	8007de2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f840 	bl	8007e60 <USBD_CtlError>
      break;
 8007de0:	e000      	b.n	8007de4 <USBD_ClrFeature+0x3c>
      break;
 8007de2:	bf00      	nop
  }
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	781a      	ldrb	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3301      	adds	r3, #1
 8007e06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff fabb 	bl	8007392 <SWAPBYTE>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461a      	mov	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f7ff faae 	bl	8007392 <SWAPBYTE>
 8007e36:	4603      	mov	r3, r0
 8007e38:	461a      	mov	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff faa1 	bl	8007392 <SWAPBYTE>
 8007e50:	4603      	mov	r3, r0
 8007e52:	461a      	mov	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	80da      	strh	r2, [r3, #6]
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e6a:	2180      	movs	r1, #128	; 0x80
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fcef 	bl	8008850 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e72:	2100      	movs	r1, #0
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fceb 	bl	8008850 <USBD_LL_StallEP>
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b086      	sub	sp, #24
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d036      	beq.n	8007f06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e9c:	6938      	ldr	r0, [r7, #16]
 8007e9e:	f000 f836 	bl	8007f0e <USBD_GetLen>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	7812      	ldrb	r2, [r2, #0]
 8007eba:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	2203      	movs	r2, #3
 8007eca:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ed2:	e013      	b.n	8007efc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	4413      	add	r3, r2
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	7812      	ldrb	r2, [r2, #0]
 8007ede:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	613b      	str	r3, [r7, #16]
    idx++;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e7      	bne.n	8007ed4 <USBD_GetString+0x52>
 8007f04:	e000      	b.n	8007f08 <USBD_GetString+0x86>
    return;
 8007f06:	bf00      	nop
  }
}
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f1e:	e005      	b.n	8007f2c <USBD_GetLen+0x1e>
  {
    len++;
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	3301      	adds	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1f5      	bne.n	8007f20 <USBD_GetLen+0x12>
  }

  return len;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	2100      	movs	r1, #0
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 fcfa 	bl	8008962 <USBD_LL_Transmit>

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fce9 	bl	8008962 <USBD_LL_Transmit>

  return USBD_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2203      	movs	r2, #3
 8007faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 fced 	bl	80089a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fcdc 	bl	80089a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2204      	movs	r2, #4
 8008002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008006:	2300      	movs	r3, #0
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fca8 	bl	8008962 <USBD_LL_Transmit>

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2205      	movs	r2, #5
 8008028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800802c:	2300      	movs	r3, #0
 800802e:	2200      	movs	r2, #0
 8008030:	2100      	movs	r1, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fcb6 	bl	80089a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008048:	2200      	movs	r2, #0
 800804a:	4912      	ldr	r1, [pc, #72]	; (8008094 <MX_USB_DEVICE_Init+0x50>)
 800804c:	4812      	ldr	r0, [pc, #72]	; (8008098 <MX_USB_DEVICE_Init+0x54>)
 800804e:	f7fe fe8f 	bl	8006d70 <USBD_Init>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008058:	f7f8 fcb0 	bl	80009bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800805c:	490f      	ldr	r1, [pc, #60]	; (800809c <MX_USB_DEVICE_Init+0x58>)
 800805e:	480e      	ldr	r0, [pc, #56]	; (8008098 <MX_USB_DEVICE_Init+0x54>)
 8008060:	f7fe feb6 	bl	8006dd0 <USBD_RegisterClass>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800806a:	f7f8 fca7 	bl	80009bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800806e:	490c      	ldr	r1, [pc, #48]	; (80080a0 <MX_USB_DEVICE_Init+0x5c>)
 8008070:	4809      	ldr	r0, [pc, #36]	; (8008098 <MX_USB_DEVICE_Init+0x54>)
 8008072:	f7fe fdd7 	bl	8006c24 <USBD_CDC_RegisterInterface>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800807c:	f7f8 fc9e 	bl	80009bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008080:	4805      	ldr	r0, [pc, #20]	; (8008098 <MX_USB_DEVICE_Init+0x54>)
 8008082:	f7fe fecc 	bl	8006e1e <USBD_Start>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800808c:	f7f8 fc96 	bl	80009bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008090:	bf00      	nop
 8008092:	bd80      	pop	{r7, pc}
 8008094:	2000013c 	.word	0x2000013c
 8008098:	20000548 	.word	0x20000548
 800809c:	20000024 	.word	0x20000024
 80080a0:	20000128 	.word	0x20000128

080080a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080a8:	2200      	movs	r2, #0
 80080aa:	4905      	ldr	r1, [pc, #20]	; (80080c0 <CDC_Init_FS+0x1c>)
 80080ac:	4805      	ldr	r0, [pc, #20]	; (80080c4 <CDC_Init_FS+0x20>)
 80080ae:	f7fe fdce 	bl	8006c4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080b2:	4905      	ldr	r1, [pc, #20]	; (80080c8 <CDC_Init_FS+0x24>)
 80080b4:	4803      	ldr	r0, [pc, #12]	; (80080c4 <CDC_Init_FS+0x20>)
 80080b6:	f7fe fde8 	bl	8006c8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080bc:	4618      	mov	r0, r3
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20001018 	.word	0x20001018
 80080c4:	20000548 	.word	0x20000548
 80080c8:	20000818 	.word	0x20000818

080080cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	71fb      	strb	r3, [r7, #7]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	2b23      	cmp	r3, #35	; 0x23
 80080f0:	d84a      	bhi.n	8008188 <CDC_Control_FS+0xac>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <CDC_Control_FS+0x1c>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008189 	.word	0x08008189
 80080fc:	08008189 	.word	0x08008189
 8008100:	08008189 	.word	0x08008189
 8008104:	08008189 	.word	0x08008189
 8008108:	08008189 	.word	0x08008189
 800810c:	08008189 	.word	0x08008189
 8008110:	08008189 	.word	0x08008189
 8008114:	08008189 	.word	0x08008189
 8008118:	08008189 	.word	0x08008189
 800811c:	08008189 	.word	0x08008189
 8008120:	08008189 	.word	0x08008189
 8008124:	08008189 	.word	0x08008189
 8008128:	08008189 	.word	0x08008189
 800812c:	08008189 	.word	0x08008189
 8008130:	08008189 	.word	0x08008189
 8008134:	08008189 	.word	0x08008189
 8008138:	08008189 	.word	0x08008189
 800813c:	08008189 	.word	0x08008189
 8008140:	08008189 	.word	0x08008189
 8008144:	08008189 	.word	0x08008189
 8008148:	08008189 	.word	0x08008189
 800814c:	08008189 	.word	0x08008189
 8008150:	08008189 	.word	0x08008189
 8008154:	08008189 	.word	0x08008189
 8008158:	08008189 	.word	0x08008189
 800815c:	08008189 	.word	0x08008189
 8008160:	08008189 	.word	0x08008189
 8008164:	08008189 	.word	0x08008189
 8008168:	08008189 	.word	0x08008189
 800816c:	08008189 	.word	0x08008189
 8008170:	08008189 	.word	0x08008189
 8008174:	08008189 	.word	0x08008189
 8008178:	08008189 	.word	0x08008189
 800817c:	08008189 	.word	0x08008189
 8008180:	08008189 	.word	0x08008189
 8008184:	08008189 	.word	0x08008189
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008188:	bf00      	nop
  }

  return (USBD_OK);
 800818a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4805      	ldr	r0, [pc, #20]	; (80081bc <CDC_Receive_FS+0x24>)
 80081a6:	f7fe fd70 	bl	8006c8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081aa:	4804      	ldr	r0, [pc, #16]	; (80081bc <CDC_Receive_FS+0x24>)
 80081ac:	f7fe fdb6 	bl	8006d1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000548 	.word	0x20000548

080081c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <CDC_Transmit_FS+0x48>)
 80081d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e00b      	b.n	80081fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081e6:	887b      	ldrh	r3, [r7, #2]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	4806      	ldr	r0, [pc, #24]	; (8008208 <CDC_Transmit_FS+0x48>)
 80081ee:	f7fe fd2e 	bl	8006c4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081f2:	4805      	ldr	r0, [pc, #20]	; (8008208 <CDC_Transmit_FS+0x48>)
 80081f4:	f7fe fd62 	bl	8006cbc <USBD_CDC_TransmitPacket>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000548 	.word	0x20000548

0800820c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800821e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008222:	4618      	mov	r0, r3
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
	...

08008230 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2212      	movs	r2, #18
 8008240:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008242:	4b03      	ldr	r3, [pc, #12]	; (8008250 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	20000158 	.word	0x20000158

08008254 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2204      	movs	r2, #4
 8008264:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008266:	4b03      	ldr	r3, [pc, #12]	; (8008274 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	2000016c 	.word	0x2000016c

08008278 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	6039      	str	r1, [r7, #0]
 8008282:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d105      	bne.n	8008296 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	4907      	ldr	r1, [pc, #28]	; (80082ac <USBD_FS_ProductStrDescriptor+0x34>)
 800828e:	4808      	ldr	r0, [pc, #32]	; (80082b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008290:	f7ff fdf7 	bl	8007e82 <USBD_GetString>
 8008294:	e004      	b.n	80082a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	4904      	ldr	r1, [pc, #16]	; (80082ac <USBD_FS_ProductStrDescriptor+0x34>)
 800829a:	4805      	ldr	r0, [pc, #20]	; (80082b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800829c:	f7ff fdf1 	bl	8007e82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082a0:	4b02      	ldr	r3, [pc, #8]	; (80082ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20001818 	.word	0x20001818
 80082b0:	08008bec 	.word	0x08008bec

080082b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	6039      	str	r1, [r7, #0]
 80082be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	4904      	ldr	r1, [pc, #16]	; (80082d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082c4:	4804      	ldr	r0, [pc, #16]	; (80082d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082c6:	f7ff fddc 	bl	8007e82 <USBD_GetString>
  return USBD_StrDesc;
 80082ca:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20001818 	.word	0x20001818
 80082d8:	08008c04 	.word	0x08008c04

080082dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	6039      	str	r1, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	221a      	movs	r2, #26
 80082ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082ee:	f000 f843 	bl	8008378 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082f2:	4b02      	ldr	r3, [pc, #8]	; (80082fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000170 	.word	0x20000170

08008300 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d105      	bne.n	800831e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4907      	ldr	r1, [pc, #28]	; (8008334 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008316:	4808      	ldr	r0, [pc, #32]	; (8008338 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008318:	f7ff fdb3 	bl	8007e82 <USBD_GetString>
 800831c:	e004      	b.n	8008328 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	4904      	ldr	r1, [pc, #16]	; (8008334 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008322:	4805      	ldr	r0, [pc, #20]	; (8008338 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008324:	f7ff fdad 	bl	8007e82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008328:	4b02      	ldr	r3, [pc, #8]	; (8008334 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20001818 	.word	0x20001818
 8008338:	08008c18 	.word	0x08008c18

0800833c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	6039      	str	r1, [r7, #0]
 8008346:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d105      	bne.n	800835a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	4907      	ldr	r1, [pc, #28]	; (8008370 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008352:	4808      	ldr	r0, [pc, #32]	; (8008374 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008354:	f7ff fd95 	bl	8007e82 <USBD_GetString>
 8008358:	e004      	b.n	8008364 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	4904      	ldr	r1, [pc, #16]	; (8008370 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800835e:	4805      	ldr	r0, [pc, #20]	; (8008374 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008360:	f7ff fd8f 	bl	8007e82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008364:	4b02      	ldr	r3, [pc, #8]	; (8008370 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20001818 	.word	0x20001818
 8008374:	08008c24 	.word	0x08008c24

08008378 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800837e:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <Get_SerialNum+0x44>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008384:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <Get_SerialNum+0x48>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800838a:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <Get_SerialNum+0x4c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4413      	add	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d009      	beq.n	80083b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800839e:	2208      	movs	r2, #8
 80083a0:	4909      	ldr	r1, [pc, #36]	; (80083c8 <Get_SerialNum+0x50>)
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 f814 	bl	80083d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083a8:	2204      	movs	r2, #4
 80083aa:	4908      	ldr	r1, [pc, #32]	; (80083cc <Get_SerialNum+0x54>)
 80083ac:	68b8      	ldr	r0, [r7, #8]
 80083ae:	f000 f80f 	bl	80083d0 <IntToUnicode>
  }
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	1fff7a10 	.word	0x1fff7a10
 80083c0:	1fff7a14 	.word	0x1fff7a14
 80083c4:	1fff7a18 	.word	0x1fff7a18
 80083c8:	20000172 	.word	0x20000172
 80083cc:	20000182 	.word	0x20000182

080083d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083e2:	2300      	movs	r3, #0
 80083e4:	75fb      	strb	r3, [r7, #23]
 80083e6:	e027      	b.n	8008438 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	0f1b      	lsrs	r3, r3, #28
 80083ec:	2b09      	cmp	r3, #9
 80083ee:	d80b      	bhi.n	8008408 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	0f1b      	lsrs	r3, r3, #28
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4619      	mov	r1, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	440b      	add	r3, r1
 8008400:	3230      	adds	r2, #48	; 0x30
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e00a      	b.n	800841e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	0f1b      	lsrs	r3, r3, #28
 800840c:	b2da      	uxtb	r2, r3
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	4619      	mov	r1, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	440b      	add	r3, r1
 8008418:	3237      	adds	r2, #55	; 0x37
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	3301      	adds	r3, #1
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	4413      	add	r3, r2
 800842e:	2200      	movs	r2, #0
 8008430:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	3301      	adds	r3, #1
 8008436:	75fb      	strb	r3, [r7, #23]
 8008438:	7dfa      	ldrb	r2, [r7, #23]
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	429a      	cmp	r2, r3
 800843e:	d3d3      	bcc.n	80083e8 <IntToUnicode+0x18>
  }
}
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
	...

08008450 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008458:	f107 0314 	add.w	r3, r7, #20
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	605a      	str	r2, [r3, #4]
 8008462:	609a      	str	r2, [r3, #8]
 8008464:	60da      	str	r2, [r3, #12]
 8008466:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008470:	d147      	bne.n	8008502 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008472:	2300      	movs	r3, #0
 8008474:	613b      	str	r3, [r7, #16]
 8008476:	4b25      	ldr	r3, [pc, #148]	; (800850c <HAL_PCD_MspInit+0xbc>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	4a24      	ldr	r2, [pc, #144]	; (800850c <HAL_PCD_MspInit+0xbc>)
 800847c:	f043 0301 	orr.w	r3, r3, #1
 8008480:	6313      	str	r3, [r2, #48]	; 0x30
 8008482:	4b22      	ldr	r3, [pc, #136]	; (800850c <HAL_PCD_MspInit+0xbc>)
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800848e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008498:	2300      	movs	r3, #0
 800849a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800849c:	f107 0314 	add.w	r3, r7, #20
 80084a0:	4619      	mov	r1, r3
 80084a2:	481b      	ldr	r0, [pc, #108]	; (8008510 <HAL_PCD_MspInit+0xc0>)
 80084a4:	f7f9 fcf4 	bl	8001e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ae:	2302      	movs	r3, #2
 80084b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084b6:	2300      	movs	r3, #0
 80084b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084ba:	230a      	movs	r3, #10
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084be:	f107 0314 	add.w	r3, r7, #20
 80084c2:	4619      	mov	r1, r3
 80084c4:	4812      	ldr	r0, [pc, #72]	; (8008510 <HAL_PCD_MspInit+0xc0>)
 80084c6:	f7f9 fce3 	bl	8001e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084ca:	4b10      	ldr	r3, [pc, #64]	; (800850c <HAL_PCD_MspInit+0xbc>)
 80084cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ce:	4a0f      	ldr	r2, [pc, #60]	; (800850c <HAL_PCD_MspInit+0xbc>)
 80084d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d4:	6353      	str	r3, [r2, #52]	; 0x34
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <HAL_PCD_MspInit+0xbc>)
 80084dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084de:	4a0b      	ldr	r2, [pc, #44]	; (800850c <HAL_PCD_MspInit+0xbc>)
 80084e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084e4:	6453      	str	r3, [r2, #68]	; 0x44
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <HAL_PCD_MspInit+0xbc>)
 80084e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084f2:	2200      	movs	r2, #0
 80084f4:	2100      	movs	r1, #0
 80084f6:	2043      	movs	r0, #67	; 0x43
 80084f8:	f7f9 fc93 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084fc:	2043      	movs	r0, #67	; 0x43
 80084fe:	f7f9 fcac 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008502:	bf00      	nop
 8008504:	3728      	adds	r7, #40	; 0x28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	40023800 	.word	0x40023800
 8008510:	40020000 	.word	0x40020000

08008514 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008528:	4619      	mov	r1, r3
 800852a:	4610      	mov	r0, r2
 800852c:	f7fe fcc2 	bl	8006eb4 <USBD_LL_SetupStage>
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	4613      	mov	r3, r2
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	1a9b      	subs	r3, r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	440b      	add	r3, r1
 8008558:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	4619      	mov	r1, r3
 8008562:	f7fe fcfc 	bl	8006f5e <USBD_LL_DataOutStage>
}
 8008566:	bf00      	nop
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	4613      	mov	r3, r2
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	1a9b      	subs	r3, r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	440b      	add	r3, r1
 800858e:	3348      	adds	r3, #72	; 0x48
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	78fb      	ldrb	r3, [r7, #3]
 8008594:	4619      	mov	r1, r3
 8008596:	f7fe fd45 	bl	8007024 <USBD_LL_DataInStage>
}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe fe59 	bl	8007268 <USBD_LL_SOF>
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085c6:	2301      	movs	r3, #1
 80085c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
 80085d6:	e008      	b.n	80085ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d102      	bne.n	80085e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80085e0:	2301      	movs	r3, #1
 80085e2:	73fb      	strb	r3, [r7, #15]
 80085e4:	e001      	b.n	80085ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80085e6:	f7f8 f9e9 	bl	80009bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085f0:	7bfa      	ldrb	r2, [r7, #15]
 80085f2:	4611      	mov	r1, r2
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe fdf9 	bl	80071ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe fda5 	bl	8007150 <USBD_LL_Reset>
}
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe fdf4 	bl	800720c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <HAL_PCD_SuspendCallback+0x48>)
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	4a03      	ldr	r2, [pc, #12]	; (8008658 <HAL_PCD_SuspendCallback+0x48>)
 800864a:	f043 0306 	orr.w	r3, r3, #6
 800864e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	e000ed00 	.word	0xe000ed00

0800865c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fde4 	bl	8007238 <USBD_LL_Resume>
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800868a:	78fa      	ldrb	r2, [r7, #3]
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fe32 	bl	80072f8 <USBD_LL_IsoOUTIncomplete>
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fdfa 	bl	80072ac <USBD_LL_IsoINIncomplete>
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fe38 	bl	8007344 <USBD_LL_DevConnected>
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe fe35 	bl	800735a <USBD_LL_DevDisconnected>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d13c      	bne.n	8008782 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008708:	4a20      	ldr	r2, [pc, #128]	; (800878c <USBD_LL_Init+0x94>)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a1e      	ldr	r2, [pc, #120]	; (800878c <USBD_LL_Init+0x94>)
 8008714:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008718:	4b1c      	ldr	r3, [pc, #112]	; (800878c <USBD_LL_Init+0x94>)
 800871a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800871e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008720:	4b1a      	ldr	r3, [pc, #104]	; (800878c <USBD_LL_Init+0x94>)
 8008722:	2204      	movs	r2, #4
 8008724:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008726:	4b19      	ldr	r3, [pc, #100]	; (800878c <USBD_LL_Init+0x94>)
 8008728:	2202      	movs	r2, #2
 800872a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800872c:	4b17      	ldr	r3, [pc, #92]	; (800878c <USBD_LL_Init+0x94>)
 800872e:	2200      	movs	r2, #0
 8008730:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008732:	4b16      	ldr	r3, [pc, #88]	; (800878c <USBD_LL_Init+0x94>)
 8008734:	2202      	movs	r2, #2
 8008736:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008738:	4b14      	ldr	r3, [pc, #80]	; (800878c <USBD_LL_Init+0x94>)
 800873a:	2200      	movs	r2, #0
 800873c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800873e:	4b13      	ldr	r3, [pc, #76]	; (800878c <USBD_LL_Init+0x94>)
 8008740:	2200      	movs	r2, #0
 8008742:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008744:	4b11      	ldr	r3, [pc, #68]	; (800878c <USBD_LL_Init+0x94>)
 8008746:	2200      	movs	r2, #0
 8008748:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <USBD_LL_Init+0x94>)
 800874c:	2201      	movs	r2, #1
 800874e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008750:	4b0e      	ldr	r3, [pc, #56]	; (800878c <USBD_LL_Init+0x94>)
 8008752:	2200      	movs	r2, #0
 8008754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008756:	480d      	ldr	r0, [pc, #52]	; (800878c <USBD_LL_Init+0x94>)
 8008758:	f7fa fb34 	bl	8002dc4 <HAL_PCD_Init>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008762:	f7f8 f92b 	bl	80009bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008766:	2180      	movs	r1, #128	; 0x80
 8008768:	4808      	ldr	r0, [pc, #32]	; (800878c <USBD_LL_Init+0x94>)
 800876a:	f7fb fc92 	bl	8004092 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800876e:	2240      	movs	r2, #64	; 0x40
 8008770:	2100      	movs	r1, #0
 8008772:	4806      	ldr	r0, [pc, #24]	; (800878c <USBD_LL_Init+0x94>)
 8008774:	f7fb fc46 	bl	8004004 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008778:	2280      	movs	r2, #128	; 0x80
 800877a:	2101      	movs	r1, #1
 800877c:	4803      	ldr	r0, [pc, #12]	; (800878c <USBD_LL_Init+0x94>)
 800877e:	f7fb fc41 	bl	8004004 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20001a18 	.word	0x20001a18

08008790 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fa fc29 	bl	8002ffe <HAL_PCD_Start>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f942 	bl	8008a3c <USBD_Get_USB_Status>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	4608      	mov	r0, r1
 80087d0:	4611      	mov	r1, r2
 80087d2:	461a      	mov	r2, r3
 80087d4:	4603      	mov	r3, r0
 80087d6:	70fb      	strb	r3, [r7, #3]
 80087d8:	460b      	mov	r3, r1
 80087da:	70bb      	strb	r3, [r7, #2]
 80087dc:	4613      	mov	r3, r2
 80087de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087ee:	78bb      	ldrb	r3, [r7, #2]
 80087f0:	883a      	ldrh	r2, [r7, #0]
 80087f2:	78f9      	ldrb	r1, [r7, #3]
 80087f4:	f7fb f80d 	bl	8003812 <HAL_PCD_EP_Open>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 f91c 	bl	8008a3c <USBD_Get_USB_Status>
 8008804:	4603      	mov	r3, r0
 8008806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008808:	7bbb      	ldrb	r3, [r7, #14]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	4611      	mov	r1, r2
 8008830:	4618      	mov	r0, r3
 8008832:	f7fb f856 	bl	80038e2 <HAL_PCD_EP_Close>
 8008836:	4603      	mov	r3, r0
 8008838:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	4618      	mov	r0, r3
 800883e:	f000 f8fd 	bl	8008a3c <USBD_Get_USB_Status>
 8008842:	4603      	mov	r3, r0
 8008844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008846:	7bbb      	ldrb	r3, [r7, #14]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800886a:	78fa      	ldrb	r2, [r7, #3]
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f7fb f92e 	bl	8003ad0 <HAL_PCD_EP_SetStall>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 f8de 	bl	8008a3c <USBD_Get_USB_Status>
 8008880:	4603      	mov	r3, r0
 8008882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008884:	7bbb      	ldrb	r3, [r7, #14]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	4611      	mov	r1, r2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fb f973 	bl	8003b98 <HAL_PCD_EP_ClrStall>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 f8bf 	bl	8008a3c <USBD_Get_USB_Status>
 80088be:	4603      	mov	r3, r0
 80088c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	da0b      	bge.n	8008900 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	4613      	mov	r3, r2
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	440b      	add	r3, r1
 80088fa:	333e      	adds	r3, #62	; 0x3e
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	e00b      	b.n	8008918 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008906:	68f9      	ldr	r1, [r7, #12]
 8008908:	4613      	mov	r3, r2
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	440b      	add	r3, r1
 8008912:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008916:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f7fa ff40 	bl	80037c8 <HAL_PCD_SetAddress>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f874 	bl	8008a3c <USBD_Get_USB_Status>
 8008954:	4603      	mov	r3, r0
 8008956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008958:	7bbb      	ldrb	r3, [r7, #14]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b086      	sub	sp, #24
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	603b      	str	r3, [r7, #0]
 800896e:	460b      	mov	r3, r1
 8008970:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008980:	7af9      	ldrb	r1, [r7, #11]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	f7fb f859 	bl	8003a3c <HAL_PCD_EP_Transmit>
 800898a:	4603      	mov	r3, r0
 800898c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f853 	bl	8008a3c <USBD_Get_USB_Status>
 8008996:	4603      	mov	r3, r0
 8008998:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800899a:	7dbb      	ldrb	r3, [r7, #22]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	460b      	mov	r3, r1
 80089b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089c2:	7af9      	ldrb	r1, [r7, #11]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	f7fa ffd5 	bl	8003976 <HAL_PCD_EP_Receive>
 80089cc:	4603      	mov	r3, r0
 80089ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 f832 	bl	8008a3c <USBD_Get_USB_Status>
 80089d8:	4603      	mov	r3, r0
 80089da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fb f805 	bl	8003a0c <HAL_PCD_EP_GetRxCount>
 8008a02:	4603      	mov	r3, r0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a14:	4b03      	ldr	r3, [pc, #12]	; (8008a24 <USBD_static_malloc+0x18>)
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20000324 	.word	0x20000324

08008a28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]

}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d817      	bhi.n	8008a80 <USBD_Get_USB_Status+0x44>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <USBD_Get_USB_Status+0x1c>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008a69 	.word	0x08008a69
 8008a5c:	08008a6f 	.word	0x08008a6f
 8008a60:	08008a75 	.word	0x08008a75
 8008a64:	08008a7b 	.word	0x08008a7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a6c:	e00b      	b.n	8008a86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	73fb      	strb	r3, [r7, #15]
    break;
 8008a72:	e008      	b.n	8008a86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a74:	2301      	movs	r3, #1
 8008a76:	73fb      	strb	r3, [r7, #15]
    break;
 8008a78:	e005      	b.n	8008a86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7e:	e002      	b.n	8008a86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a80:	2303      	movs	r3, #3
 8008a82:	73fb      	strb	r3, [r7, #15]
    break;
 8008a84:	bf00      	nop
  }
  return usb_status;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <__cxa_pure_virtual>:
 8008a94:	b508      	push	{r3, lr}
 8008a96:	f000 f80d 	bl	8008ab4 <_ZSt9terminatev>

08008a9a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008a9a:	b508      	push	{r3, lr}
 8008a9c:	4780      	blx	r0
 8008a9e:	f000 f80e 	bl	8008abe <abort>
	...

08008aa4 <_ZSt13get_terminatev>:
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <_ZSt13get_terminatev+0xc>)
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	f3bf 8f5b 	dmb	ish
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	2000018c 	.word	0x2000018c

08008ab4 <_ZSt9terminatev>:
 8008ab4:	b508      	push	{r3, lr}
 8008ab6:	f7ff fff5 	bl	8008aa4 <_ZSt13get_terminatev>
 8008aba:	f7ff ffee 	bl	8008a9a <_ZN10__cxxabiv111__terminateEPFvvE>

08008abe <abort>:
 8008abe:	b508      	push	{r3, lr}
 8008ac0:	2006      	movs	r0, #6
 8008ac2:	f000 f86b 	bl	8008b9c <raise>
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	f7f8 fff4 	bl	8001ab4 <_exit>

08008acc <__errno>:
 8008acc:	4b01      	ldr	r3, [pc, #4]	; (8008ad4 <__errno+0x8>)
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000190 	.word	0x20000190

08008ad8 <__libc_init_array>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4d0d      	ldr	r5, [pc, #52]	; (8008b10 <__libc_init_array+0x38>)
 8008adc:	4c0d      	ldr	r4, [pc, #52]	; (8008b14 <__libc_init_array+0x3c>)
 8008ade:	1b64      	subs	r4, r4, r5
 8008ae0:	10a4      	asrs	r4, r4, #2
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	42a6      	cmp	r6, r4
 8008ae6:	d109      	bne.n	8008afc <__libc_init_array+0x24>
 8008ae8:	4d0b      	ldr	r5, [pc, #44]	; (8008b18 <__libc_init_array+0x40>)
 8008aea:	4c0c      	ldr	r4, [pc, #48]	; (8008b1c <__libc_init_array+0x44>)
 8008aec:	f000 f872 	bl	8008bd4 <_init>
 8008af0:	1b64      	subs	r4, r4, r5
 8008af2:	10a4      	asrs	r4, r4, #2
 8008af4:	2600      	movs	r6, #0
 8008af6:	42a6      	cmp	r6, r4
 8008af8:	d105      	bne.n	8008b06 <__libc_init_array+0x2e>
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b00:	4798      	blx	r3
 8008b02:	3601      	adds	r6, #1
 8008b04:	e7ee      	b.n	8008ae4 <__libc_init_array+0xc>
 8008b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0a:	4798      	blx	r3
 8008b0c:	3601      	adds	r6, #1
 8008b0e:	e7f2      	b.n	8008af6 <__libc_init_array+0x1e>
 8008b10:	08008c8c 	.word	0x08008c8c
 8008b14:	08008c8c 	.word	0x08008c8c
 8008b18:	08008c8c 	.word	0x08008c8c
 8008b1c:	08008c90 	.word	0x08008c90

08008b20 <memcpy>:
 8008b20:	440a      	add	r2, r1
 8008b22:	4291      	cmp	r1, r2
 8008b24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b28:	d100      	bne.n	8008b2c <memcpy+0xc>
 8008b2a:	4770      	bx	lr
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b36:	4291      	cmp	r1, r2
 8008b38:	d1f9      	bne.n	8008b2e <memcpy+0xe>
 8008b3a:	bd10      	pop	{r4, pc}

08008b3c <memset>:
 8008b3c:	4402      	add	r2, r0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d100      	bne.n	8008b46 <memset+0xa>
 8008b44:	4770      	bx	lr
 8008b46:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4a:	e7f9      	b.n	8008b40 <memset+0x4>

08008b4c <_raise_r>:
 8008b4c:	291f      	cmp	r1, #31
 8008b4e:	b538      	push	{r3, r4, r5, lr}
 8008b50:	4604      	mov	r4, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	d904      	bls.n	8008b60 <_raise_r+0x14>
 8008b56:	2316      	movs	r3, #22
 8008b58:	6003      	str	r3, [r0, #0]
 8008b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b62:	b112      	cbz	r2, 8008b6a <_raise_r+0x1e>
 8008b64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b68:	b94b      	cbnz	r3, 8008b7e <_raise_r+0x32>
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 f830 	bl	8008bd0 <_getpid_r>
 8008b70:	462a      	mov	r2, r5
 8008b72:	4601      	mov	r1, r0
 8008b74:	4620      	mov	r0, r4
 8008b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7a:	f000 b817 	b.w	8008bac <_kill_r>
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d00a      	beq.n	8008b98 <_raise_r+0x4c>
 8008b82:	1c59      	adds	r1, r3, #1
 8008b84:	d103      	bne.n	8008b8e <_raise_r+0x42>
 8008b86:	2316      	movs	r3, #22
 8008b88:	6003      	str	r3, [r0, #0]
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	e7e7      	b.n	8008b5e <_raise_r+0x12>
 8008b8e:	2400      	movs	r4, #0
 8008b90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b94:	4628      	mov	r0, r5
 8008b96:	4798      	blx	r3
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e7e0      	b.n	8008b5e <_raise_r+0x12>

08008b9c <raise>:
 8008b9c:	4b02      	ldr	r3, [pc, #8]	; (8008ba8 <raise+0xc>)
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	f7ff bfd3 	b.w	8008b4c <_raise_r>
 8008ba6:	bf00      	nop
 8008ba8:	20000190 	.word	0x20000190

08008bac <_kill_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d07      	ldr	r5, [pc, #28]	; (8008bcc <_kill_r+0x20>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	602b      	str	r3, [r5, #0]
 8008bba:	f7f8 ff6b 	bl	8001a94 <_kill>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	d102      	bne.n	8008bc8 <_kill_r+0x1c>
 8008bc2:	682b      	ldr	r3, [r5, #0]
 8008bc4:	b103      	cbz	r3, 8008bc8 <_kill_r+0x1c>
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	bd38      	pop	{r3, r4, r5, pc}
 8008bca:	bf00      	nop
 8008bcc:	20001e20 	.word	0x20001e20

08008bd0 <_getpid_r>:
 8008bd0:	f7f8 bf58 	b.w	8001a84 <_getpid>

08008bd4 <_init>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr

08008be0 <_fini>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr
