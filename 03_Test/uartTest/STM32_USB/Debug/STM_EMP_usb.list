
STM_EMP_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c8c  08008c8c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c94  08008c94  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e10  200001e8  08008e8c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ff8  08008e8c  00021ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e055  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042a6  00000000  00000000  0003e26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00042518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  00043948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d7d  00000000  00000000  00044c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001967d  00000000  00000000  0006c97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf6e2  00000000  00000000  00085ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001556dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005674  00000000  00000000  00155730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e8 	.word	0x200001e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bd8 	.word	0x08008bd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ec 	.word	0x200001ec
 80001c4:	08008bd8 	.word	0x08008bd8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
 * @retval int
 */

MP_ST_usb<packLinux2Ard, packArd2Linux, ArduinoMP_templateDefault()> MP_St;

int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f001 fb3d 	bl	8001b44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f827 	bl	800051c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 f959 	bl	8000784 <_ZL12MX_GPIO_Initv>
	MX_I2C1_Init();
 80004d2:	f000 f8b3 	bl	800063c <_ZL12MX_I2C1_Initv>
	MX_I2S3_Init();
 80004d6:	f000 f8e5 	bl	80006a4 <_ZL12MX_I2S3_Initv>
	MX_SPI1_Init();
 80004da:	f000 f917 	bl	800070c <_ZL12MX_SPI1_Initv>
	MX_USB_DEVICE_Init();
 80004de:	f007 fdb3 	bl	8008048 <MX_USB_DEVICE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */

	packArd2Linux pWrite { 100, "Hi sys" };
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <main+0x54>)
 80004e4:	f107 0318 	add.w	r3, r7, #24
 80004e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//HAL_Delay(4000);
	//  mpSerial.updateState(); //
	while (1) {
		//MP_St.getData_wait(&pRead);

		HAL_Delay(40);
 80004ee:	2028      	movs	r0, #40	; 0x28
 80004f0:	f001 fb9a 	bl	8001c28 <HAL_Delay>

		//pWrite.num = pRead.num * 2;
		pWrite.num++;
 80004f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	3301      	adds	r3, #1
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	b21b      	sxth	r3, r3
 8000500:	833b      	strh	r3, [r7, #24]
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
/// Data Send & Get
/*    On success return 0
 *    On fail return -1
 */

templatePar() int MP<templateParCall()>::packSend(pOut *pack) { return packSend(pack, sizeof(pOut)); }
 8000508:	220c      	movs	r2, #12
 800050a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <main+0x58>)
 800050e:	f000 fb21 	bl	8000b54 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8packSendEPS2_t>
		HAL_Delay(40);
 8000512:	e7ec      	b.n	80004ee <main+0x2e>
 8000514:	08008bf0 	.word	0x08008bf0
 8000518:	200002f8 	.word	0x200002f8

0800051c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b098      	sub	sp, #96	; 0x60
 8000520:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 fb08 	bl	8008b40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000530:	f107 031c 	add.w	r3, r7, #28
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <_Z18SystemClock_Configv+0x118>)
 8000554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000556:	4a37      	ldr	r2, [pc, #220]	; (8000634 <_Z18SystemClock_Configv+0x118>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	6413      	str	r3, [r2, #64]	; 0x40
 800055e:	4b35      	ldr	r3, [pc, #212]	; (8000634 <_Z18SystemClock_Configv+0x118>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b32      	ldr	r3, [pc, #200]	; (8000638 <_Z18SystemClock_Configv+0x11c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a31      	ldr	r2, [pc, #196]	; (8000638 <_Z18SystemClock_Configv+0x11c>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <_Z18SystemClock_Configv+0x11c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000586:	2301      	movs	r3, #1
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000594:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800059a:	2308      	movs	r3, #8
 800059c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 800059e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a8:	2307      	movs	r3, #7
 80005aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fd8d 	bl	80040d0 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf14      	ite	ne
 80005bc:	2301      	movne	r3, #1
 80005be:	2300      	moveq	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <_Z18SystemClock_Configv+0xae>
		Error_Handler();
 80005c6:	f000 f9db 	bl	8000980 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2105      	movs	r1, #5
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 ffe9 	bl	80045c0 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <_Z18SystemClock_Configv+0xe6>
		Error_Handler();
 80005fe:	f000 f9bf 	bl	8000980 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000602:	2301      	movs	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000606:	23c0      	movs	r3, #192	; 0xc0
 8000608:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4618      	mov	r0, r3
 8000614:	f004 f9bc 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf14      	ite	ne
 800061e:	2301      	movne	r3, #1
 8000620:	2300      	moveq	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <_Z18SystemClock_Configv+0x110>
		Error_Handler();
 8000628:	f000 f9aa 	bl	8000980 <Error_Handler>
	}
}
 800062c:	bf00      	nop
 800062e:	3760      	adds	r7, #96	; 0x60
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 8000642:	4a16      	ldr	r2, [pc, #88]	; (800069c <_ZL12MX_I2C1_Initv+0x60>)
 8000644:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 8000648:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <_ZL12MX_I2C1_Initv+0x64>)
 800064a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <_ZL12MX_I2C1_Initv+0x5c>)
 800067a:	f001 fdc1 	bl	8002200 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 800068e:	f000 f977 	bl	8000980 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000204 	.word	0x20000204
 800069c:	40005400 	.word	0x40005400
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <_ZL12MX_I2S3_Initv>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <_ZL12MX_I2S3_Initv+0x60>)
 80006ac:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b4:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006cc:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <_ZL12MX_I2S3_Initv+0x64>)
 80006ce:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <_ZL12MX_I2S3_Initv+0x5c>)
 80006e4:	f001 fed0 	bl	8002488 <HAL_I2S_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <_ZL12MX_I2S3_Initv+0x58>
		Error_Handler();
 80006f8:	f000 f942 	bl	8000980 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000258 	.word	0x20000258
 8000704:	40003c00 	.word	0x40003c00
 8000708:	00017700 	.word	0x00017700

0800070c <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000712:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <_ZL12MX_SPI1_Initv+0x74>)
 8000714:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 8000758:	220a      	movs	r2, #10
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <_ZL12MX_SPI1_Initv+0x70>)
 800075e:	f004 fa57 	bl	8004c10 <HAL_SPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf14      	ite	ne
 8000768:	2301      	movne	r3, #1
 800076a:	2300      	moveq	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 8000772:	f000 f905 	bl	8000980 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200002a0 	.word	0x200002a0
 8000780:	40013000 	.word	0x40013000

08000784 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b71      	ldr	r3, [pc, #452]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a70      	ldr	r2, [pc, #448]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b6e      	ldr	r3, [pc, #440]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b6a      	ldr	r3, [pc, #424]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a69      	ldr	r2, [pc, #420]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b67      	ldr	r3, [pc, #412]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b63      	ldr	r3, [pc, #396]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a62      	ldr	r2, [pc, #392]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b60      	ldr	r3, [pc, #384]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b5c      	ldr	r3, [pc, #368]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a5b      	ldr	r2, [pc, #364]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b59      	ldr	r3, [pc, #356]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b55      	ldr	r3, [pc, #340]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a54      	ldr	r2, [pc, #336]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b52      	ldr	r3, [pc, #328]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a4d      	ldr	r2, [pc, #308]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	4848      	ldr	r0, [pc, #288]	; (8000968 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000848:	f001 fcc0 	bl	80021cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	4846      	ldr	r0, [pc, #280]	; (800096c <_ZL12MX_GPIO_Initv+0x1e8>)
 8000852:	f001 fcbb 	bl	80021cc <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000856:	2200      	movs	r2, #0
 8000858:	f24f 0110 	movw	r1, #61456	; 0xf010
 800085c:	4844      	ldr	r0, [pc, #272]	; (8000970 <_ZL12MX_GPIO_Initv+0x1ec>)
 800085e:	f001 fcb5 	bl	80021cc <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000862:	2308      	movs	r3, #8
 8000864:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	483b      	ldr	r0, [pc, #236]	; (8000968 <_ZL12MX_GPIO_Initv+0x1e4>)
 800087a:	f001 fb0b 	bl	8001e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4835      	ldr	r0, [pc, #212]	; (800096c <_ZL12MX_GPIO_Initv+0x1e8>)
 8000896:	f001 fafd 	bl	8001e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089a:	2308      	movs	r3, #8
 800089c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	482d      	ldr	r0, [pc, #180]	; (800096c <_ZL12MX_GPIO_Initv+0x1e8>)
 80008b6:	f001 faed 	bl	8001e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <_ZL12MX_GPIO_Initv+0x1f0>)
 80008c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	482a      	ldr	r0, [pc, #168]	; (8000978 <_ZL12MX_GPIO_Initv+0x1f4>)
 80008ce:	f001 fae1 	bl	8001e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d2:	2304      	movs	r3, #4
 80008d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4825      	ldr	r0, [pc, #148]	; (800097c <_ZL12MX_GPIO_Initv+0x1f8>)
 80008e6:	f001 fad5 	bl	8001e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fc:	2305      	movs	r3, #5
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	481d      	ldr	r0, [pc, #116]	; (800097c <_ZL12MX_GPIO_Initv+0x1f8>)
 8000908:	f001 fac4 	bl	8001e94 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800090c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000910:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <_ZL12MX_GPIO_Initv+0x1ec>)
 8000926:	f001 fab5 	bl	8001e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800092a:	2320      	movs	r3, #32
 800092c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <_ZL12MX_GPIO_Initv+0x1ec>)
 800093e:	f001 faa9 	bl	8001e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000948:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000956:	f001 fa9d 	bl	8001e94 <HAL_GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	; 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40021000 	.word	0x40021000
 800096c:	40020800 	.word	0x40020800
 8000970:	40020c00 	.word	0x40020c00
 8000974:	10120000 	.word	0x10120000
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400

08000980 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev>:

templatePar() MP_ST_usb<templateParCall()> * MP_ST_usb<templateParCall()>::instance = nullptr;	//Istanza statica dinamica in base alla classe compilata


templatePar()
MP_ST_usb<templateParCall()>::MP_ST_usb() :
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
		MP<templateParCall()>() {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f828 	bl	80009ec <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev>
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev+0x4c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f503 739b 	add.w	r3, r3, #310	; 0x136
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f83d 	bl	8000a28 <_ZN14CircularBufferIhLt184EEC1Ev>
	byteSend.memClean();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f503 739b 	add.w	r3, r3, #310	; 0x136
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f84b 	bl	8000a50 <_ZN14CircularBufferIhLt184EE8memCleanEv>
	instance = this;
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev+0x50>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6013      	str	r3, [r2, #0]
	USBD_Interface_fops_FS.Receive = MP_ST_usb<templateParCall()>::isrRead;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev+0x54>)
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev+0x58>)
 80009c4:	60da      	str	r2, [r3, #12]
	USBD_Interface_fops_FS.TransmitCplt =
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev+0x54>)
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev+0x5c>)
 80009ca:	611a      	str	r2, [r3, #16]
			MP_ST_usb<templateParCall()>::isrSendNotify;
}
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	08008c4c 	.word	0x08008c4c
 80009dc:	200004f0 	.word	0x200004f0
 80009e0:	2000011c 	.word	0x2000011c
 80009e4:	08000a89 	.word	0x08000a89
 80009e8:	08000acd 	.word	0x08000acd

080009ec <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev>:
templatePar() MP<templateParCall()>::MP() { bufClear(); }
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev+0x38>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	809a      	strh	r2, [r3, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3306      	adds	r3, #6
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f80f 	bl	8000a28 <_ZN14CircularBufferIhLt184EEC1Ev>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	33c4      	adds	r3, #196	; 0xc4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f952 	bl	8000cb8 <_ZN14CircularBufferI14_packLinux2ArdLt4EEC1Ev>
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f963 	bl	8000ce0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8bufClearEv>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08008c64 	.word	0x08008c64

08000a28 <_ZN14CircularBufferIhLt184EEC1Ev>:
  // Operation to progress the tail, return tail after increase, "errorRet" if tail jump over the head
  uint16_t tailInc();
  uint16_t tailAdd(uint16_t len);
};

template <class T, uint16_t nElem> CircularBuffer<T, nElem>::CircularBuffer() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  this->head_ = 0;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
  this->tail_ = 0;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  memClean();
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f805 	bl	8000a50 <_ZN14CircularBufferIhLt184EE8memCleanEv>
}
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZN14CircularBufferIhLt184EE8memCleanEv>:

template <class T, uint16_t nElem> void CircularBuffer<T, nElem>::memClean() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  for (uint16_t i = 0; i < real_nElem; i++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	81fb      	strh	r3, [r7, #14]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	2bb8      	cmp	r3, #184	; 0xb8
 8000a60:	d80b      	bhi.n	8000a7a <_ZN14CircularBufferIhLt184EE8memCleanEv+0x2a>
    memset(&this->buf_[i], 0, sizeof(T));
 8000a62:	89fb      	ldrh	r3, [r7, #14]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 f867 	bl	8008b40 <memset>
  for (uint16_t i = 0; i < real_nElem; i++)
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	3301      	adds	r3, #1
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	e7f0      	b.n	8000a5c <_ZN14CircularBufferIhLt184EE8memCleanEv+0xc>
  reset();
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 f945 	bl	8000d0a <_ZN14CircularBufferIhLt184EE5resetEv>
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE7isrReadEPhPm>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
templatePar()int8_t MP_ST_usb<templateParCall()>::isrRead(uint8_t *Buf,
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
		uint32_t *Len) {
	MP_ST_usb<templateParCall()> *inst = MP_ST_usb<templateParCall()>::instance;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE7isrReadEPhPm+0x3c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	60fb      	str	r3, [r7, #12]
	inst->byteRecive.putArray(Buf, *Len);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	1d98      	adds	r0, r3, #6
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	f000 f940 	bl	8000d2a <_ZN14CircularBufferIhLt184EE8putArrayEPht>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE7isrReadEPhPm+0x40>)
 8000aac:	f006 f938 	bl	8006d20 <USBD_CDC_ReceivePacket>
	inst->byteParsing();
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f94b 	bl	8000d4e <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv>
	return USBD_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200004f0 	.word	0x200004f0
 8000ac8:	2000071c 	.word	0x2000071c

08000acc <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE13isrSendNotifyEPhPmh>:
templatePar()int8_t MP_ST_usb<templateParCall()>::isrSendNotify(uint8_t *Buf,
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	71fb      	strb	r3, [r7, #7]
	MP_ST_usb<templateParCall()> *inst = MP_ST_usb<templateParCall()>::instance;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE13isrSendNotifyEPhPmh+0x84>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	617b      	str	r3, [r7, #20]
	if (inst->byteSend.usedSpace()) {
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f503 739b 	add.w	r3, r3, #310	; 0x136
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f9ea 	bl	8000ec0 <_ZNK14CircularBufferIhLt184EE9usedSpaceEv>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d023      	beq.n	8000b44 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE13isrSendNotifyEPhPmh+0x78>
		len = inst->byteSend.usedSpaceLinear();
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	f503 739b 	add.w	r3, r3, #310	; 0x136
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fa0c 	bl	8000f20 <_ZNK14CircularBufferIhLt184EE15usedSpaceLinearEv>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	827b      	strh	r3, [r7, #18]
		if (CDC_Transmit_FS(inst->byteSend.getTailPtr(), len) == 0) {
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f503 739b 	add.w	r3, r3, #310	; 0x136
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fa25 	bl	8000f62 <_ZN14CircularBufferIhLt184EE10getTailPtrEv>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	8a7b      	ldrh	r3, [r7, #18]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4610      	mov	r0, r2
 8000b20:	f007 fb50 	bl	80081c4 <CDC_Transmit_FS>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf0c      	ite	eq
 8000b2a:	2301      	moveq	r3, #1
 8000b2c:	2300      	movne	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d007      	beq.n	8000b44 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE13isrSendNotifyEPhPmh+0x78>
			inst->byteSend.tailAdd(len);
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f503 739b 	add.w	r3, r3, #310	; 0x136
 8000b3a:	8a7a      	ldrh	r2, [r7, #18]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fa20 	bl	8000f84 <_ZN14CircularBufferIhLt184EE7tailAddEt>
	return USBD_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200004f0 	.word	0x200004f0

08000b54 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8packSendEPS2_t>:

templatePar() int MP<templateParCall()>::packSend(pOut *pack, uint16_t bSize) {
 8000b54:	b5b0      	push	{r4, r5, r7, lr}
 8000b56:	b092      	sub	sp, #72	; 0x48
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	80fb      	strh	r3, [r7, #6]
    return -1;
  if ((ret = packSend_Concrete(sendBuf, sendSize)) != 0)
    return ret;
  if ((ret = packSend_Concrete(0)) != 0)
    return ret;
  return 0;
 8000b62:	466b      	mov	r3, sp
 8000b64:	461d      	mov	r5, r3
  int ret = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  uint16_t packSize = bSize + CRC8_enable();
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint8_t packBuf[packSize]; // CRC8 may add 1 byte
 8000b70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b72:	1e5c      	subs	r4, r3, #1
 8000b74:	63fc      	str	r4, [r7, #60]	; 0x3c
 8000b76:	4623      	mov	r3, r4
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f04f 0100 	mov.w	r1, #0
 8000b80:	f04f 0200 	mov.w	r2, #0
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	00cb      	lsls	r3, r1, #3
 8000b8a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b8e:	00c2      	lsls	r2, r0, #3
 8000b90:	4623      	mov	r3, r4
 8000b92:	3301      	adds	r3, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f04f 0100 	mov.w	r1, #0
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	00cb      	lsls	r3, r1, #3
 8000ba4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ba8:	00c2      	lsls	r2, r0, #3
 8000baa:	4623      	mov	r3, r4
 8000bac:	3301      	adds	r3, #1
 8000bae:	3307      	adds	r3, #7
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	ebad 0d03 	sub.w	sp, sp, r3
 8000bb8:	ab02      	add	r3, sp, #8
 8000bba:	3300      	adds	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  memcpy(packBuf, pack, bSize);
 8000bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 ffad 	bl	8008b24 <memcpy>
    packBuf[packSize - 1] = crc8_stream((uint8_t *)pack, bSize);
 8000bca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000bcc:	1e5c      	subs	r4, r3, #1
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	68b8      	ldr	r0, [r7, #8]
 8000bd4:	f005 fd86 	bl	80066e4 <_Z11crc8_streamPht>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bde:	551a      	strb	r2, [r3, r4]
  uint16_t sendSize = packSize + 1; // Cobs add 1 byte
 8000be0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000be2:	3301      	adds	r3, #1
 8000be4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint8_t sendBuf[sendSize];
 8000be6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000be8:	1e5c      	subs	r4, r3, #1
 8000bea:	62bc      	str	r4, [r7, #40]	; 0x28
 8000bec:	4623      	mov	r3, r4
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f04f 0100 	mov.w	r1, #0
 8000bf6:	f04f 0200 	mov.w	r2, #0
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	00cb      	lsls	r3, r1, #3
 8000c00:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c04:	00c2      	lsls	r2, r0, #3
 8000c06:	4623      	mov	r3, r4
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f04f 0100 	mov.w	r1, #0
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	00cb      	lsls	r3, r1, #3
 8000c1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c1e:	00c2      	lsls	r2, r0, #3
 8000c20:	4623      	mov	r3, r4
 8000c22:	3301      	adds	r3, #1
 8000c24:	3307      	adds	r3, #7
 8000c26:	08db      	lsrs	r3, r3, #3
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c2e:	ab02      	add	r3, sp, #8
 8000c30:	3300      	adds	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  cobs_encode_result res = cobs_encode(sendBuf, sendSize, packBuf, packSize);
 8000c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c38:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8000c3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000c3c:	f107 0018 	add.w	r0, r7, #24
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	4623      	mov	r3, r4
 8000c44:	f005 fb92 	bl	800636c <cobs_encode>
  if (res.status != COBS_ENCODE_OK)
 8000c48:	7f3b      	ldrb	r3, [r7, #28]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8packSendEPS2_t+0x100>
    return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c52:	e02c      	b.n	8000cae <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8packSendEPS2_t+0x15a>
  if ((ret = packSend_Concrete(sendBuf, sendSize)) != 0)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	4798      	blx	r3
 8000c64:	6378      	str	r0, [r7, #52]	; 0x34
 8000c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf14      	ite	ne
 8000c6c:	2301      	movne	r3, #1
 8000c6e:	2300      	moveq	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8packSendEPS2_t+0x126>
    return ret;
 8000c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c78:	e019      	b.n	8000cae <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8packSendEPS2_t+0x15a>
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	623b      	str	r3, [r7, #32]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	75fb      	strb	r3, [r7, #23]
  // If data are dataAvailable
  memcpy(pack, packRecive.getPtr(), sizeof(pIn));
  return dataAvailable();
}

templatePar() int MP<templateParCall()>::packSend_Concrete(uint8_t byteSend) { return packSend_Concrete(&byteSend, 1); }
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3304      	adds	r3, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f107 0117 	add.w	r1, r7, #23
 8000c8e:	2201      	movs	r2, #1
 8000c90:	6a38      	ldr	r0, [r7, #32]
 8000c92:	4798      	blx	r3
 8000c94:	4603      	mov	r3, r0
  if ((ret = packSend_Concrete(0)) != 0)
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8packSendEPS2_t+0x158>
    return ret;
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	e000      	b.n	8000cae <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8packSendEPS2_t+0x15a>
  return 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	46ad      	mov	sp, r5
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3740      	adds	r7, #64	; 0x40
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}

08000cb8 <_ZN14CircularBufferI14_packLinux2ArdLt4EEC1Ev>:
template <class T, uint16_t nElem> CircularBuffer<T, nElem>::CircularBuffer() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  this->head_ = 0;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  this->tail_ = 0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  memClean();
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f98b 	bl	8000fec <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>
}
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE8bufClearEv>:
templatePar() void MP<templateParCall()>::bufClear() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  byteRecive.memClean();
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3306      	adds	r3, #6
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff feaf 	bl	8000a50 <_ZN14CircularBufferIhLt184EE8memCleanEv>
  packRecive.memClean();
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	33c4      	adds	r3, #196	; 0xc4
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f978 	bl	8000fec <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>
  lastStartIndex = 0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	809a      	strh	r2, [r3, #4]
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_ZN14CircularBufferIhLt184EE5resetEv>:

template <class T, uint16_t nElem> inline void CircularBuffer<T, nElem>::reset() { head_ = tail_; }
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_ZN14CircularBufferIhLt184EE8putArrayEPht>:
    return -2;
  memcpy((void *)&buf_[head_], item, bSize);
  return headInc(); // old head
}

template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::putArray(T *item, uint16_t nItem) {
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	4613      	mov	r3, r2
 8000d36:	80fb      	strh	r3, [r7, #6]

	return putArray(item, nItem, sizeof(T));
 8000d38:	88fa      	ldrh	r2, [r7, #6]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f000 f973 	bl	800102a <_ZN14CircularBufferIhLt184EE8putArrayEPhtt>
 8000d44:	4603      	mov	r3, r0
    memcpy((void *)&buf_[head_], &item[linLen+1], (nItem - linLen) * sizeof(T));
    headAdd(nItem - linLen);
  }

  return ret;
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv>:

/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// Byte parsing using CRC8 and COBS to
templatePar() uint16_t MP<templateParCall()>::byteParsing() {
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b092      	sub	sp, #72	; 0x48
 8000d52:	af02      	add	r7, sp, #8
 8000d54:	6078      	str	r0, [r7, #4]
  uint8_t dato;
  uint16_t datoId;
  uint16_t packFound = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	87fb      	strh	r3, [r7, #62]	; 0x3e
  while (!byteRecive.isEmpty()) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3306      	adds	r3, #6
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9ee 	bl	8001140 <_ZNK14CircularBufferIhLt184EE7isEmptyEv>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f083 0301 	eor.w	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 80a1 	beq.w	8000eb4 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x166>
 8000d72:	466b      	mov	r3, sp
 8000d74:	461d      	mov	r5, r3
    // Get the byte and his position (if is a 0, need to be saved)
    dato = byteRecive.get(&datoId);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3306      	adds	r3, #6
 8000d7a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f9f2 	bl	800116a <_ZN14CircularBufferIhLt184EE3getEPt>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if (dato != 0)
 8000d8c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f040 8088 	bne.w	8000ea6 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x158>
      continue;

    /// ########################## COBS DECODE ##########################
    // NB:COBS protocol add 1 byte at the pack, At the start
    uint16_t COBSsrcSize = byteRecive.countSlotBetween(lastStartIndex, datoId);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	1d98      	adds	r0, r3, #6
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	889b      	ldrh	r3, [r3, #4]
 8000d9e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000da0:	4619      	mov	r1, r3
 8000da2:	f000 f9f7 	bl	8001194 <_ZNK14CircularBufferIhLt184EE16countSlotBetweenEtt>
 8000da6:	4603      	mov	r3, r0
 8000da8:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (COBSsrcSize - 1 > MAXPackINsize || COBSsrcSize < 2) {
 8000daa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000dac:	3b01      	subs	r3, #1
 8000dae:	2b17      	cmp	r3, #23
 8000db0:	d802      	bhi.n	8000db8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x6a>
 8000db2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d805      	bhi.n	8000dc4 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x76>
      // Someting wrong, no 0 was recived in time, or too many zero are received
      // Anyway the pack are lost
      lastStartIndex = datoId + 1; // restart the logic from the next byte
 8000db8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	809a      	strh	r2, [r3, #4]
      continue;
 8000dc2:	e075      	b.n	8000eb0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x162>
    }
    // Fill the buffer for the decoding
    uint8_t COBSEncoded[COBSsrcSize];
 8000dc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000dc6:	1e5c      	subs	r4, r3, #1
 8000dc8:	637c      	str	r4, [r7, #52]	; 0x34
 8000dca:	4623      	mov	r3, r4
 8000dcc:	3301      	adds	r3, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f04f 0100 	mov.w	r1, #0
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	00cb      	lsls	r3, r1, #3
 8000dde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000de2:	00c2      	lsls	r2, r0, #3
 8000de4:	4623      	mov	r3, r4
 8000de6:	3301      	adds	r3, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f04f 0100 	mov.w	r1, #0
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	00cb      	lsls	r3, r1, #3
 8000df8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000dfc:	00c2      	lsls	r2, r0, #3
 8000dfe:	4623      	mov	r3, r4
 8000e00:	3301      	adds	r3, #1
 8000e02:	3307      	adds	r3, #7
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	ebad 0d03 	sub.w	sp, sp, r3
 8000e0c:	ab02      	add	r3, sp, #8
 8000e0e:	3300      	adds	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
    byteRecive.memcpyCb(COBSEncoded, lastStartIndex, COBSsrcSize);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	1d98      	adds	r0, r3, #6
 8000e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	889a      	ldrh	r2, [r3, #4]
 8000e1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e1e:	f000 f9d9 	bl	80011d4 <_ZN14CircularBufferIhLt184EE8memcpyCbEPhtt>
    uint8_t COBSDecode[MAXPackINsize];

    cobs_decode_result res = cobs_decode(COBSDecode, MAXPackINsize, COBSEncoded, COBSsrcSize);
 8000e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e26:	f107 000c 	add.w	r0, r7, #12
 8000e2a:	f107 0114 	add.w	r1, r7, #20
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	4613      	mov	r3, r2
 8000e32:	2217      	movs	r2, #23
 8000e34:	f005 fb32 	bl	800649c <cobs_decode>
    lastStartIndex = datoId + 1; // From now, in any case, datoId are the new lastStartIndex
 8000e38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	809a      	strh	r2, [r3, #4]

    if (res.status != COBS_DECODE_OK) {
 8000e42:	7c3b      	ldrb	r3, [r7, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d130      	bne.n	8000eaa <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x15c>
      continue;
    }
    /// ######################## CRC8 VALIDATION ########################
    if (CRC8_enable()) {
      uint8_t calcCRC = crc8_stream(COBSDecode, res.out_len - 1); // Last byte are the CRC
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f005 fc44 	bl	80066e4 <_Z11crc8_streamPht>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (calcCRC != COBSDecode[res.out_len - 1])
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000e70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d11a      	bne.n	8000eae <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x160>
        continue; // CRC8 Fail!!!
    }
    packRecive.put((pIn *)COBSDecode, res.out_len - 1);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	3b01      	subs	r3, #1
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f000 f9d4 	bl	8001238 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t>
    packTimeRefresh(); // from now, the pack are available to the system
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3308      	adds	r3, #8
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	4798      	blx	r3
    packFound++;
 8000e9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000ea2:	46ad      	mov	sp, r5
 8000ea4:	e759      	b.n	8000d5a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0xc>
      continue;
 8000ea6:	bf00      	nop
 8000ea8:	e002      	b.n	8000eb0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x162>
      continue;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0x162>
        continue; // CRC8 Fail!!!
 8000eae:	bf00      	nop
 8000eb0:	46ad      	mov	sp, r5
  while (!byteRecive.isEmpty()) {
 8000eb2:	e752      	b.n	8000d5a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11byteParsingEv+0xc>
  } //  while (!byteRecive->isEmpty())
  return packFound;
 8000eb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3740      	adds	r7, #64	; 0x40
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ec0 <_ZNK14CircularBufferIhLt184EE9usedSpaceEv>:
template <class T, uint16_t nElem>
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
}

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpace() const {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  // This 2 block are only to speed-up, formula always function
  if (isFull())
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f9e1 	bl	8001290 <_ZNK14CircularBufferIhLt184EE6isFullEv>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <_ZNK14CircularBufferIhLt184EE9usedSpaceEv+0x18>
    return nElem;
 8000ed4:	23b8      	movs	r3, #184	; 0xb8
 8000ed6:	e01c      	b.n	8000f12 <_ZNK14CircularBufferIhLt184EE9usedSpaceEv+0x52>
  if (isEmpty())
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f931 	bl	8001140 <_ZNK14CircularBufferIhLt184EE7isEmptyEv>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <_ZNK14CircularBufferIhLt184EE9usedSpaceEv+0x28>
    return 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e014      	b.n	8000f12 <_ZNK14CircularBufferIhLt184EE9usedSpaceEv+0x52>

  return modSub(head_, tail_, real_nElem); // One Free Slot Logic
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	33b9      	adds	r3, #185	; 0xb9
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <_ZNK14CircularBufferIhLt184EE9usedSpaceEv+0x5c>)
 8000efc:	fb82 1203 	smull	r1, r2, r2, r3
 8000f00:	441a      	add	r2, r3
 8000f02:	11d1      	asrs	r1, r2, #7
 8000f04:	17da      	asrs	r2, r3, #31
 8000f06:	1a8a      	subs	r2, r1, r2
 8000f08:	21b9      	movs	r1, #185	; 0xb9
 8000f0a:	fb01 f202 	mul.w	r2, r1, r2
 8000f0e:	1a9a      	subs	r2, r3, r2
 8000f10:	b293      	uxth	r3, r2
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	b11fd3b9 	.word	0xb11fd3b9

08000f20 <_ZNK14CircularBufferIhLt184EE15usedSpaceLinearEv>:

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpaceLinear() const {
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if (head_ < tail_) // the end of the buffer are reach before the end of buffered array
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d206      	bcs.n	8000f46 <_ZNK14CircularBufferIhLt184EE15usedSpaceLinearEv+0x26>
    return real_nElem - tail_ + 1;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8000f3e:	f1c3 03ba 	rsb	r3, r3, #186	; 0xba
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	e007      	b.n	8000f56 <_ZNK14CircularBufferIhLt184EE15usedSpaceLinearEv+0x36>
  else
    return head_ - tail_; // include empty case
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b29b      	uxth	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_ZN14CircularBufferIhLt184EE10getTailPtrEv>:
template <class T, uint16_t nElem> inline T *CircularBuffer<T, nElem>::getTailPtr() { return &buf_[tail_]; }
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_ZN14CircularBufferIhLt184EE7tailAddEt>:
  return oldHead; // old head
}

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailAdd(uint16_t len) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  if (usedSpace() < len)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff95 	bl	8000ec0 <_ZNK14CircularBufferIhLt184EE9usedSpaceEv>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	bf8c      	ite	hi
 8000fa0:	2301      	movhi	r3, #1
 8000fa2:	2300      	movls	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <_ZN14CircularBufferIhLt184EE7tailAddEt+0x2c>
    return -1;
 8000faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fae:	e017      	b.n	8000fe0 <_ZN14CircularBufferIhLt184EE7tailAddEt+0x5c>
  tail_ = (tail_ + len) % real_nElem;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <_ZN14CircularBufferIhLt184EE7tailAddEt+0x64>)
 8000fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc2:	441a      	add	r2, r3
 8000fc4:	11d1      	asrs	r1, r2, #7
 8000fc6:	17da      	asrs	r2, r3, #31
 8000fc8:	1a8a      	subs	r2, r1, r2
 8000fca:	21b9      	movs	r1, #185	; 0xb9
 8000fcc:	fb01 f202 	mul.w	r2, r1, r2
 8000fd0:	1a9a      	subs	r2, r3, r2
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  return tail_;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	b11fd3b9 	.word	0xb11fd3b9

08000fec <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>:
template <class T, uint16_t nElem> void CircularBuffer<T, nElem>::memClean() {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  for (uint16_t i = 0; i < real_nElem; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	81fb      	strh	r3, [r7, #14]
 8000ff8:	89fb      	ldrh	r3, [r7, #14]
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d80e      	bhi.n	800101c <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv+0x30>
    memset(&this->buf_[i], 0, sizeof(T));
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
 8001000:	2216      	movs	r2, #22
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	2216      	movs	r2, #22
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f007 fd96 	bl	8008b40 <memset>
  for (uint16_t i = 0; i < real_nElem; i++)
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	3301      	adds	r3, #1
 8001018:	81fb      	strh	r3, [r7, #14]
 800101a:	e7ed      	b.n	8000ff8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv+0xc>
  reset();
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f95b 	bl	80012d8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE5resetEv>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZN14CircularBufferIhLt184EE8putArrayEPhtt>:
uint16_t CircularBuffer<T, nElem>::putArray(T *item, uint16_t nItem, uint16_t bSize) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	4611      	mov	r1, r2
 8001036:	461a      	mov	r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	80fb      	strh	r3, [r7, #6]
 800103c:	4613      	mov	r3, r2
 800103e:	80bb      	strh	r3, [r7, #4]
  if (availableSpace() < nItem)
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 f837 	bl	80010b4 <_ZNK14CircularBufferIhLt184EE14availableSpaceEv>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	4293      	cmp	r3, r2
 800104e:	bf8c      	ite	hi
 8001050:	2301      	movhi	r3, #1
 8001052:	2300      	movls	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <_ZN14CircularBufferIhLt184EE8putArrayEPhtt+0x36>
    return -1;
 800105a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800105e:	e025      	b.n	80010ac <_ZN14CircularBufferIhLt184EE8putArrayEPhtt+0x82>
  if (bSize > sizeof(T))
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d902      	bls.n	800106c <_ZN14CircularBufferIhLt184EE8putArrayEPhtt+0x42>
    return -2;
 8001066:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800106a:	e01f      	b.n	80010ac <_ZN14CircularBufferIhLt184EE8putArrayEPhtt+0x82>
  int ret = head_; // old head
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8001072:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < nItem; i++) {
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	da13      	bge.n	80010a8 <_ZN14CircularBufferIhLt184EE8putArrayEPhtt+0x7e>
    memcpy((void *)&buf_[head_], &item[i], bSize);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	1898      	adds	r0, r3, r2
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4413      	add	r3, r2
 8001092:	88ba      	ldrh	r2, [r7, #4]
 8001094:	4619      	mov	r1, r3
 8001096:	f007 fd45 	bl	8008b24 <memcpy>
    headInc();
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 f92c 	bl	80012f8 <_ZN14CircularBufferIhLt184EE7headIncEv>
  for (int i = 0; i < nItem; i++) {
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e7e7      	b.n	8001078 <_ZN14CircularBufferIhLt184EE8putArrayEPhtt+0x4e>
  return ret; // old head
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	b29b      	uxth	r3, r3
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZNK14CircularBufferIhLt184EE14availableSpaceEv>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::availableSpace() const {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return nElem - usedSpace();
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff feff 	bl	8000ec0 <_ZNK14CircularBufferIhLt184EE9usedSpaceEv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f1c3 03b8 	rsb	r3, r3, #184	; 0xb8
 80010c8:	b29b      	uxth	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <_ZN14CircularBufferIhLt184EE7headAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headAdd(uint16_t len) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
  if (availableSpace() < len)
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffe7 	bl	80010b4 <_ZNK14CircularBufferIhLt184EE14availableSpaceEv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	bf8c      	ite	hi
 80010f0:	2301      	movhi	r3, #1
 80010f2:	2300      	movls	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <_ZN14CircularBufferIhLt184EE7headAddEt+0x2c>
    return -1;
 80010fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fe:	e019      	b.n	8001134 <_ZN14CircularBufferIhLt184EE7headAddEt+0x60>
  uint16_t oldHead = head_;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8001106:	81fb      	strh	r3, [r7, #14]
  head_ = (head_ + len) % real_nElem;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800110e:	461a      	mov	r2, r3
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	4413      	add	r3, r2
 8001114:	4a09      	ldr	r2, [pc, #36]	; (800113c <_ZN14CircularBufferIhLt184EE7headAddEt+0x68>)
 8001116:	fb82 1203 	smull	r1, r2, r2, r3
 800111a:	441a      	add	r2, r3
 800111c:	11d1      	asrs	r1, r2, #7
 800111e:	17da      	asrs	r2, r3, #31
 8001120:	1a8a      	subs	r2, r1, r2
 8001122:	21b9      	movs	r1, #185	; 0xb9
 8001124:	fb01 f202 	mul.w	r2, r1, r2
 8001128:	1a9a      	subs	r2, r3, r2
 800112a:	b292      	uxth	r2, r2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
  return oldHead; // old head
 8001132:	89fb      	ldrh	r3, [r7, #14]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	b11fd3b9 	.word	0xb11fd3b9

08001140 <_ZNK14CircularBufferIhLt184EE7isEmptyEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isEmpty() const { return head_ == tail_; }
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8001154:	429a      	cmp	r2, r3
 8001156:	bf0c      	ite	eq
 8001158:	2301      	moveq	r3, #1
 800115a:	2300      	movne	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <_ZN14CircularBufferIhLt184EE3getEPt>:
template <class T, uint16_t nElem> T CircularBuffer<T, nElem>::get(uint16_t *indexRet) {
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  *indexRet = getTail();
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f8cc 	bl	8001312 <_ZNK14CircularBufferIhLt184EE7getTailEv>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	801a      	strh	r2, [r3, #0]
  return get();
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f8d2 	bl	800132c <_ZN14CircularBufferIhLt184EE3getEv>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <_ZNK14CircularBufferIhLt184EE16countSlotBetweenEtt>:
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	803b      	strh	r3, [r7, #0]
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
 80011a4:	883a      	ldrh	r2, [r7, #0]
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	33b9      	adds	r3, #185	; 0xb9
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <_ZNK14CircularBufferIhLt184EE16countSlotBetweenEtt+0x3c>)
 80011ae:	fb82 1203 	smull	r1, r2, r2, r3
 80011b2:	441a      	add	r2, r3
 80011b4:	11d1      	asrs	r1, r2, #7
 80011b6:	17da      	asrs	r2, r3, #31
 80011b8:	1a8a      	subs	r2, r1, r2
 80011ba:	21b9      	movs	r1, #185	; 0xb9
 80011bc:	fb01 f202 	mul.w	r2, r1, r2
 80011c0:	1a9a      	subs	r2, r3, r2
 80011c2:	b293      	uxth	r3, r2
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	b11fd3b9 	.word	0xb11fd3b9

080011d4 <_ZN14CircularBufferIhLt184EE8memcpyCbEPhtt>:
void CircularBuffer<T, nElem>::memcpyCb(T *memDestArray, uint16_t localTail, uint16_t len) {
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	80fb      	strh	r3, [r7, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	80bb      	strh	r3, [r7, #4]
  for (uint16_t i = 0; i < len; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	82fb      	strh	r3, [r7, #22]
 80011ee:	8afa      	ldrh	r2, [r7, #22]
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d217      	bcs.n	8001226 <_ZN14CircularBufferIhLt184EE8memcpyCbEPhtt+0x52>
    memDestArray[i] = buf_[(localTail + i) % real_nElem];
 80011f6:	88fa      	ldrh	r2, [r7, #6]
 80011f8:	8afb      	ldrh	r3, [r7, #22]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <_ZN14CircularBufferIhLt184EE8memcpyCbEPhtt+0x60>)
 80011fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001202:	441a      	add	r2, r3
 8001204:	11d1      	asrs	r1, r2, #7
 8001206:	17da      	asrs	r2, r3, #31
 8001208:	1a8a      	subs	r2, r1, r2
 800120a:	21b9      	movs	r1, #185	; 0xb9
 800120c:	fb01 f202 	mul.w	r2, r1, r2
 8001210:	1a9a      	subs	r2, r3, r2
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	440b      	add	r3, r1
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	5c8a      	ldrb	r2, [r1, r2]
 800121c:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < len; i++) {
 800121e:	8afb      	ldrh	r3, [r7, #22]
 8001220:	3301      	adds	r3, #1
 8001222:	82fb      	strh	r3, [r7, #22]
 8001224:	e7e3      	b.n	80011ee <_ZN14CircularBufferIhLt184EE8memcpyCbEPhtt+0x1a>
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	b11fd3b9 	.word	0xb11fd3b9

08001238 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::put(T *item, uint16_t bSize) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]
  if (isFull())
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 f88a 	bl	8001360 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x20>
    return -1;
 8001252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001256:	e017      	b.n	8001288 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x50>
  if (bSize > sizeof(T))
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	2b16      	cmp	r3, #22
 800125c:	d902      	bls.n	8001264 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x2c>
    return -2;
 800125e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001262:	e011      	b.n	8001288 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x50>
  memcpy((void *)&buf_[head_], item, bSize);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800126a:	461a      	mov	r2, r3
 800126c:	2316      	movs	r3, #22
 800126e:	fb03 f302 	mul.w	r3, r3, r2
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	88fa      	ldrh	r2, [r7, #6]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	4618      	mov	r0, r3
 800127c:	f007 fc52 	bl	8008b24 <memcpy>
  return headInc(); // old head
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 f891 	bl	80013a8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headIncEv>
 8001286:	4603      	mov	r3, r0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZNK14CircularBufferIhLt184EE6isFullEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isFull() const {
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return head_ == modSub(tail_, 1, real_nElem);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800129e:	4618      	mov	r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80012a6:	33b8      	adds	r3, #184	; 0xb8
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <_ZNK14CircularBufferIhLt184EE6isFullEv+0x44>)
 80012aa:	fb82 1203 	smull	r1, r2, r2, r3
 80012ae:	441a      	add	r2, r3
 80012b0:	11d1      	asrs	r1, r2, #7
 80012b2:	17da      	asrs	r2, r3, #31
 80012b4:	1a8a      	subs	r2, r1, r2
 80012b6:	21b9      	movs	r1, #185	; 0xb9
 80012b8:	fb01 f202 	mul.w	r2, r1, r2
 80012bc:	1a9a      	subs	r2, r3, r2
 80012be:	4290      	cmp	r0, r2
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	b11fd3b9 	.word	0xb11fd3b9

080012d8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE5resetEv>:
template <class T, uint16_t nElem> inline void CircularBuffer<T, nElem>::reset() { head_ = tail_; }
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_ZN14CircularBufferIhLt184EE7headIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headInc() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return headAdd(1); // old head
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fee6 	bl	80010d4 <_ZN14CircularBufferIhLt184EE7headAddEt>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_ZNK14CircularBufferIhLt184EE7getTailEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::getTail() const { return tail_; }
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_ZN14CircularBufferIhLt184EE3getEv>:
template <class T, uint16_t nElem> T CircularBuffer<T, nElem>::get() {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if (isEmpty()) {
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff03 	bl	8001140 <_ZNK14CircularBufferIhLt184EE7isEmptyEv>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <_ZN14CircularBufferIhLt184EE3getEv+0x18>
    return T();
 8001340:	2300      	movs	r3, #0
 8001342:	e008      	b.n	8001356 <_ZN14CircularBufferIhLt184EE3getEv+0x2a>
  auto val = readTail();
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f83c 	bl	80013c2 <_ZNK14CircularBufferIhLt184EE8readTailEv>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
  this->tailInc();
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f847 	bl	80013e2 <_ZN14CircularBufferIhLt184EE7tailIncEv>
  return val;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isFull() const {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return head_ == modSub(tail_, 1, real_nElem);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800136e:	4618      	mov	r0, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001376:	1d19      	adds	r1, r3, #4
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv+0x44>)
 800137a:	fb83 2301 	smull	r2, r3, r3, r1
 800137e:	105a      	asrs	r2, r3, #1
 8001380:	17cb      	asrs	r3, r1, #31
 8001382:	1ad2      	subs	r2, r2, r3
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	1aca      	subs	r2, r1, r3
 800138c:	4290      	cmp	r0, r2
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	66666667 	.word	0x66666667

080013a8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headInc() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return headAdd(1); // old head
 80013b0:	2101      	movs	r1, #1
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f822 	bl	80013fc <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_ZNK14CircularBufferIhLt184EE8readTailEv>:
template <class T, uint16_t nElem> inline T CircularBuffer<T, nElem>::readTail() const { return this->buf_[tail_]; }
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	5c9b      	ldrb	r3, [r3, r2]
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_ZN14CircularBufferIhLt184EE7tailIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	2101      	movs	r1, #1
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fdc9 	bl	8000f84 <_ZN14CircularBufferIhLt184EE7tailAddEt>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headAdd(uint16_t len) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
  if (availableSpace() < len)
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f82d 	bl	8001468 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE14availableSpaceEv>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	4293      	cmp	r3, r2
 8001416:	bf8c      	ite	hi
 8001418:	2301      	movhi	r3, #1
 800141a:	2300      	movls	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x2c>
    return -1;
 8001422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001426:	e018      	b.n	800145a <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x5e>
  uint16_t oldHead = head_;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800142e:	81fb      	strh	r3, [r7, #14]
  head_ = (head_ + len) % real_nElem;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001436:	461a      	mov	r2, r3
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	441a      	add	r2, r3
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x68>)
 800143e:	fb83 1302 	smull	r1, r3, r3, r2
 8001442:	1059      	asrs	r1, r3, #1
 8001444:	17d3      	asrs	r3, r2, #31
 8001446:	1ac9      	subs	r1, r1, r3
 8001448:	460b      	mov	r3, r1
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	1ad1      	subs	r1, r2, r3
 8001450:	b28a      	uxth	r2, r1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  return oldHead; // old head
 8001458:	89fb      	ldrh	r3, [r7, #14]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	66666667 	.word	0x66666667

08001468 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE14availableSpaceEv>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::availableSpace() const {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return nElem - usedSpace();
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f809 	bl	8001488 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 8001476:	4603      	mov	r3, r0
 8001478:	f1c3 0304 	rsb	r3, r3, #4
 800147c:	b29b      	uxth	r3, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpace() const {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if (isFull())
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff65 	bl	8001360 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x18>
    return nElem;
 800149c:	2304      	movs	r3, #4
 800149e:	e01b      	b.n	80014d8 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x50>
  if (isEmpty())
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f81f 	bl	80014e4 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x28>
    return 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e013      	b.n	80014d8 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x50>
  return modSub(head_, tail_, real_nElem); // One Free Slot Logic
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80014b6:	461a      	mov	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	1d5a      	adds	r2, r3, #5
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x58>)
 80014c4:	fb83 1302 	smull	r1, r3, r3, r2
 80014c8:	1059      	asrs	r1, r3, #1
 80014ca:	17d3      	asrs	r3, r2, #31
 80014cc:	1ac9      	subs	r1, r1, r3
 80014ce:	460b      	mov	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	1ad1      	subs	r1, r2, r3
 80014d6:	b28b      	uxth	r3, r1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	66666667 	.word	0x66666667

080014e4 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isEmpty() const { return head_ == tail_; }
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80014f8:	429a      	cmp	r2, r3
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d107      	bne.n	8001530 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001526:	4293      	cmp	r3, r2
 8001528:	d102      	bne.n	8001530 <_Z41__static_initialization_and_destruction_0ii+0x20>
MP_ST_usb<packLinux2Ard, packArd2Linux, ArduinoMP_templateDefault()> MP_St;
 800152a:	4809      	ldr	r0, [pc, #36]	; (8001550 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800152c:	f7ff fa2e 	bl	800098c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EEC1Ev>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153c:	4293      	cmp	r3, r2
 800153e:	d102      	bne.n	8001546 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001542:	f000 f88f 	bl	8001664 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EED1Ev>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002f8 	.word	0x200002f8

08001554 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE12getData_waitEPS1_>:
templatePar()int16_t MP_ST_usb<templateParCall()>::getData_wait(pIn *pack) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	while (this->dataAvailable() < 1) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f88f 	bl	8001684 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE13dataAvailableEv>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d000      	beq.n	8001578 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE12getData_waitEPS1_+0x24>
 8001576:	e7f2      	b.n	800155e <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE12getData_waitEPS1_+0xa>
	return this->getData_try(pack);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f88f 	bl	80016a0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11getData_tryEPS1_>
 8001582:	4603      	mov	r3, r0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE17packSend_ConcreteEPht>:

templatePar()int MP_ST_usb<templateParCall()>::packSend_Concrete(
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
		uint8_t *stream, uint16_t len) {
	//return 0;
	if (byteSend.availableSpace() < len){
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f503 739b 	add.w	r3, r3, #310	; 0x136
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fd87 	bl	80010b4 <_ZNK14CircularBufferIhLt184EE14availableSpaceEv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	bf8c      	ite	hi
 80015b0:	2301      	movhi	r3, #1
 80015b2:	2300      	movls	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE17packSend_ConcreteEPht+0x34>
		return -2;
 80015ba:	f06f 0301 	mvn.w	r3, #1
 80015be:	e02f      	b.n	8001620 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE17packSend_ConcreteEPht+0x94>
	}

	byteSend.putArray(stream, len);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f503 739b 	add.w	r3, r3, #310	; 0x136
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fbad 	bl	8000d2a <_ZN14CircularBufferIhLt184EE8putArrayEPht>
	len = byteSend.usedSpaceLinear();
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f503 739b 	add.w	r3, r3, #310	; 0x136
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fca2 	bl	8000f20 <_ZNK14CircularBufferIhLt184EE15usedSpaceLinearEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	80fb      	strh	r3, [r7, #6]
	if (CDC_Transmit_FS(byteSend.getTailPtr(), len) == 0) {
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f503 739b 	add.w	r3, r3, #310	; 0x136
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fcbb 	bl	8000f62 <_ZN14CircularBufferIhLt184EE10getTailPtrEv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f006 fde6 	bl	80081c4 <CDC_Transmit_FS>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf0c      	ite	eq
 80015fe:	2301      	moveq	r3, #1
 8001600:	2300      	movne	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d009      	beq.n	800161c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE17packSend_ConcreteEPht+0x90>
		byteSend.tailAdd(len);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f503 739b 	add.w	r3, r3, #310	; 0x136
 800160e:	88fa      	ldrh	r2, [r7, #6]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fcb6 	bl	8000f84 <_ZN14CircularBufferIhLt184EE7tailAddEt>
		return 0;
 8001618:	2300      	movs	r3, #0
 800161a:	e001      	b.n	8001620 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE17packSend_ConcreteEPht+0x94>
	} else{
		return -3;
 800161c:	f06f 0302 	mvn.w	r3, #2
	}
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE15packTimeRefreshEv>:

templatePar()void MP_ST_usb<templateParCall()>::packTimeRefresh() {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	lastDecodeTime = HAL_GetTick();
 8001630:	f000 faee 	bl	8001c10 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE15lastPackElapsedEv>:

templatePar()unsigned long MP_ST_usb<templateParCall()>::lastPackElapsed() {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - lastDecodeTime;
 800164c:	f000 fae0 	bl	8001c10 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8001658:	1ad3      	subs	r3, r2, r3
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EED1Ev>:
templatePar() MP_ST_usb<templateParCall()>::~MP_ST_usb() {
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
}
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EED1Ev+0x1c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	08008c4c 	.word	0x08008c4c

08001684 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE13dataAvailableEv>:
templatePar() uint16_t MP<templateParCall()>::dataAvailable() { return this->packRecive.usedSpace(); }
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	33c4      	adds	r3, #196	; 0xc4
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fef9 	bl	8001488 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 8001696:	4603      	mov	r3, r0
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11getData_tryEPS1_>:
templatePar() int16_t MP<templateParCall()>::getData_try(pIn *pack) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  if (packRecive.isEmpty())
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	33c4      	adds	r3, #196	; 0xc4
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff18 	bl	80014e4 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11getData_tryEPS1_+0x20>
    return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016be:	e00f      	b.n	80016e0 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE11getData_tryEPS1_+0x40>
  memcpy(pack, packRecive.getPtr(), sizeof(pIn));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	33c4      	adds	r3, #196	; 0xc4
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f80f 	bl	80016e8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2216      	movs	r2, #22
 80016ce:	4619      	mov	r1, r3
 80016d0:	6838      	ldr	r0, [r7, #0]
 80016d2:	f007 fa27 	bl	8008b24 <memcpy>
  return dataAvailable();
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffd4 	bl	8001684 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt8ELt4EE13dataAvailableEv>
 80016dc:	4603      	mov	r3, r0
 80016de:	b21b      	sxth	r3, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv>:
template <class T, uint16_t nElem> T *CircularBuffer<T, nElem>::getPtr() {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if (isEmpty()) {
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fef7 	bl	80014e4 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv+0x18>
    return nullptr;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e007      	b.n	8001710 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv+0x28>
  auto val = getTailPtr();
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f809 	bl	8001718 <_ZN14CircularBufferI14_packLinux2ArdLt4EE10getTailPtrEv>
 8001706:	60f8      	str	r0, [r7, #12]
  this->tailInc();
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f818 	bl	800173e <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailIncEv>
  return val;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN14CircularBufferI14_packLinux2ArdLt4EE10getTailPtrEv>:
template <class T, uint16_t nElem> inline T *CircularBuffer<T, nElem>::getTailPtr() { return &buf_[tail_]; }
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001726:	461a      	mov	r2, r3
 8001728:	2316      	movs	r3, #22
 800172a:	fb03 f302 	mul.w	r3, r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	2101      	movs	r1, #1
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f805 	bl	8001758 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt>
 800174e:	4603      	mov	r3, r0
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailAdd(uint16_t len) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
  if (usedSpace() < len)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fe8f 	bl	8001488 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	4293      	cmp	r3, r2
 8001772:	bf8c      	ite	hi
 8001774:	2301      	movhi	r3, #1
 8001776:	2300      	movls	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x2c>
    return -1;
 800177e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001782:	e016      	b.n	80017b2 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x5a>
  tail_ = (tail_ + len) % real_nElem;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800178a:	461a      	mov	r2, r3
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	441a      	add	r2, r3
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x64>)
 8001792:	fb83 1302 	smull	r1, r3, r3, r2
 8001796:	1059      	asrs	r1, r3, #1
 8001798:	17d3      	asrs	r3, r2, #31
 800179a:	1ac9      	subs	r1, r1, r3
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	1ad1      	subs	r1, r2, r3
 80017a4:	b28a      	uxth	r2, r1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  return tail_;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	66666667 	.word	0x66666667

080017c0 <_GLOBAL__sub_I_hi2c1>:
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff fea1 	bl	8001510 <_Z41__static_initialization_and_destruction_0ii>
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_GLOBAL__sub_D_hi2c1>:
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fe99 	bl	8001510 <_Z41__static_initialization_and_destruction_0ii>
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_MspInit+0x4c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x4c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800181e:	2007      	movs	r0, #7
 8001820:	f000 faf6 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_I2C_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800186e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001878:	2301      	movs	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001880:	2304      	movs	r3, #4
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <HAL_I2C_MspInit+0x8c>)
 800188c:	f000 fb02 	bl	8001e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 800189a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189e:	6413      	str	r3, [r2, #64]	; 0x40
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400

080018c0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a28      	ldr	r2, [pc, #160]	; (8001980 <HAL_I2S_MspInit+0xc0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d14a      	bne.n	8001978 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a26      	ldr	r2, [pc, #152]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 80018ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a18      	ldr	r2, [pc, #96]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <HAL_I2S_MspInit+0xc4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001936:	2310      	movs	r3, #16
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001946:	2306      	movs	r3, #6
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <HAL_I2S_MspInit+0xc8>)
 8001952:	f000 fa9f 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001956:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800195a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001968:	2306      	movs	r3, #6
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <HAL_I2S_MspInit+0xcc>)
 8001974:	f000 fa8e 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40003c00 	.word	0x40003c00
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020800 	.word	0x40020800

08001990 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_SPI_MspInit+0x84>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12b      	bne.n	8001a0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_SPI_MspInit+0x88>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_SPI_MspInit+0x88>)
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_SPI_MspInit+0x88>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_SPI_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <HAL_SPI_MspInit+0x88>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_SPI_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019ea:	23e0      	movs	r3, #224	; 0xe0
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fa:	2305      	movs	r3, #5
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <HAL_SPI_MspInit+0x8c>)
 8001a06:	f000 fa45 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40013000 	.word	0x40013000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f000 f8bc 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <OTG_FS_IRQHandler+0x10>)
 8001a7a:	f001 faf5 	bl	8003068 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20001bec 	.word	0x20001bec

08001a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	return 1;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_kill>:

int _kill(int pid, int sig)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aa2:	f007 f815 	bl	8008ad0 <__errno>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2216      	movs	r2, #22
 8001aaa:	601a      	str	r2, [r3, #0]
	return -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_exit>:

void _exit (int status)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffe7 	bl	8001a98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aca:	e7fe      	b.n	8001aca <_exit+0x12>

08001acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b0c:	4c0b      	ldr	r4, [pc, #44]	; (8001b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b1a:	f7ff ffd7 	bl	8001acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f006 ffdd 	bl	8008adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7fe fccd 	bl	80004c0 <main>
  bx  lr    
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b34:	08008ca4 	.word	0x08008ca4
  ldr r2, =_sbss
 8001b38:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001b3c:	20001ff8 	.word	0x20001ff8

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_Init+0x40>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_Init+0x40>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_Init+0x40>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f94f 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fe32 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f967 	bl	8001e7a <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc4:	f000 f92f 	bl	8001e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000718 	.word	0x20000718

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000718 	.word	0x20000718

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <__NVIC_EnableIRQ+0x38>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	; (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff29 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff3e 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff8e 	bl	8001d64 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff31 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffa2 	bl	8001dcc <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e16b      	b.n	8002188 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 815a 	bne.w	8002182 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d005      	beq.n	8001ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d130      	bne.n	8001f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 0201 	and.w	r2, r3, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d017      	beq.n	8001f84 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d123      	bne.n	8001fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0203 	and.w	r2, r3, #3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80b4 	beq.w	8002182 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a5f      	ldr	r2, [pc, #380]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002036:	4a5b      	ldr	r2, [pc, #364]	; (80021a4 <HAL_GPIO_Init+0x310>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_GPIO_Init+0x314>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02b      	beq.n	80020ba <HAL_GPIO_Init+0x226>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_GPIO_Init+0x318>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x222>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a50      	ldr	r2, [pc, #320]	; (80021b0 <HAL_GPIO_Init+0x31c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x21e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x320>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x21a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4e      	ldr	r2, [pc, #312]	; (80021b8 <HAL_GPIO_Init+0x324>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x216>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x328>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x212>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_GPIO_Init+0x32c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <HAL_GPIO_Init+0x330>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x20a>
 800209a:	2307      	movs	r3, #7
 800209c:	e00e      	b.n	80020bc <HAL_GPIO_Init+0x228>
 800209e:	2308      	movs	r3, #8
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_GPIO_Init+0x310>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_GPIO_Init+0x334>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fe:	4a32      	ldr	r2, [pc, #200]	; (80021c8 <HAL_GPIO_Init+0x334>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002104:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_GPIO_Init+0x334>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <HAL_GPIO_Init+0x334>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_GPIO_Init+0x334>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_GPIO_Init+0x334>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x334>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_GPIO_Init+0x334>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae90 	bls.w	8001eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40021c00 	.word	0x40021c00
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e12b      	b.n	800246a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fb02 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002264:	f002 fb80 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8002268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a81      	ldr	r2, [pc, #516]	; (8002474 <HAL_I2C_Init+0x274>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d807      	bhi.n	8002284 <HAL_I2C_Init+0x84>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a80      	ldr	r2, [pc, #512]	; (8002478 <HAL_I2C_Init+0x278>)
 8002278:	4293      	cmp	r3, r2
 800227a:	bf94      	ite	ls
 800227c:	2301      	movls	r3, #1
 800227e:	2300      	movhi	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e006      	b.n	8002292 <HAL_I2C_Init+0x92>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a7d      	ldr	r2, [pc, #500]	; (800247c <HAL_I2C_Init+0x27c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	bf94      	ite	ls
 800228c:	2301      	movls	r3, #1
 800228e:	2300      	movhi	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0e7      	b.n	800246a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a78      	ldr	r2, [pc, #480]	; (8002480 <HAL_I2C_Init+0x280>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	0c9b      	lsrs	r3, r3, #18
 80022a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a6a      	ldr	r2, [pc, #424]	; (8002474 <HAL_I2C_Init+0x274>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d802      	bhi.n	80022d4 <HAL_I2C_Init+0xd4>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3301      	adds	r3, #1
 80022d2:	e009      	b.n	80022e8 <HAL_I2C_Init+0xe8>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	4a69      	ldr	r2, [pc, #420]	; (8002484 <HAL_I2C_Init+0x284>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	3301      	adds	r3, #1
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	495c      	ldr	r1, [pc, #368]	; (8002474 <HAL_I2C_Init+0x274>)
 8002304:	428b      	cmp	r3, r1
 8002306:	d819      	bhi.n	800233c <HAL_I2C_Init+0x13c>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e59      	subs	r1, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fbb1 f3f3 	udiv	r3, r1, r3
 8002316:	1c59      	adds	r1, r3, #1
 8002318:	f640 73fc 	movw	r3, #4092	; 0xffc
 800231c:	400b      	ands	r3, r1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_I2C_Init+0x138>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1e59      	subs	r1, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002336:	e051      	b.n	80023dc <HAL_I2C_Init+0x1dc>
 8002338:	2304      	movs	r3, #4
 800233a:	e04f      	b.n	80023dc <HAL_I2C_Init+0x1dc>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d111      	bne.n	8002368 <HAL_I2C_Init+0x168>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e012      	b.n	800238e <HAL_I2C_Init+0x18e>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e58      	subs	r0, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	0099      	lsls	r1, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	fbb0 f3f3 	udiv	r3, r0, r3
 800237e:	3301      	adds	r3, #1
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Init+0x196>
 8002392:	2301      	movs	r3, #1
 8002394:	e022      	b.n	80023dc <HAL_I2C_Init+0x1dc>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10e      	bne.n	80023bc <HAL_I2C_Init+0x1bc>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e58      	subs	r0, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	440b      	add	r3, r1
 80023ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ba:	e00f      	b.n	80023dc <HAL_I2C_Init+0x1dc>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1e58      	subs	r0, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	0099      	lsls	r1, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	6809      	ldr	r1, [r1, #0]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800240a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6911      	ldr	r1, [r2, #16]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68d2      	ldr	r2, [r2, #12]
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	430b      	orrs	r3, r1
 800241e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	000186a0 	.word	0x000186a0
 8002478:	001e847f 	.word	0x001e847f
 800247c:	003d08ff 	.word	0x003d08ff
 8002480:	431bde83 	.word	0x431bde83
 8002484:	10624dd3 	.word	0x10624dd3

08002488 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e128      	b.n	80026ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a90      	ldr	r2, [pc, #576]	; (80026f4 <HAL_I2S_Init+0x26c>)
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fa03 	bl	80018c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024d0:	f023 030f 	bic.w	r3, r3, #15
 80024d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d060      	beq.n	80025a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024ee:	2310      	movs	r3, #16
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e001      	b.n	80024f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d802      	bhi.n	8002506 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002506:	2001      	movs	r0, #1
 8002508:	f002 fb24 	bl	8004b54 <HAL_RCCEx_GetPeriphCLKFreq>
 800250c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002516:	d125      	bne.n	8002564 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	fbb2 f2f3 	udiv	r2, r2, r3
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	461a      	mov	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	3305      	adds	r3, #5
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e01f      	b.n	8002582 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	fbb2 f2f3 	udiv	r2, r2, r3
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	461a      	mov	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	3305      	adds	r3, #5
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e00e      	b.n	8002582 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fbb2 f2f3 	udiv	r2, r2, r3
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	3305      	adds	r3, #5
 8002580:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4a5c      	ldr	r2, [pc, #368]	; (80026f8 <HAL_I2S_Init+0x270>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	08db      	lsrs	r3, r3, #3
 800258c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e003      	b.n	80025b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d902      	bls.n	80025bc <HAL_I2S_Init+0x134>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	2bff      	cmp	r3, #255	; 0xff
 80025ba:	d907      	bls.n	80025cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	f043 0210 	orr.w	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e08f      	b.n	80026ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	ea42 0103 	orr.w	r1, r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	430a      	orrs	r2, r1
 80025de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025ea:	f023 030f 	bic.w	r3, r3, #15
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6851      	ldr	r1, [r2, #4]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68d2      	ldr	r2, [r2, #12]
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6992      	ldr	r2, [r2, #24]
 8002602:	430a      	orrs	r2, r1
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d161      	bne.n	80026dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a38      	ldr	r2, [pc, #224]	; (80026fc <HAL_I2S_Init+0x274>)
 800261c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a37      	ldr	r2, [pc, #220]	; (8002700 <HAL_I2S_Init+0x278>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_I2S_Init+0x1a4>
 8002628:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_I2S_Init+0x27c>)
 800262a:	e001      	b.n	8002630 <HAL_I2S_Init+0x1a8>
 800262c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4932      	ldr	r1, [pc, #200]	; (8002700 <HAL_I2S_Init+0x278>)
 8002638:	428a      	cmp	r2, r1
 800263a:	d101      	bne.n	8002640 <HAL_I2S_Init+0x1b8>
 800263c:	4a31      	ldr	r2, [pc, #196]	; (8002704 <HAL_I2S_Init+0x27c>)
 800263e:	e001      	b.n	8002644 <HAL_I2S_Init+0x1bc>
 8002640:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002644:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002648:	f023 030f 	bic.w	r3, r3, #15
 800264c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <HAL_I2S_Init+0x278>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_I2S_Init+0x1d4>
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_I2S_Init+0x27c>)
 800265a:	e001      	b.n	8002660 <HAL_I2S_Init+0x1d8>
 800265c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002660:	2202      	movs	r2, #2
 8002662:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a25      	ldr	r2, [pc, #148]	; (8002700 <HAL_I2S_Init+0x278>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_I2S_Init+0x1ea>
 800266e:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_I2S_Init+0x27c>)
 8002670:	e001      	b.n	8002676 <HAL_I2S_Init+0x1ee>
 8002672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002682:	d003      	beq.n	800268c <HAL_I2S_Init+0x204>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800268c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	e001      	b.n	8002698 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	4313      	orrs	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <HAL_I2S_Init+0x278>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d101      	bne.n	80026d4 <HAL_I2S_Init+0x24c>
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_I2S_Init+0x27c>)
 80026d2:	e001      	b.n	80026d8 <HAL_I2S_Init+0x250>
 80026d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d8:	897a      	ldrh	r2, [r7, #10]
 80026da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	080027ff 	.word	0x080027ff
 80026f8:	cccccccd 	.word	0xcccccccd
 80026fc:	08002915 	.word	0x08002915
 8002700:	40003800 	.word	0x40003800
 8002704:	40003400 	.word	0x40003400

08002708 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	881a      	ldrh	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c9a      	adds	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10e      	bne.n	8002798 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002788:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ffb8 	bl	8002708 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	b292      	uxth	r2, r2
 80027b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	1c9a      	adds	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10e      	bne.n	80027f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff93 	bl	800271c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b04      	cmp	r3, #4
 8002818:	d13a      	bne.n	8002890 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d109      	bne.n	8002838 <I2S_IRQHandler+0x3a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d102      	bne.n	8002838 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffb4 	bl	80027a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d126      	bne.n	8002890 <I2S_IRQHandler+0x92>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b20      	cmp	r3, #32
 800284e:	d11f      	bne.n	8002890 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800285e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f043 0202 	orr.w	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ff50 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b03      	cmp	r3, #3
 800289a:	d136      	bne.n	800290a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d109      	bne.n	80028ba <I2S_IRQHandler+0xbc>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d102      	bne.n	80028ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff45 	bl	8002744 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d122      	bne.n	800290a <I2S_IRQHandler+0x10c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d11b      	bne.n	800290a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff13 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4aa2      	ldr	r2, [pc, #648]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800292e:	4ba2      	ldr	r3, [pc, #648]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002930:	e001      	b.n	8002936 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a9b      	ldr	r2, [pc, #620]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800294c:	4b9a      	ldr	r3, [pc, #616]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800294e:	e001      	b.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002960:	d004      	beq.n	800296c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8099 	bne.w	8002a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d107      	bne.n	8002986 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f925 	bl	8002bd0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f9c8 	bl	8002d30 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d13a      	bne.n	8002a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d035      	beq.n	8002a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80029be:	4b7e      	ldr	r3, [pc, #504]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029c0:	e001      	b.n	80029c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80029c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4979      	ldr	r1, [pc, #484]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029ce:	428b      	cmp	r3, r1
 80029d0:	d101      	bne.n	80029d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80029d2:	4b79      	ldr	r3, [pc, #484]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029d4:	e001      	b.n	80029da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80029d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f043 0202 	orr.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fe88 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	f040 80be 	bne.w	8002ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80b8 	beq.w	8002ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a59      	ldr	r2, [pc, #356]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a52:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a54:	e001      	b.n	8002a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4954      	ldr	r1, [pc, #336]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a62:	428b      	cmp	r3, r1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a66:	4b54      	ldr	r3, [pc, #336]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a68:	e001      	b.n	8002a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fe4a 	bl	8002730 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a9c:	e084      	b.n	8002ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d107      	bne.n	8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8be 	bl	8002c34 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8fd 	bl	8002ccc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d12f      	bne.n	8002b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02a      	beq.n	8002b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002af4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2e      	ldr	r2, [pc, #184]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b02:	e001      	b.n	8002b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4929      	ldr	r1, [pc, #164]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b10:	428b      	cmp	r3, r1
 8002b12:	d101      	bne.n	8002b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b16:	e001      	b.n	8002b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fdfa 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d131      	bne.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d02c      	beq.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b5c:	e001      	b.n	8002b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4912      	ldr	r1, [pc, #72]	; (8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b6a:	428b      	cmp	r3, r1
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b70:	e001      	b.n	8002b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002b72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b8a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	f043 0204 	orr.w	r2, r3, #4
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fdc5 	bl	8002730 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ba6:	e000      	b.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ba8:	bf00      	nop
}
 8002baa:	bf00      	nop
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40003800 	.word	0x40003800
 8002bb8:	40003400 	.word	0x40003400

08002bbc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	1c99      	adds	r1, r3, #2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6251      	str	r1, [r2, #36]	; 0x24
 8002be2:	881a      	ldrh	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ffc9 	bl	8002bbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c99      	adds	r1, r3, #2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6251      	str	r1, [r2, #36]	; 0x24
 8002c46:	8819      	ldrh	r1, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <I2SEx_TxISR_I2SExt+0x22>
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002c54:	e001      	b.n	8002c5a <I2SEx_TxISR_I2SExt+0x26>
 8002c56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d121      	bne.n	8002cba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d101      	bne.n	8002c84 <I2SEx_TxISR_I2SExt+0x50>
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002c82:	e001      	b.n	8002c88 <I2SEx_TxISR_I2SExt+0x54>
 8002c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	490d      	ldr	r1, [pc, #52]	; (8002cc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d101      	bne.n	8002c98 <I2SEx_TxISR_I2SExt+0x64>
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002c96:	e001      	b.n	8002c9c <I2SEx_TxISR_I2SExt+0x68>
 8002c98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ca0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff81 	bl	8002bbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40003800 	.word	0x40003800
 8002cc8:	40003400 	.word	0x40003400

08002ccc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68d8      	ldr	r0, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	1c99      	adds	r1, r3, #2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ce4:	b282      	uxth	r2, r0
 8002ce6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d113      	bne.n	8002d28 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d0e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff4a 	bl	8002bbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x90>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <I2SEx_RxISR_I2SExt+0x16>
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <I2SEx_RxISR_I2SExt+0x94>)
 8002d44:	e001      	b.n	8002d4a <I2SEx_RxISR_I2SExt+0x1a>
 8002d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d4a:	68d8      	ldr	r0, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	1c99      	adds	r1, r3, #2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d56:	b282      	uxth	r2, r0
 8002d58:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d121      	bne.n	8002db6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x90>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <I2SEx_RxISR_I2SExt+0x50>
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <I2SEx_RxISR_I2SExt+0x94>)
 8002d7e:	e001      	b.n	8002d84 <I2SEx_RxISR_I2SExt+0x54>
 8002d80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	490d      	ldr	r1, [pc, #52]	; (8002dc0 <I2SEx_RxISR_I2SExt+0x90>)
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	d101      	bne.n	8002d94 <I2SEx_RxISR_I2SExt+0x64>
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <I2SEx_RxISR_I2SExt+0x94>)
 8002d92:	e001      	b.n	8002d98 <I2SEx_RxISR_I2SExt+0x68>
 8002d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d9c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff03 	bl	8002bbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40003800 	.word	0x40003800
 8002dc4:	40003400 	.word	0x40003400

08002dc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dca:	b08f      	sub	sp, #60	; 0x3c
 8002dcc:	af0a      	add	r7, sp, #40	; 0x28
 8002dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e10f      	b.n	8002ffa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f005 fb2d 	bl	8008454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 f896 	bl	8004f4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	687e      	ldr	r6, [r7, #4]
 8002e26:	466d      	mov	r5, sp
 8002e28:	f106 0410 	add.w	r4, r6, #16
 8002e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e38:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3c:	1d33      	adds	r3, r6, #4
 8002e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	f001 ff6e 	bl	8004d22 <USB_CoreInit>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d0      	b.n	8002ffa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 f884 	bl	8004f6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e04a      	b.n	8002f00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	333d      	adds	r3, #61	; 0x3d
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	333c      	adds	r3, #60	; 0x3c
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	b298      	uxth	r0, r3
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3342      	adds	r3, #66	; 0x42
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	333f      	adds	r3, #63	; 0x3f
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3344      	adds	r3, #68	; 0x44
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3348      	adds	r3, #72	; 0x48
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3350      	adds	r3, #80	; 0x50
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3301      	adds	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3af      	bcc.n	8002e6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e044      	b.n	8002f9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	3301      	adds	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3b5      	bcc.n	8002f10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	687e      	ldr	r6, [r7, #4]
 8002fac:	466d      	mov	r5, sp
 8002fae:	f106 0410 	add.w	r4, r6, #16
 8002fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc2:	1d33      	adds	r3, r6, #4
 8002fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f001 fffa 	bl	8004fc0 <USB_DevInit>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00d      	b.n	8002ffa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 f842 	bl	800607c <USB_DevDisconnect>

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003002 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_PCD_Start+0x1c>
 800301a:	2302      	movs	r3, #2
 800301c:	e020      	b.n	8003060 <HAL_PCD_Start+0x5e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b01      	cmp	r3, #1
 800302c:	d109      	bne.n	8003042 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003032:	2b01      	cmp	r3, #1
 8003034:	d005      	beq.n	8003042 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f001 ff6e 	bl	8004f28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f002 fff2 	bl	800603a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b08d      	sub	sp, #52	; 0x34
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f003 f8b0 	bl	80061e4 <USB_GetMode>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 839d 	bne.w	80037c6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f003 f814 	bl	80060be <USB_ReadInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8393 	beq.w	80037c4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 f80b 	bl	80060be <USB_ReadInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d107      	bne.n	80030c2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f002 0202 	and.w	r2, r2, #2
 80030c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f002 fff9 	bl	80060be <USB_ReadInterrupts>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d161      	bne.n	800319a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0210 	bic.w	r2, r2, #16
 80030e4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f003 020f 	and.w	r2, r3, #15
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	3304      	adds	r3, #4
 8003104:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	0c5b      	lsrs	r3, r3, #17
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	2b02      	cmp	r3, #2
 8003110:	d124      	bne.n	800315c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d035      	beq.n	800318a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312c:	b29b      	uxth	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	6a38      	ldr	r0, [r7, #32]
 8003132:	f002 fe5f 	bl	8005df4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003142:	441a      	add	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003154:	441a      	add	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	619a      	str	r2, [r3, #24]
 800315a:	e016      	b.n	800318a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	0c5b      	lsrs	r3, r3, #17
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	2b06      	cmp	r3, #6
 8003166:	d110      	bne.n	800318a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800316e:	2208      	movs	r2, #8
 8003170:	4619      	mov	r1, r3
 8003172:	6a38      	ldr	r0, [r7, #32]
 8003174:	f002 fe3e 	bl	8005df4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003184:	441a      	add	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0210 	orr.w	r2, r2, #16
 8003198:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 ff8d 	bl	80060be <USB_ReadInterrupts>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031ae:	d16e      	bne.n	800328e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f002 ff93 	bl	80060e4 <USB_ReadDevAllOutEpInterrupt>
 80031be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031c0:	e062      	b.n	8003288 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d057      	beq.n	800327c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f002 ffb8 	bl	800614c <USB_ReadDevOutEPInterrupt>
 80031dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00c      	beq.n	8003202 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f4:	461a      	mov	r2, r3
 80031f6:	2301      	movs	r3, #1
 80031f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fdb1 	bl	8003d64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003218:	461a      	mov	r2, r3
 800321a:	2308      	movs	r3, #8
 800321c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800321e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 feab 	bl	8003f7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323c:	461a      	mov	r2, r3
 800323e:	2310      	movs	r3, #16
 8003240:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	461a      	mov	r2, r3
 800325a:	2320      	movs	r3, #32
 800325c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800327a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	3301      	adds	r3, #1
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d199      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f002 ff13 	bl	80060be <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032a2:	f040 80c0 	bne.w	8003426 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 ff34 	bl	8006118 <USB_ReadDevAllInEpInterrupt>
 80032b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032b6:	e0b2      	b.n	800341e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80a7 	beq.w	8003412 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 ff5a 	bl	8006188 <USB_ReadDevInEPInterrupt>
 80032d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d057      	beq.n	8003390 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	2201      	movs	r2, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69f9      	ldr	r1, [r7, #28]
 80032fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003300:	4013      	ands	r3, r2
 8003302:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003310:	461a      	mov	r2, r3
 8003312:	2301      	movs	r3, #1
 8003314:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d132      	bne.n	8003384 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	3348      	adds	r3, #72	; 0x48
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4403      	add	r3, r0
 800333e:	3344      	adds	r3, #68	; 0x44
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4419      	add	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4403      	add	r3, r0
 8003352:	3348      	adds	r3, #72	; 0x48
 8003354:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d113      	bne.n	8003384 <HAL_PCD_IRQHandler+0x31c>
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3350      	adds	r3, #80	; 0x50
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800337c:	461a      	mov	r2, r3
 800337e:	2101      	movs	r1, #1
 8003380:	f002 ff62 	bl	8006248 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f005 f8f1 	bl	8008572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a6:	461a      	mov	r2, r3
 80033a8:	2308      	movs	r3, #8
 80033aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c2:	461a      	mov	r2, r3
 80033c4:	2310      	movs	r3, #16
 80033c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033de:	461a      	mov	r2, r3
 80033e0:	2340      	movs	r3, #64	; 0x40
 80033e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fa:	461a      	mov	r2, r3
 80033fc:	2302      	movs	r3, #2
 80033fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800340a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fc1b 	bl	8003c48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	3301      	adds	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	f47f af49 	bne.w	80032b8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f002 fe47 	bl	80060be <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800343a:	d122      	bne.n	8003482 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003462:	2100      	movs	r1, #0
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fe27 	bl	80040b8 <HAL_PCDEx_LPM_Callback>
 800346a:	e002      	b.n	8003472 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f005 f8f7 	bl	8008660 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f002 fe19 	bl	80060be <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003496:	d112      	bne.n	80034be <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f005 f8b3 	bl	8008614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034bc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 fdfb 	bl	80060be <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	f040 80c7 	bne.w	8003664 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2110      	movs	r1, #16
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fec9 	bl	8005288 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fa:	e056      	b.n	80035aa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003508:	461a      	mov	r2, r3
 800350a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800350e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003520:	0151      	lsls	r1, r2, #5
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	440a      	add	r2, r1
 8003526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800352a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800352e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003540:	0151      	lsls	r1, r2, #5
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	440a      	add	r2, r1
 8003546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800354e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355c:	461a      	mov	r2, r3
 800355e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003562:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800357e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003582:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003594:	0151      	lsls	r1, r2, #5
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	440a      	add	r2, r1
 800359a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800359e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	3301      	adds	r3, #1
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d3a3      	bcc.n	80034fc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d016      	beq.n	80035fe <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e0:	f043 030b 	orr.w	r3, r3, #11
 80035e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f6:	f043 030b 	orr.w	r3, r3, #11
 80035fa:	6453      	str	r3, [r2, #68]	; 0x44
 80035fc:	e015      	b.n	800362a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800360c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003610:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003614:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003624:	f043 030b 	orr.w	r3, r3, #11
 8003628:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003638:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800363c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800364e:	461a      	mov	r2, r3
 8003650:	f002 fdfa 	bl	8006248 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f002 fd28 	bl	80060be <USB_ReadInterrupts>
 800366e:	4603      	mov	r3, r0
 8003670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003678:	d124      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f002 fdbe 	bl	8006200 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f001 fe5e 	bl	800534a <USB_GetDevSpeed>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681c      	ldr	r4, [r3, #0]
 800369a:	f001 f959 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 800369e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	4620      	mov	r0, r4
 80036aa:	f001 fb9b 	bl	8004de4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f004 ff87 	bl	80085c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f002 fcf8 	bl	80060be <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d10a      	bne.n	80036ee <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f004 ff64 	bl	80085a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f002 0208 	and.w	r2, r2, #8
 80036ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 fce3 	bl	80060be <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003702:	d10f      	bne.n	8003724 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	b2db      	uxtb	r3, r3
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f004 ffc6 	bl	80086a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f002 fcc8 	bl	80060be <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003738:	d10f      	bne.n	800375a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	b2db      	uxtb	r3, r3
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f004 ff99 	bl	800867c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fcad 	bl	80060be <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d10a      	bne.n	8003786 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f004 ffa7 	bl	80086c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 fc97 	bl	80060be <USB_ReadInterrupts>
 8003790:	4603      	mov	r3, r0
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d115      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f004 ff97 	bl	80086e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	e000      	b.n	80037c6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80037c4:	bf00      	nop
    }
  }
}
 80037c6:	3734      	adds	r7, #52	; 0x34
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd90      	pop	{r4, r7, pc}

080037cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_PCD_SetAddress+0x1a>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e013      	b.n	800380e <HAL_PCD_SetAddress+0x42>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f002 fbf5 	bl	8005fee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	4608      	mov	r0, r1
 8003820:	4611      	mov	r1, r2
 8003822:	461a      	mov	r2, r3
 8003824:	4603      	mov	r3, r0
 8003826:	70fb      	strb	r3, [r7, #3]
 8003828:	460b      	mov	r3, r1
 800382a:	803b      	strh	r3, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003838:	2b00      	cmp	r3, #0
 800383a:	da0f      	bge.n	800385c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 020f 	and.w	r2, r3, #15
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	3338      	adds	r3, #56	; 0x38
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4413      	add	r3, r2
 8003850:	3304      	adds	r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	705a      	strb	r2, [r3, #1]
 800385a:	e00f      	b.n	800387c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	f003 020f 	and.w	r2, r3, #15
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	3304      	adds	r3, #4
 8003874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	b2da      	uxtb	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003888:	883a      	ldrh	r2, [r7, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	78ba      	ldrb	r2, [r7, #2]
 8003892:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038a6:	78bb      	ldrb	r3, [r7, #2]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d102      	bne.n	80038b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_PCD_EP_Open+0xaa>
 80038bc:	2302      	movs	r3, #2
 80038be:	e00e      	b.n	80038de <HAL_PCD_EP_Open+0xc8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68f9      	ldr	r1, [r7, #12]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 fd60 	bl	8005394 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80038dc:	7afb      	ldrb	r3, [r7, #11]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da0f      	bge.n	800391a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	f003 020f 	and.w	r2, r3, #15
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	3338      	adds	r3, #56	; 0x38
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	3304      	adds	r3, #4
 8003910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	705a      	strb	r2, [r3, #1]
 8003918:	e00f      	b.n	800393a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_PCD_EP_Close+0x6e>
 8003950:	2302      	movs	r3, #2
 8003952:	e00e      	b.n	8003972 <HAL_PCD_EP_Close+0x8c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68f9      	ldr	r1, [r7, #12]
 8003962:	4618      	mov	r0, r3
 8003964:	f001 fd9e 	bl	80054a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	460b      	mov	r3, r1
 8003988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398a:	7afb      	ldrb	r3, [r7, #11]
 800398c:	f003 020f 	and.w	r2, r3, #15
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	3304      	adds	r3, #4
 80039a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d102      	bne.n	80039d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d6:	7afb      	ldrb	r3, [r7, #11]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	6979      	ldr	r1, [r7, #20]
 80039ee:	f002 f879 	bl	8005ae4 <USB_EP0StartXfer>
 80039f2:	e008      	b.n	8003a06 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	6979      	ldr	r1, [r7, #20]
 8003a02:	f001 fe2b 	bl	800565c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	3338      	adds	r3, #56	; 0x38
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	3304      	adds	r3, #4
 8003a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d102      	bne.n	8003a9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a9a:	7afb      	ldrb	r3, [r7, #11]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6979      	ldr	r1, [r7, #20]
 8003ab2:	f002 f817 	bl	8005ae4 <USB_EP0StartXfer>
 8003ab6:	e008      	b.n	8003aca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6979      	ldr	r1, [r7, #20]
 8003ac6:	f001 fdc9 	bl	800565c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d901      	bls.n	8003af2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e050      	b.n	8003b94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da0f      	bge.n	8003b1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	3338      	adds	r3, #56	; 0x38
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	705a      	strb	r2, [r3, #1]
 8003b18:	e00d      	b.n	8003b36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_PCD_EP_SetStall+0x82>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e01e      	b.n	8003b94 <HAL_PCD_EP_SetStall+0xc0>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f002 f96e 	bl	8005e46 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	b2d9      	uxtb	r1, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b84:	461a      	mov	r2, r3
 8003b86:	f002 fb5f 	bl	8006248 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d901      	bls.n	8003bba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e042      	b.n	8003c40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	da0f      	bge.n	8003be2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	3338      	adds	r3, #56	; 0x38
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	705a      	strb	r2, [r3, #1]
 8003be0:	e00f      	b.n	8003c02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_PCD_EP_ClrStall+0x86>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e00e      	b.n	8003c40 <HAL_PCD_EP_ClrStall+0xa4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f002 f976 	bl	8005f22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	3338      	adds	r3, #56	; 0x38
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d901      	bls.n	8003c80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e06c      	b.n	8003d5a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d902      	bls.n	8003c9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3303      	adds	r3, #3
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ca4:	e02b      	b.n	8003cfe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d902      	bls.n	8003cc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3303      	adds	r3, #3
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68d9      	ldr	r1, [r3, #12]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6978      	ldr	r0, [r7, #20]
 8003ce2:	f002 f852 	bl	8005d8a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	441a      	add	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d809      	bhi.n	8003d28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d203      	bcs.n	8003d28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1be      	bne.n	8003ca6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d811      	bhi.n	8003d58 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	6939      	ldr	r1, [r7, #16]
 8003d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d54:	4013      	ands	r3, r2
 8003d56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	333c      	adds	r3, #60	; 0x3c
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	f040 80a0 	bne.w	8003edc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d015      	beq.n	8003dd2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <PCD_EP_OutXfrComplete_int+0x210>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	f240 80dd 	bls.w	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80d7 	beq.w	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dce:	6093      	str	r3, [r2, #8]
 8003dd0:	e0cb      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	461a      	mov	r2, r3
 8003dea:	2320      	movs	r3, #32
 8003dec:	6093      	str	r3, [r2, #8]
 8003dee:	e0bc      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f040 80b7 	bne.w	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a5d      	ldr	r2, [pc, #372]	; (8003f74 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d90f      	bls.n	8003e24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e20:	6093      	str	r3, [r2, #8]
 8003e22:	e0a2      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	0159      	lsls	r1, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	440b      	add	r3, r1
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003e4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4403      	add	r3, r0
 8003e5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4403      	add	r3, r0
 8003e82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4419      	add	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4403      	add	r3, r0
 8003e98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d114      	bne.n	8003ece <PCD_EP_OutXfrComplete_int+0x16a>
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d108      	bne.n	8003ece <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2101      	movs	r1, #1
 8003eca:	f002 f9bd 	bl	8006248 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f004 fb31 	bl	800853c <HAL_PCD_DataOutStageCallback>
 8003eda:	e046      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <PCD_EP_OutXfrComplete_int+0x214>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d124      	bne.n	8003f2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	461a      	mov	r2, r3
 8003efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f00:	6093      	str	r3, [r2, #8]
 8003f02:	e032      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f004 fb08 	bl	800853c <HAL_PCD_DataOutStageCallback>
 8003f2c:	e01d      	b.n	8003f6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d114      	bne.n	8003f5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f56:	461a      	mov	r2, r3
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f002 f975 	bl	8006248 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f004 fae9 	bl	800853c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	4f54300a 	.word	0x4f54300a
 8003f78:	4f54310a 	.word	0x4f54310a

08003f7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	333c      	adds	r3, #60	; 0x3c
 8003f94:	3304      	adds	r3, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a15      	ldr	r2, [pc, #84]	; (8004004 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d90e      	bls.n	8003fd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f004 faa1 	bl	8008518 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d90c      	bls.n	8003ff8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d108      	bne.n	8003ff8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	f002 f928 	bl	8006248 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	4f54300a 	.word	0x4f54300a

08004008 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
 8004014:	4613      	mov	r3, r2
 8004016:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004026:	883b      	ldrh	r3, [r7, #0]
 8004028:	0419      	lsls	r1, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	430a      	orrs	r2, r1
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
 8004034:	e028      	b.n	8004088 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e00d      	b.n	8004066 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	3340      	adds	r3, #64	; 0x40
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4413      	add	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	3301      	adds	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	3b01      	subs	r3, #1
 800406c:	429a      	cmp	r2, r3
 800406e:	d3ec      	bcc.n	800404a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004070:	883b      	ldrh	r3, [r7, #0]
 8004072:	0418      	lsls	r0, r3, #16
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6819      	ldr	r1, [r3, #0]
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	3b01      	subs	r3, #1
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	4302      	orrs	r2, r0
 8004080:	3340      	adds	r3, #64	; 0x40
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e264      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d075      	beq.n	80041da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ee:	4ba3      	ldr	r3, [pc, #652]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00c      	beq.n	8004114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4ba0      	ldr	r3, [pc, #640]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004102:	2b08      	cmp	r3, #8
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b9d      	ldr	r3, [pc, #628]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b99      	ldr	r3, [pc, #612]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e23f      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x74>
 8004136:	4b91      	ldr	r3, [pc, #580]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a90      	ldr	r2, [pc, #576]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x98>
 800414e:	4b8b      	ldr	r3, [pc, #556]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a8a      	ldr	r2, [pc, #552]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a87      	ldr	r2, [pc, #540]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004168:	4b84      	ldr	r3, [pc, #528]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a83      	ldr	r2, [pc, #524]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b81      	ldr	r3, [pc, #516]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a80      	ldr	r2, [pc, #512]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd fd42 	bl	8001c10 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd fd3e 	bl	8001c10 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e204      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b76      	ldr	r3, [pc, #472]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xc0>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fd fd2e 	bl	8001c10 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd fd2a 	bl	8001c10 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1f0      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b6c      	ldr	r3, [pc, #432]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d063      	beq.n	80042ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b62      	ldr	r3, [pc, #392]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11c      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b5f      	ldr	r3, [pc, #380]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	4b5c      	ldr	r3, [pc, #368]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e1c4      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b56      	ldr	r3, [pc, #344]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4952      	ldr	r1, [pc, #328]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004236:	e03a      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b4f      	ldr	r3, [pc, #316]	; (8004380 <HAL_RCC_OscConfig+0x2b0>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd fce3 	bl	8001c10 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424e:	f7fd fcdf 	bl	8001c10 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1a5      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	4b46      	ldr	r3, [pc, #280]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b43      	ldr	r3, [pc, #268]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4940      	ldr	r1, [pc, #256]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCC_OscConfig+0x2b0>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd fcc2 	bl	8001c10 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004290:	f7fd fcbe 	bl	8001c10 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e184      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b36      	ldr	r3, [pc, #216]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d030      	beq.n	800431c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_RCC_OscConfig+0x2b4>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fd fca2 	bl	8001c10 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fd fc9e 	bl	8001c10 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e164      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x200>
 80042ee:	e015      	b.n	800431c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCC_OscConfig+0x2b4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fd fc8b 	bl	8001c10 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fd fc87 	bl	8001c10 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e14d      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80a0 	beq.w	800446a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a0e      	ldr	r2, [pc, #56]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_OscConfig+0x2b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d121      	bne.n	80043aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <HAL_RCC_OscConfig+0x2b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a07      	ldr	r2, [pc, #28]	; (8004388 <HAL_RCC_OscConfig+0x2b8>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004372:	f7fd fc4d 	bl	8001c10 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	e011      	b.n	800439e <HAL_RCC_OscConfig+0x2ce>
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	42470000 	.word	0x42470000
 8004384:	42470e80 	.word	0x42470e80
 8004388:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fd fc40 	bl	8001c10 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e106      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_RCC_OscConfig+0x4e4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x2f0>
 80043b2:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a80      	ldr	r2, [pc, #512]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	e01c      	b.n	80043fa <HAL_RCC_OscConfig+0x32a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x312>
 80043c8:	4b7b      	ldr	r3, [pc, #492]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a7a      	ldr	r2, [pc, #488]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	4b78      	ldr	r3, [pc, #480]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a77      	ldr	r2, [pc, #476]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	e00b      	b.n	80043fa <HAL_RCC_OscConfig+0x32a>
 80043e2:	4b75      	ldr	r3, [pc, #468]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	4a74      	ldr	r2, [pc, #464]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
 80043ee:	4b72      	ldr	r3, [pc, #456]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a71      	ldr	r2, [pc, #452]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d015      	beq.n	800442e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd fc05 	bl	8001c10 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fd fc01 	bl	8001c10 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0c5      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ee      	beq.n	800440a <HAL_RCC_OscConfig+0x33a>
 800442c:	e014      	b.n	8004458 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fd fbef 	bl	8001c10 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004434:	e00a      	b.n	800444c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fd fbeb 	bl	8001c10 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0af      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	4b5a      	ldr	r3, [pc, #360]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ee      	bne.n	8004436 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d105      	bne.n	800446a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445e:	4b56      	ldr	r3, [pc, #344]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a55      	ldr	r2, [pc, #340]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 809b 	beq.w	80045aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004474:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d05c      	beq.n	800453a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d141      	bne.n	800450c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004488:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fd fbbf 	bl	8001c10 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004496:	f7fd fbbb 	bl	8001c10 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e081      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	019b      	lsls	r3, r3, #6
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	3b01      	subs	r3, #1
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	4937      	ldr	r1, [pc, #220]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fd fb94 	bl	8001c10 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fd fb90 	bl	8001c10 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e056      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x41c>
 800450a:	e04e      	b.n	80045aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004512:	f7fd fb7d 	bl	8001c10 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451a:	f7fd fb79 	bl	8001c10 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e03f      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCC_OscConfig+0x44a>
 8004538:	e037      	b.n	80045aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e032      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d028      	beq.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d121      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d11a      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800457c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800457e:	4293      	cmp	r3, r2
 8004580:	d111      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	3b01      	subs	r3, #1
 8004590:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40007000 	.word	0x40007000
 80045b8:	40023800 	.word	0x40023800
 80045bc:	42470060 	.word	0x42470060

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0cc      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b68      	ldr	r3, [pc, #416]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d90c      	bls.n	80045fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800461e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a52      	ldr	r2, [pc, #328]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	494d      	ldr	r1, [pc, #308]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d044      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d003      	beq.n	800467e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b3f      	ldr	r3, [pc, #252]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e067      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b37      	ldr	r3, [pc, #220]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4934      	ldr	r1, [pc, #208]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fd faae 	bl	8001c10 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd faaa 	bl	8001c10 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e04f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d20c      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e032      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4916      	ldr	r1, [pc, #88]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f821 	bl	800478c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490a      	ldr	r1, [pc, #40]	; (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fa0e 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
 8004780:	08008c74 	.word	0x08008c74
 8004784:	20000000 	.word	0x20000000
 8004788:	20000004 	.word	0x20000004

0800478c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	2300      	movs	r3, #0
 800479e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a4:	4b67      	ldr	r3, [pc, #412]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d00d      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x40>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	f200 80bd 	bhi.w	8004930 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047be:	e0b7      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b61      	ldr	r3, [pc, #388]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047c2:	60bb      	str	r3, [r7, #8]
       break;
 80047c4:	e0b7      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c6:	4b61      	ldr	r3, [pc, #388]	; (800494c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047c8:	60bb      	str	r3, [r7, #8]
      break;
 80047ca:	e0b4      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047cc:	4b5d      	ldr	r3, [pc, #372]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d6:	4b5b      	ldr	r3, [pc, #364]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04d      	beq.n	800487e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b58      	ldr	r3, [pc, #352]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	ea02 0800 	and.w	r8, r2, r0
 80047fa:	ea03 0901 	and.w	r9, r3, r1
 80047fe:	4640      	mov	r0, r8
 8004800:	4649      	mov	r1, r9
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	014b      	lsls	r3, r1, #5
 800480c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004810:	0142      	lsls	r2, r0, #5
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	ebb0 0008 	subs.w	r0, r0, r8
 800481a:	eb61 0109 	sbc.w	r1, r1, r9
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	018b      	lsls	r3, r1, #6
 8004828:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800482c:	0182      	lsls	r2, r0, #6
 800482e:	1a12      	subs	r2, r2, r0
 8004830:	eb63 0301 	sbc.w	r3, r3, r1
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f04f 0100 	mov.w	r1, #0
 800483c:	00d9      	lsls	r1, r3, #3
 800483e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004842:	00d0      	lsls	r0, r2, #3
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	eb12 0208 	adds.w	r2, r2, r8
 800484c:	eb43 0309 	adc.w	r3, r3, r9
 8004850:	f04f 0000 	mov.w	r0, #0
 8004854:	f04f 0100 	mov.w	r1, #0
 8004858:	0259      	lsls	r1, r3, #9
 800485a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800485e:	0250      	lsls	r0, r2, #9
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4610      	mov	r0, r2
 8004866:	4619      	mov	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	461a      	mov	r2, r3
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	f7fb fcaa 	bl	80001c8 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e04a      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487e:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	461a      	mov	r2, r3
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	ea02 0400 	and.w	r4, r2, r0
 8004896:	ea03 0501 	and.w	r5, r3, r1
 800489a:	4620      	mov	r0, r4
 800489c:	4629      	mov	r1, r5
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	014b      	lsls	r3, r1, #5
 80048a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048ac:	0142      	lsls	r2, r0, #5
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	1b00      	subs	r0, r0, r4
 80048b4:	eb61 0105 	sbc.w	r1, r1, r5
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	018b      	lsls	r3, r1, #6
 80048c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048c6:	0182      	lsls	r2, r0, #6
 80048c8:	1a12      	subs	r2, r2, r0
 80048ca:	eb63 0301 	sbc.w	r3, r3, r1
 80048ce:	f04f 0000 	mov.w	r0, #0
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	00d9      	lsls	r1, r3, #3
 80048d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048dc:	00d0      	lsls	r0, r2, #3
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	1912      	adds	r2, r2, r4
 80048e4:	eb45 0303 	adc.w	r3, r5, r3
 80048e8:	f04f 0000 	mov.w	r0, #0
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	0299      	lsls	r1, r3, #10
 80048f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048f6:	0290      	lsls	r0, r2, #10
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	461a      	mov	r2, r3
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	f7fb fc5e 	bl	80001c8 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4613      	mov	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	3301      	adds	r3, #1
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	60bb      	str	r3, [r7, #8]
      break;
 800492e:	e002      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004932:	60bb      	str	r3, [r7, #8]
      break;
 8004934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004936:	68bb      	ldr	r3, [r7, #8]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	00f42400 	.word	0x00f42400
 800494c:	007a1200 	.word	0x007a1200

08004950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_RCC_GetHCLKFreq+0x14>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000000 	.word	0x20000000

08004968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800496c:	f7ff fff0 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0a9b      	lsrs	r3, r3, #10
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4903      	ldr	r1, [pc, #12]	; (800498c <HAL_RCC_GetPCLK1Freq+0x24>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	08008c84 	.word	0x08008c84

08004990 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d035      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049b8:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049be:	f7fd f927 	bl	8001c10 <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049c6:	f7fd f923 	bl	8001c10 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e0b0      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d8:	4b5b      	ldr	r3, [pc, #364]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f0      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	019a      	lsls	r2, r3, #6
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	071b      	lsls	r3, r3, #28
 80049f0:	4955      	ldr	r1, [pc, #340]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049f8:	4b52      	ldr	r3, [pc, #328]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049fe:	f7fd f907 	bl	8001c10 <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a06:	f7fd f903 	bl	8001c10 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e090      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a18:	4b4b      	ldr	r3, [pc, #300]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8083 	beq.w	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	4b44      	ldr	r3, [pc, #272]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	4a43      	ldr	r2, [pc, #268]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6413      	str	r3, [r2, #64]	; 0x40
 8004a42:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3e      	ldr	r2, [pc, #248]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a5a:	f7fd f8d9 	bl	8001c10 <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a62:	f7fd f8d5 	bl	8001c10 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e062      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a74:	4b35      	ldr	r3, [pc, #212]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a80:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d02f      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d028      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa8:	4b29      	ldr	r3, [pc, #164]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ab4:	4a24      	ldr	r2, [pc, #144]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d114      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fd f8a3 	bl	8001c10 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fd f89f 	bl	8001c10 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e02a      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ee      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afc:	d10d      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b12:	490d      	ldr	r1, [pc, #52]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]
 8004b18:	e005      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b24:	6093      	str	r3, [r2, #8]
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b32:	4905      	ldr	r1, [pc, #20]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	42470068 	.word	0x42470068
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	42470e40 	.word	0x42470e40

08004b54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d13e      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d12f      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b8a:	617b      	str	r3, [r7, #20]
          break;
 8004b8c:	e02f      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9a:	d108      	bne.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b9c:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	e007      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bae:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb6:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd8:	0f1b      	lsrs	r3, r3, #28
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]
          break;
 8004be6:	e002      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
          break;
 8004bec:	bf00      	nop
        }
      }
      break;
 8004bee:	bf00      	nop
    }
  }
  return frequency;
 8004bf0:	697b      	ldr	r3, [r7, #20]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	00bb8000 	.word	0x00bb8000
 8004c08:	007a1200 	.word	0x007a1200
 8004c0c:	00f42400 	.word	0x00f42400

08004c10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e07b      	b.n	8004d1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d108      	bne.n	8004c3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c32:	d009      	beq.n	8004c48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	61da      	str	r2, [r3, #28]
 8004c3a:	e005      	b.n	8004c48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fe94 	bl	8001990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	ea42 0103 	orr.w	r1, r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	f003 0104 	and.w	r1, r3, #4
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	f003 0210 	and.w	r2, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d22:	b084      	sub	sp, #16
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	f107 001c 	add.w	r0, r7, #28
 8004d30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d122      	bne.n	8004d80 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fac5 	bl	8006304 <USB_CoreReset>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
 8004d7e:	e01a      	b.n	8004db6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f001 fab9 	bl	8006304 <USB_CoreReset>
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
 8004da8:	e005      	b.n	8004db6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d10b      	bne.n	8004dd4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f043 0206 	orr.w	r2, r3, #6
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004de0:	b004      	add	sp, #16
 8004de2:	4770      	bx	lr

08004de4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d165      	bne.n	8004ec4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4a41      	ldr	r2, [pc, #260]	; (8004f00 <USB_SetTurnaroundTime+0x11c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d906      	bls.n	8004e0e <USB_SetTurnaroundTime+0x2a>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4a40      	ldr	r2, [pc, #256]	; (8004f04 <USB_SetTurnaroundTime+0x120>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d202      	bcs.n	8004e0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e08:	230f      	movs	r3, #15
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e062      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4a3c      	ldr	r2, [pc, #240]	; (8004f04 <USB_SetTurnaroundTime+0x120>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d306      	bcc.n	8004e24 <USB_SetTurnaroundTime+0x40>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a3b      	ldr	r2, [pc, #236]	; (8004f08 <USB_SetTurnaroundTime+0x124>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d202      	bcs.n	8004e24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e1e:	230e      	movs	r3, #14
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e057      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4a38      	ldr	r2, [pc, #224]	; (8004f08 <USB_SetTurnaroundTime+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d306      	bcc.n	8004e3a <USB_SetTurnaroundTime+0x56>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4a37      	ldr	r2, [pc, #220]	; (8004f0c <USB_SetTurnaroundTime+0x128>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d202      	bcs.n	8004e3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e34:	230d      	movs	r3, #13
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e04c      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4a33      	ldr	r2, [pc, #204]	; (8004f0c <USB_SetTurnaroundTime+0x128>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d306      	bcc.n	8004e50 <USB_SetTurnaroundTime+0x6c>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a32      	ldr	r2, [pc, #200]	; (8004f10 <USB_SetTurnaroundTime+0x12c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d802      	bhi.n	8004e50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e041      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <USB_SetTurnaroundTime+0x12c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d906      	bls.n	8004e66 <USB_SetTurnaroundTime+0x82>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4a2e      	ldr	r2, [pc, #184]	; (8004f14 <USB_SetTurnaroundTime+0x130>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d802      	bhi.n	8004e66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e60:	230b      	movs	r3, #11
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e036      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <USB_SetTurnaroundTime+0x130>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d906      	bls.n	8004e7c <USB_SetTurnaroundTime+0x98>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a29      	ldr	r2, [pc, #164]	; (8004f18 <USB_SetTurnaroundTime+0x134>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d802      	bhi.n	8004e7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e76:	230a      	movs	r3, #10
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e02b      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <USB_SetTurnaroundTime+0x134>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d906      	bls.n	8004e92 <USB_SetTurnaroundTime+0xae>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <USB_SetTurnaroundTime+0x138>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d202      	bcs.n	8004e92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e8c:	2309      	movs	r3, #9
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e020      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4a21      	ldr	r2, [pc, #132]	; (8004f1c <USB_SetTurnaroundTime+0x138>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d306      	bcc.n	8004ea8 <USB_SetTurnaroundTime+0xc4>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <USB_SetTurnaroundTime+0x13c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d802      	bhi.n	8004ea8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e015      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <USB_SetTurnaroundTime+0x13c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d906      	bls.n	8004ebe <USB_SetTurnaroundTime+0xda>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <USB_SetTurnaroundTime+0x140>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d202      	bcs.n	8004ebe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004eb8:	2307      	movs	r3, #7
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e00a      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ebe:	2306      	movs	r3, #6
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e007      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004eca:	2309      	movs	r3, #9
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e001      	b.n	8004ed4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ed0:	2309      	movs	r3, #9
 8004ed2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	00d8acbf 	.word	0x00d8acbf
 8004f04:	00e4e1c0 	.word	0x00e4e1c0
 8004f08:	00f42400 	.word	0x00f42400
 8004f0c:	01067380 	.word	0x01067380
 8004f10:	011a499f 	.word	0x011a499f
 8004f14:	01312cff 	.word	0x01312cff
 8004f18:	014ca43f 	.word	0x014ca43f
 8004f1c:	016e3600 	.word	0x016e3600
 8004f20:	01a6ab1f 	.word	0x01a6ab1f
 8004f24:	01e84800 	.word	0x01e84800

08004f28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f043 0201 	orr.w	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 0201 	bic.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d106      	bne.n	8004f98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	e00b      	b.n	8004fb0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	e001      	b.n	8004fb0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e003      	b.n	8004fb8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fb0:	2032      	movs	r0, #50	; 0x32
 8004fb2:	f7fc fe39 	bl	8001c28 <HAL_Delay>

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e009      	b.n	8004ff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3340      	adds	r3, #64	; 0x40
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b0e      	cmp	r3, #14
 8004ff8:	d9f2      	bls.n	8004fe0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11c      	bne.n	800503a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800500e:	f043 0302 	orr.w	r3, r3, #2
 8005012:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
 8005038:	e00b      	b.n	8005052 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005058:	461a      	mov	r2, r3
 800505a:	2300      	movs	r3, #0
 800505c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	4619      	mov	r1, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	461a      	mov	r2, r3
 800506e:	680b      	ldr	r3, [r1, #0]
 8005070:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10c      	bne.n	8005092 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800507e:	2100      	movs	r1, #0
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f949 	bl	8005318 <USB_SetDevSpeed>
 8005086:	e008      	b.n	800509a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005088:	2101      	movs	r1, #1
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f944 	bl	8005318 <USB_SetDevSpeed>
 8005090:	e003      	b.n	800509a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005092:	2103      	movs	r1, #3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f93f 	bl	8005318 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800509a:	2110      	movs	r1, #16
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f8f3 	bl	8005288 <USB_FlushTxFifo>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f911 	bl	80052d4 <USB_FlushRxFifo>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	461a      	mov	r2, r3
 80050c4:	2300      	movs	r3, #0
 80050c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	461a      	mov	r2, r3
 80050d0:	2300      	movs	r3, #0
 80050d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	e043      	b.n	800516e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fc:	d118      	bne.n	8005130 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	461a      	mov	r2, r3
 8005112:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e013      	b.n	8005142 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	461a      	mov	r2, r3
 8005128:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e008      	b.n	8005142 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	461a      	mov	r2, r3
 800513e:	2300      	movs	r3, #0
 8005140:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	461a      	mov	r2, r3
 8005150:	2300      	movs	r3, #0
 8005152:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005166:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3301      	adds	r3, #1
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	429a      	cmp	r2, r3
 8005174:	d3b7      	bcc.n	80050e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	e043      	b.n	8005204 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800518e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005192:	d118      	bne.n	80051c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	461a      	mov	r2, r3
 80051a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e013      	b.n	80051d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	461a      	mov	r2, r3
 80051be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e008      	b.n	80051d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	461a      	mov	r2, r3
 80051e6:	2300      	movs	r3, #0
 80051e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	429a      	cmp	r2, r3
 800520a:	d3b7      	bcc.n	800517c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800521e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800522c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f043 0210 	orr.w	r2, r3, #16
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <USB_DevInit+0x2c4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800524c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f043 0208 	orr.w	r2, r3, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d107      	bne.n	8005274 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800526c:	f043 0304 	orr.w	r3, r3, #4
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005280:	b004      	add	sp, #16
 8005282:	4770      	bx	lr
 8005284:	803c3800 	.word	0x803c3800

08005288 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	019b      	lsls	r3, r3, #6
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3301      	adds	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <USB_FlushTxFifo+0x48>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e006      	b.n	80052c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d0f0      	beq.n	80052a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	00030d40 	.word	0x00030d40

080052d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2210      	movs	r2, #16
 80052e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3301      	adds	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <USB_FlushRxFifo+0x40>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e006      	b.n	8005306 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b10      	cmp	r3, #16
 8005302:	d0f0      	beq.n	80052e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	00030d40 	.word	0x00030d40

08005318 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800534a:	b480      	push	{r7}
 800534c:	b087      	sub	sp, #28
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0306 	and.w	r3, r3, #6
 8005362:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
 800536e:	e00a      	b.n	8005386 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d002      	beq.n	800537c <USB_GetDevSpeed+0x32>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b06      	cmp	r3, #6
 800537a:	d102      	bne.n	8005382 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800537c:	2302      	movs	r3, #2
 800537e:	75fb      	strb	r3, [r7, #23]
 8005380:	e001      	b.n	8005386 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005382:	230f      	movs	r3, #15
 8005384:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d13a      	bne.n	8005426 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	2101      	movs	r1, #1
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d155      	bne.n	8005494 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005404:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	059b      	lsls	r3, r3, #22
 800540a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800540c:	4313      	orrs	r3, r2
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e036      	b.n	8005494 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	2101      	movs	r1, #1
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	041b      	lsls	r3, r3, #16
 800543e:	68f9      	ldr	r1, [r7, #12]
 8005440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005444:	4313      	orrs	r3, r2
 8005446:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d11a      	bne.n	8005494 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800547a:	430b      	orrs	r3, r1
 800547c:	4313      	orrs	r3, r2
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005492:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	785b      	ldrb	r3, [r3, #1]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d161      	bne.n	8005584 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d6:	d11f      	bne.n	8005518 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005516:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	2101      	movs	r1, #1
 800552a:	fa01 f303 	lsl.w	r3, r1, r3
 800552e:	b29b      	uxth	r3, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005538:	4013      	ands	r3, r2
 800553a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	2101      	movs	r1, #1
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	b29b      	uxth	r3, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800555c:	4013      	ands	r3, r2
 800555e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	0159      	lsls	r1, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	440b      	add	r3, r1
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	4619      	mov	r1, r3
 800557c:	4b35      	ldr	r3, [pc, #212]	; (8005654 <USB_DeactivateEndpoint+0x1b0>)
 800557e:	4013      	ands	r3, r2
 8005580:	600b      	str	r3, [r1, #0]
 8005582:	e060      	b.n	8005646 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559a:	d11f      	bne.n	80055dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	43db      	mvns	r3, r3
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055fc:	4013      	ands	r3, r2
 80055fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	2101      	movs	r1, #1
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	43db      	mvns	r3, r3
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005620:	4013      	ands	r3, r2
 8005622:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	0159      	lsls	r1, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	440b      	add	r3, r1
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	4619      	mov	r1, r3
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <USB_DeactivateEndpoint+0x1b4>)
 8005642:	4013      	ands	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	ec337800 	.word	0xec337800
 8005658:	eff37800 	.word	0xeff37800

0800565c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 815c 	bne.w	8005936 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d132      	bne.n	80056ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e4:	0cdb      	lsrs	r3, r3, #19
 80056e6:	04db      	lsls	r3, r3, #19
 80056e8:	6113      	str	r3, [r2, #16]
 80056ea:	e074      	b.n	80057d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	0cdb      	lsrs	r3, r3, #19
 8005708:	04db      	lsls	r3, r3, #19
 800570a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005726:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800572a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800572e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6959      	ldr	r1, [r3, #20]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	440b      	add	r3, r1
 8005748:	1e59      	subs	r1, r3, #1
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005752:	04d9      	lsls	r1, r3, #19
 8005754:	4b9d      	ldr	r3, [pc, #628]	; (80059cc <USB_EPStartXfer+0x370>)
 8005756:	400b      	ands	r3, r1
 8005758:	69b9      	ldr	r1, [r7, #24]
 800575a:	0148      	lsls	r0, r1, #5
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	4401      	add	r1, r0
 8005760:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005764:	4313      	orrs	r3, r2
 8005766:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577e:	69b9      	ldr	r1, [r7, #24]
 8005780:	0148      	lsls	r0, r1, #5
 8005782:	69f9      	ldr	r1, [r7, #28]
 8005784:	4401      	add	r1, r0
 8005786:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800578a:	4313      	orrs	r3, r2
 800578c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	78db      	ldrb	r3, [r3, #3]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d11f      	bne.n	80057d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d14b      	bne.n	8005874 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	78db      	ldrb	r3, [r3, #3]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d128      	bne.n	8005852 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e00f      	b.n	8005852 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005850:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	e12f      	b.n	8005ad4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005892:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	78db      	ldrb	r3, [r3, #3]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d015      	beq.n	80058c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8117 	beq.w	8005ad4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	2101      	movs	r1, #1
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c2:	4313      	orrs	r3, r2
 80058c4:	634b      	str	r3, [r1, #52]	; 0x34
 80058c6:	e105      	b.n	8005ad4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d110      	bne.n	80058fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e00f      	b.n	800591a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005918:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	781a      	ldrb	r2, [r3, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	b298      	uxth	r0, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	4603      	mov	r3, r0
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fa2b 	bl	8005d8a <USB_WritePacket>
 8005934:	e0ce      	b.n	8005ad4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005950:	0cdb      	lsrs	r3, r3, #19
 8005952:	04db      	lsls	r3, r3, #19
 8005954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005978:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d126      	bne.n	80059d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	0148      	lsls	r0, r1, #5
 800599c:	69f9      	ldr	r1, [r7, #28]
 800599e:	4401      	add	r1, r0
 80059a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059c6:	6113      	str	r3, [r2, #16]
 80059c8:	e036      	b.n	8005a38 <USB_EPStartXfer+0x3dc>
 80059ca:	bf00      	nop
 80059cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4413      	add	r3, r2
 80059da:	1e5a      	subs	r2, r3, #1
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	8afb      	ldrh	r3, [r7, #22]
 80059f6:	04d9      	lsls	r1, r3, #19
 80059f8:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <USB_EPStartXfer+0x484>)
 80059fa:	400b      	ands	r3, r1
 80059fc:	69b9      	ldr	r1, [r7, #24]
 80059fe:	0148      	lsls	r0, r1, #5
 8005a00:	69f9      	ldr	r1, [r7, #28]
 8005a02:	4401      	add	r1, r0
 8005a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	8af9      	ldrh	r1, [r7, #22]
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a28:	69b9      	ldr	r1, [r7, #24]
 8005a2a:	0148      	lsls	r0, r1, #5
 8005a2c:	69f9      	ldr	r1, [r7, #28]
 8005a2e:	4401      	add	r1, r0
 8005a30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a34:	4313      	orrs	r3, r2
 8005a36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d10d      	bne.n	8005a5a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68d9      	ldr	r1, [r3, #12]
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	460a      	mov	r2, r1
 8005a58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d128      	bne.n	8005ab4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d110      	bne.n	8005a94 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00f      	b.n	8005ab4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	1ff80000 	.word	0x1ff80000

08005ae4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f040 80cd 	bne.w	8005ca0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d132      	bne.n	8005b74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6c:	0cdb      	lsrs	r3, r3, #19
 8005b6e:	04db      	lsls	r3, r3, #19
 8005b70:	6113      	str	r3, [r2, #16]
 8005b72:	e04e      	b.n	8005c12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8e:	0cdb      	lsrs	r3, r3, #19
 8005b90:	04db      	lsls	r3, r3, #19
 8005b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	0148      	lsls	r0, r1, #5
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	4401      	add	r1, r0
 8005c0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d11e      	bne.n	8005c56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e092      	b.n	8005d7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d07e      	beq.n	8005d7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	2101      	movs	r1, #1
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	6979      	ldr	r1, [r7, #20]
 8005c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	634b      	str	r3, [r1, #52]	; 0x34
 8005c9e:	e06d      	b.n	8005d7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cba:	0cdb      	lsrs	r3, r3, #19
 8005cbc:	04db      	lsls	r3, r3, #19
 8005cbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d2a:	6939      	ldr	r1, [r7, #16]
 8005d2c:	0148      	lsls	r0, r1, #5
 8005d2e:	6979      	ldr	r1, [r7, #20]
 8005d30:	4401      	add	r1, r0
 8005d32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d36:	4313      	orrs	r3, r2
 8005d38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d10d      	bne.n	8005d5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d009      	beq.n	8005d5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68d9      	ldr	r1, [r3, #12]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	460a      	mov	r2, r1
 8005d5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b089      	sub	sp, #36	; 0x24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	4611      	mov	r1, r2
 8005d96:	461a      	mov	r2, r3
 8005d98:	460b      	mov	r3, r1
 8005d9a:	71fb      	strb	r3, [r7, #7]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005da8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d11a      	bne.n	8005de6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005db0:	88bb      	ldrh	r3, [r7, #4]
 8005db2:	3303      	adds	r3, #3
 8005db4:	089b      	lsrs	r3, r3, #2
 8005db6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e00f      	b.n	8005dde <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	031a      	lsls	r2, r3, #12
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dca:	461a      	mov	r2, r3
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d3eb      	bcc.n	8005dbe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3724      	adds	r7, #36	; 0x24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b089      	sub	sp, #36	; 0x24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	3303      	adds	r3, #3
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e00b      	b.n	8005e30 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	3304      	adds	r3, #4
 8005e28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d3ef      	bcc.n	8005e18 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e38:	69fb      	ldr	r3, [r7, #28]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3724      	adds	r7, #36	; 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b085      	sub	sp, #20
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d12c      	bne.n	8005ebc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	db12      	blt.n	8005e9a <USB_EPSetStall+0x54>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00f      	beq.n	8005e9a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e98:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e02b      	b.n	8005f14 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	db12      	blt.n	8005ef4 <USB_EPSetStall+0xae>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00f      	beq.n	8005ef4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d128      	bne.n	8005f90 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	78db      	ldrb	r3, [r3, #3]
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d003      	beq.n	8005f6e <USB_EPClearStall+0x4c>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d138      	bne.n	8005fe0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	e027      	b.n	8005fe0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005faa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d003      	beq.n	8005fc0 <USB_EPClearStall+0x9e>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d10f      	bne.n	8005fe0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fde:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006010:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006028:	4313      	orrs	r3, r2
 800602a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006054:	f023 0303 	bic.w	r3, r3, #3
 8006058:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006068:	f023 0302 	bic.w	r3, r3, #2
 800606c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006096:	f023 0303 	bic.w	r3, r3, #3
 800609a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060aa:	f043 0302 	orr.w	r3, r3, #2
 80060ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4013      	ands	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060d6:	68fb      	ldr	r3, [r7, #12]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	0c1b      	lsrs	r3, r3, #16
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	b29b      	uxth	r3, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	4013      	ands	r3, r2
 8006178:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800617a:	68bb      	ldr	r3, [r7, #8]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061aa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
 80061b8:	01db      	lsls	r3, r3, #7
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4013      	ands	r3, r2
 80061d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061d6:	68bb      	ldr	r3, [r7, #8]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0301 	and.w	r3, r3, #1
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800621e:	f023 0307 	bic.w	r3, r3, #7
 8006222:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006236:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
	...

08006248 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	460b      	mov	r3, r1
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	333c      	adds	r3, #60	; 0x3c
 800625e:	3304      	adds	r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4a26      	ldr	r2, [pc, #152]	; (8006300 <USB_EP0_OutStart+0xb8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d90a      	bls.n	8006282 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627c:	d101      	bne.n	8006282 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e037      	b.n	80062f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006288:	461a      	mov	r2, r3
 800628a:	2300      	movs	r3, #0
 800628c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b0:	f043 0318 	orr.w	r3, r3, #24
 80062b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d10f      	bne.n	80062f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	461a      	mov	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	4f54300a 	.word	0x4f54300a

08006304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a13      	ldr	r2, [pc, #76]	; (8006368 <USB_CoreReset+0x64>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d901      	bls.n	8006322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e01b      	b.n	800635a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	daf2      	bge.n	8006310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f043 0201 	orr.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4a09      	ldr	r2, [pc, #36]	; (8006368 <USB_CoreReset+0x64>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d901      	bls.n	800634c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e006      	b.n	800635a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b01      	cmp	r3, #1
 8006356:	d0f0      	beq.n	800633a <USB_CoreReset+0x36>

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	00030d40 	.word	0x00030d40

0800636c <cobs_encode>:
 *
 * returns:        A struct containing the success status of the encoding
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result cobs_encode(void *dst_buf_ptr, size_t dst_buf_len, const void *src_ptr, size_t src_len) {
 800636c:	b480      	push	{r7}
 800636e:	b08f      	sub	sp, #60	; 0x3c
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  cobs_encode_result result = {0, COBS_ENCODE_OK};
 800637a:	2300      	movs	r3, #0
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	2300      	movs	r3, #0
 8006380:	753b      	strb	r3, [r7, #20]
  const uint8_t *src_read_ptr = src_ptr;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
  const uint8_t *src_end_ptr = src_read_ptr + src_len;
 8006386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638a:	4413      	add	r3, r2
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *dst_buf_start_ptr = dst_buf_ptr;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	623b      	str	r3, [r7, #32]
  uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4413      	add	r3, r2
 8006398:	61fb      	str	r3, [r7, #28]
  uint8_t *dst_code_write_ptr = dst_buf_ptr;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t *dst_write_ptr = dst_code_write_ptr + 1;
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	3301      	adds	r3, #1
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t src_byte = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	76fb      	strb	r3, [r7, #27]
  uint8_t search_len = 1;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* First, do a NULL pointer check and return immediately if it fails. */
  if ((dst_buf_ptr == NULL) || (src_ptr == NULL)) {
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <cobs_encode+0x4e>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <cobs_encode+0x64>
    result.status = COBS_ENCODE_NULL_POINTER;
 80063ba:	2301      	movs	r3, #1
 80063bc:	753b      	strb	r3, [r7, #20]
    return result;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	461a      	mov	r2, r3
 80063c2:	f107 0310 	add.w	r3, r7, #16
 80063c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80063ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80063ce:	e05f      	b.n	8006490 <cobs_encode+0x124>
  }

  if (src_len != 0) {
 80063d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d040      	beq.n	8006458 <cobs_encode+0xec>
    /* Iterate over the source bytes */
    for (;;) {
      /* Check for running out of output buffer space */
      if (dst_write_ptr >= dst_buf_end_ptr) {
 80063d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d305      	bcc.n	80063ea <cobs_encode+0x7e>
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 80063de:	7d3b      	ldrb	r3, [r7, #20]
 80063e0:	f043 0302 	orr.w	r3, r3, #2
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	753b      	strb	r3, [r7, #20]
        break;
 80063e8:	e036      	b.n	8006458 <cobs_encode+0xec>
      }

      src_byte = *src_read_ptr++;
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	637a      	str	r2, [r7, #52]	; 0x34
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	76fb      	strb	r3, [r7, #27]
      if (src_byte == 0) {
 80063f4:	7efb      	ldrb	r3, [r7, #27]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <cobs_encode+0xae>
        /* We found a zero byte */
        *dst_code_write_ptr = search_len;
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006400:	701a      	strb	r2, [r3, #0]
        dst_code_write_ptr = dst_write_ptr++;
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006408:	633b      	str	r3, [r7, #48]	; 0x30
        search_len = 1;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (src_read_ptr >= src_end_ptr) {
 8006410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	429a      	cmp	r2, r3
 8006416:	d3de      	bcc.n	80063d6 <cobs_encode+0x6a>
          break;
 8006418:	e01e      	b.n	8006458 <cobs_encode+0xec>
        }
      } else {
        /* Copy the non-zero byte to the destination buffer */
        *dst_write_ptr++ = src_byte;
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006420:	7efa      	ldrb	r2, [r7, #27]
 8006422:	701a      	strb	r2, [r3, #0]
        search_len++;
 8006424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006428:	3301      	adds	r3, #1
 800642a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (src_read_ptr >= src_end_ptr) {
 800642e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	429a      	cmp	r2, r3
 8006434:	d20f      	bcs.n	8006456 <cobs_encode+0xea>
          break;
        }
        if (search_len == 0xFF) {
 8006436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800643a:	2bff      	cmp	r3, #255	; 0xff
 800643c:	d1cb      	bne.n	80063d6 <cobs_encode+0x6a>
          /* We have a long string of non-zero bytes, so we need
           * to write out a length code of 0xFF. */
          *dst_code_write_ptr = search_len;
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006444:	701a      	strb	r2, [r3, #0]
          dst_code_write_ptr = dst_write_ptr++;
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800644c:	633b      	str	r3, [r7, #48]	; 0x30
          search_len = 1;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (dst_write_ptr >= dst_buf_end_ptr) {
 8006454:	e7bf      	b.n	80063d6 <cobs_encode+0x6a>
          break;
 8006456:	bf00      	nop

  /* We've reached the end of the source data (or possibly run out of output buffer)
   * Finalise the remaining output. In particular, write the code (length) byte.
   * Update the pointer to calculate the final output length.
   */
  if (dst_code_write_ptr >= dst_buf_end_ptr) {
 8006458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	429a      	cmp	r2, r3
 800645e:	d307      	bcc.n	8006470 <cobs_encode+0x104>
    /* We've run out of output buffer to write the code byte. */
    result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8006460:	7d3b      	ldrb	r3, [r7, #20]
 8006462:	f043 0302 	orr.w	r3, r3, #2
 8006466:	b2db      	uxtb	r3, r3
 8006468:	753b      	strb	r3, [r7, #20]
    dst_write_ptr = dst_buf_end_ptr;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646e:	e003      	b.n	8006478 <cobs_encode+0x10c>
  } else {
    /* Write the last code (length) byte. */
    *dst_code_write_ptr = search_len;
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006476:	701a      	strb	r2, [r3, #0]
  }

  /* Calculate the output length, from the value of dst_code_write_ptr */
  result.out_len = dst_write_ptr - dst_buf_start_ptr;
 8006478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	613b      	str	r3, [r7, #16]

  return result;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	461a      	mov	r2, r3
 8006484:	f107 0310 	add.w	r3, r7, #16
 8006488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800648c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	373c      	adds	r7, #60	; 0x3c
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <cobs_decode>:
 *
 * returns:        A struct containing the success status of the decoding
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_decode_result cobs_decode(void *dst_buf_ptr, size_t dst_buf_len, const void *src_ptr, size_t src_len) {
 800649c:	b480      	push	{r7}
 800649e:	b08f      	sub	sp, #60	; 0x3c
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  cobs_decode_result result = {0, COBS_DECODE_OK};
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	2300      	movs	r3, #0
 80064b0:	753b      	strb	r3, [r7, #20]
  const uint8_t *src_read_ptr = src_ptr;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
  const uint8_t *src_end_ptr = src_read_ptr + src_len;
 80064b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ba:	4413      	add	r3, r2
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t *dst_buf_start_ptr = dst_buf_ptr;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 80064c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4413      	add	r3, r2
 80064c8:	623b      	str	r3, [r7, #32]
  uint8_t *dst_write_ptr = dst_buf_ptr;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t src_byte;
  uint8_t i;
  uint8_t len_code;

  /* First, do a NULL pointer check and return immediately if it fails. */
  if ((dst_buf_ptr == NULL) || (src_ptr == NULL)) {
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <cobs_decode+0x3e>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <cobs_decode+0x54>
    result.status = COBS_DECODE_NULL_POINTER;
 80064da:	2301      	movs	r3, #1
 80064dc:	753b      	strb	r3, [r7, #20]
    return result;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f107 0310 	add.w	r3, r7, #16
 80064e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80064ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80064ee:	e07e      	b.n	80065ee <cobs_decode+0x152>
  }

  if (src_len != 0) {
 80064f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d06f      	beq.n	80065d6 <cobs_decode+0x13a>
    for (;;) {
      len_code = *src_read_ptr++;
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	637a      	str	r2, [r7, #52]	; 0x34
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      if (len_code == 0) {
 8006502:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006506:	2b00      	cmp	r3, #0
 8006508:	d105      	bne.n	8006516 <cobs_decode+0x7a>
        result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 800650a:	7d3b      	ldrb	r3, [r7, #20]
 800650c:	f043 0304 	orr.w	r3, r3, #4
 8006510:	b2db      	uxtb	r3, r3
 8006512:	753b      	strb	r3, [r7, #20]
        break;
 8006514:	e05f      	b.n	80065d6 <cobs_decode+0x13a>
      }
      len_code--;
 8006516:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800651a:	3b01      	subs	r3, #1
 800651c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      /* Check length code against remaining input bytes */
      remaining_bytes = src_end_ptr - src_read_ptr;
 8006520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	61fb      	str	r3, [r7, #28]
      if (len_code > remaining_bytes) {
 8006528:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	429a      	cmp	r2, r3
 8006530:	d207      	bcs.n	8006542 <cobs_decode+0xa6>
        result.status |= COBS_DECODE_INPUT_TOO_SHORT;
 8006532:	7d3b      	ldrb	r3, [r7, #20]
 8006534:	f043 0308 	orr.w	r3, r3, #8
 8006538:	b2db      	uxtb	r3, r3
 800653a:	753b      	strb	r3, [r7, #20]
        len_code = remaining_bytes;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

      /* Check length code against remaining output buffer space */
      remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
 8006542:	6a3a      	ldr	r2, [r7, #32]
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	61fb      	str	r3, [r7, #28]
      if (len_code > remaining_bytes) {
 800654a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	429a      	cmp	r2, r3
 8006552:	d207      	bcs.n	8006564 <cobs_decode+0xc8>
        result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 8006554:	7d3b      	ldrb	r3, [r7, #20]
 8006556:	f043 0302 	orr.w	r3, r3, #2
 800655a:	b2db      	uxtb	r3, r3
 800655c:	753b      	strb	r3, [r7, #20]
        len_code = remaining_bytes;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

      for (i = len_code; i != 0; i--) {
 8006564:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800656c:	e016      	b.n	800659c <cobs_decode+0x100>
        src_byte = *src_read_ptr++;
 800656e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	637a      	str	r2, [r7, #52]	; 0x34
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	76fb      	strb	r3, [r7, #27]
        if (src_byte == 0) {
 8006578:	7efb      	ldrb	r3, [r7, #27]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <cobs_decode+0xec>
          result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 800657e:	7d3b      	ldrb	r3, [r7, #20]
 8006580:	f043 0304 	orr.w	r3, r3, #4
 8006584:	b2db      	uxtb	r3, r3
 8006586:	753b      	strb	r3, [r7, #20]
        }
        *dst_write_ptr++ = src_byte;
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	633a      	str	r2, [r7, #48]	; 0x30
 800658e:	7efa      	ldrb	r2, [r7, #27]
 8006590:	701a      	strb	r2, [r3, #0]
      for (i = len_code; i != 0; i--) {
 8006592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006596:	3b01      	subs	r3, #1
 8006598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800659c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e4      	bne.n	800656e <cobs_decode+0xd2>
      }

      if (src_read_ptr >= src_end_ptr) {
 80065a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d213      	bcs.n	80065d4 <cobs_decode+0x138>
        break;
      }

      /* Add a zero to the end */
      if (len_code != 0xFE) {
 80065ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065b0:	2bfe      	cmp	r3, #254	; 0xfe
 80065b2:	d0a0      	beq.n	80064f6 <cobs_decode+0x5a>
        if (dst_write_ptr >= dst_buf_end_ptr) {
 80065b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d305      	bcc.n	80065c8 <cobs_decode+0x12c>
          result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 80065bc:	7d3b      	ldrb	r3, [r7, #20]
 80065be:	f043 0302 	orr.w	r3, r3, #2
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	753b      	strb	r3, [r7, #20]
          break;
 80065c6:	e006      	b.n	80065d6 <cobs_decode+0x13a>
        }
        *dst_write_ptr++ = 0;
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	633a      	str	r2, [r7, #48]	; 0x30
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
      len_code = *src_read_ptr++;
 80065d2:	e790      	b.n	80064f6 <cobs_decode+0x5a>
        break;
 80065d4:	bf00      	nop
      }
    }
  }

  result.out_len = dst_write_ptr - dst_buf_start_ptr;
 80065d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	613b      	str	r3, [r7, #16]

  return result;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	461a      	mov	r2, r3
 80065e2:	f107 0310 	add.w	r3, r7, #16
 80065e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80065ea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	373c      	adds	r7, #60	; 0x3c
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <_Z8crc_mathhh>:
// callers use crc8_byte

#ifdef CRC_MATH
// A basic implementation of CRC8 using only arithmetic

uint8_t crc_math(uint8_t data, uint8_t crc) {
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	4603      	mov	r3, r0
 8006602:	460a      	mov	r2, r1
 8006604:	71fb      	strb	r3, [r7, #7]
 8006606:	4613      	mov	r3, r2
 8006608:	71bb      	strb	r3, [r7, #6]
  uint8_t i = (data ^ crc);
 800660a:	79fa      	ldrb	r2, [r7, #7]
 800660c:	79bb      	ldrb	r3, [r7, #6]
 800660e:	4053      	eors	r3, r2
 8006610:	73fb      	strb	r3, [r7, #15]

  crc = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	71bb      	strb	r3, [r7, #6]

  if (i & 1)
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <_Z8crc_mathhh+0x2e>
    crc ^= 0x5e;
 8006620:	79bb      	ldrb	r3, [r7, #6]
 8006622:	f083 035e 	eor.w	r3, r3, #94	; 0x5e
 8006626:	71bb      	strb	r3, [r7, #6]
  if (i & 2)
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <_Z8crc_mathhh+0x42>
    crc ^= 0xbc;
 8006632:	79bb      	ldrb	r3, [r7, #6]
 8006634:	f083 0343 	eor.w	r3, r3, #67	; 0x43
 8006638:	43db      	mvns	r3, r3
 800663a:	71bb      	strb	r3, [r7, #6]
  if (i & 4)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <_Z8crc_mathhh+0x54>
    crc ^= 0x61;
 8006646:	79bb      	ldrb	r3, [r7, #6]
 8006648:	f083 0361 	eor.w	r3, r3, #97	; 0x61
 800664c:	71bb      	strb	r3, [r7, #6]
  if (i & 8)
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d004      	beq.n	8006662 <_Z8crc_mathhh+0x68>
    crc ^= 0xc2;
 8006658:	79bb      	ldrb	r3, [r7, #6]
 800665a:	f083 033d 	eor.w	r3, r3, #61	; 0x3d
 800665e:	43db      	mvns	r3, r3
 8006660:	71bb      	strb	r3, [r7, #6]
  if (i & 0x10)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <_Z8crc_mathhh+0x7c>
    crc ^= 0x9d;
 800666c:	79bb      	ldrb	r3, [r7, #6]
 800666e:	f083 0362 	eor.w	r3, r3, #98	; 0x62
 8006672:	43db      	mvns	r3, r3
 8006674:	71bb      	strb	r3, [r7, #6]
  if (i & 0x20)
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <_Z8crc_mathhh+0x8e>
    crc ^= 0x23;
 8006680:	79bb      	ldrb	r3, [r7, #6]
 8006682:	f083 0323 	eor.w	r3, r3, #35	; 0x23
 8006686:	71bb      	strb	r3, [r7, #6]
  if (i & 0x40)
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <_Z8crc_mathhh+0xa0>
    crc ^= 0x46;
 8006692:	79bb      	ldrb	r3, [r7, #6]
 8006694:	f083 0346 	eor.w	r3, r3, #70	; 0x46
 8006698:	71bb      	strb	r3, [r7, #6]
  if (i & 0x80)
 800669a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	da04      	bge.n	80066ac <_Z8crc_mathhh+0xb2>
    crc ^= 0x8c;
 80066a2:	79bb      	ldrb	r3, [r7, #6]
 80066a4:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80066a8:	43db      	mvns	r3, r3
 80066aa:	71bb      	strb	r3, [r7, #6]

  return crc;
 80066ac:	79bb      	ldrb	r3, [r7, #6]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <_Z9crc8_bytehh>:
/* Calculate the CRC for an individual byte using the method you have been chosen inside "crc8_inc.h"
 * data   :=    New byte use to calculate the crc
 * crc    :=    Previus CRC
 * return :=    CRC for the [oldCRC|data]
 */
uint8_t crc8_byte(uint8_t data, uint8_t crc) {
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	4603      	mov	r3, r0
 80066c2:	460a      	mov	r2, r1
 80066c4:	71fb      	strb	r3, [r7, #7]
 80066c6:	4613      	mov	r3, r2
 80066c8:	71bb      	strb	r3, [r7, #6]
#ifdef CRC_NIBBLES
  crc = crc_nibbles(data, crc);
#endif

#ifdef CRC_MATH
  crc = crc_math(data, crc);
 80066ca:	79ba      	ldrb	r2, [r7, #6]
 80066cc:	79fb      	ldrb	r3, [r7, #7]
 80066ce:	4611      	mov	r1, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff ff92 	bl	80065fa <_Z8crc_mathhh>
 80066d6:	4603      	mov	r3, r0
 80066d8:	71bb      	strb	r3, [r7, #6]
#endif

  return crc;
 80066da:	79bb      	ldrb	r3, [r7, #6]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <_Z11crc8_streamPht>:

uint8_t crc8_stream(uint8_t *data, uint16_t length) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	807b      	strh	r3, [r7, #2]
  uint8_t crc = 0xff;
 80066f0:	23ff      	movs	r3, #255	; 0xff
 80066f2:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < length; i++) {
 80066f4:	2300      	movs	r3, #0
 80066f6:	81bb      	strh	r3, [r7, #12]
 80066f8:	89ba      	ldrh	r2, [r7, #12]
 80066fa:	887b      	ldrh	r3, [r7, #2]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d20e      	bcs.n	800671e <_Z11crc8_streamPht+0x3a>
    crc = crc8_byte(data[i], crc);
 8006700:	89bb      	ldrh	r3, [r7, #12]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	4413      	add	r3, r2
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	7bfa      	ldrb	r2, [r7, #15]
 800670a:	4611      	mov	r1, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ffd4 	bl	80066ba <_Z9crc8_bytehh>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < length; i++) {
 8006716:	89bb      	ldrh	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	81bb      	strh	r3, [r7, #12]
 800671c:	e7ec      	b.n	80066f8 <_Z11crc8_streamPht+0x14>
  }
  return crc;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006734:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006738:	f002 f96a 	bl	8008a10 <USBD_static_malloc>
 800673c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800674c:	2302      	movs	r3, #2
 800674e:	e066      	b.n	800681e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	7c1b      	ldrb	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d119      	bne.n	8006794 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006764:	2202      	movs	r2, #2
 8006766:	2181      	movs	r1, #129	; 0x81
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 f82e 	bl	80087ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006778:	2202      	movs	r2, #2
 800677a:	2101      	movs	r1, #1
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f002 f824 	bl	80087ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2210      	movs	r2, #16
 800678e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006792:	e016      	b.n	80067c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006794:	2340      	movs	r3, #64	; 0x40
 8006796:	2202      	movs	r2, #2
 8006798:	2181      	movs	r1, #129	; 0x81
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f002 f815 	bl	80087ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067a6:	2340      	movs	r3, #64	; 0x40
 80067a8:	2202      	movs	r2, #2
 80067aa:	2101      	movs	r1, #1
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f002 f80c 	bl	80087ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2210      	movs	r2, #16
 80067be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067c2:	2308      	movs	r3, #8
 80067c4:	2203      	movs	r2, #3
 80067c6:	2182      	movs	r1, #130	; 0x82
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fffe 	bl	80087ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	7c1b      	ldrb	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006802:	2101      	movs	r1, #1
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f002 f8cf 	bl	80089a8 <USBD_LL_PrepareReceive>
 800680a:	e007      	b.n	800681c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006812:	2340      	movs	r3, #64	; 0x40
 8006814:	2101      	movs	r1, #1
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f002 f8c6 	bl	80089a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006832:	2181      	movs	r1, #129	; 0x81
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 ffee 	bl	8008816 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006840:	2101      	movs	r1, #1
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 ffe7 	bl	8008816 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006850:	2182      	movs	r1, #130	; 0x82
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 ffdf 	bl	8008816 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00e      	beq.n	8006890 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006882:	4618      	mov	r0, r3
 8006884:	f002 f8d2 	bl	8008a2c <USBD_static_free>
    pdev->pClassData = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e0af      	b.n	8006a24 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03f      	beq.n	8006950 <USBD_CDC_Setup+0xb4>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	f040 809f 	bne.w	8006a14 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d02e      	beq.n	800693c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da16      	bge.n	8006916 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80068f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	88d2      	ldrh	r2, [r2, #6]
 80068fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	88db      	ldrh	r3, [r3, #6]
 8006900:	2b07      	cmp	r3, #7
 8006902:	bf28      	it	cs
 8006904:	2307      	movcs	r3, #7
 8006906:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	89fa      	ldrh	r2, [r7, #14]
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fb19 	bl	8007f46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006914:	e085      	b.n	8006a22 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785a      	ldrb	r2, [r3, #1]
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	88db      	ldrh	r3, [r3, #6]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800692c:	6939      	ldr	r1, [r7, #16]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	88db      	ldrh	r3, [r3, #6]
 8006932:	461a      	mov	r2, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 fb32 	bl	8007f9e <USBD_CtlPrepareRx>
      break;
 800693a:	e072      	b.n	8006a22 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	7850      	ldrb	r0, [r2, #1]
 8006948:	2200      	movs	r2, #0
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	4798      	blx	r3
      break;
 800694e:	e068      	b.n	8006a22 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b0b      	cmp	r3, #11
 8006956:	d852      	bhi.n	80069fe <USBD_CDC_Setup+0x162>
 8006958:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <USBD_CDC_Setup+0xc4>)
 800695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695e:	bf00      	nop
 8006960:	08006991 	.word	0x08006991
 8006964:	08006a0d 	.word	0x08006a0d
 8006968:	080069ff 	.word	0x080069ff
 800696c:	080069ff 	.word	0x080069ff
 8006970:	080069ff 	.word	0x080069ff
 8006974:	080069ff 	.word	0x080069ff
 8006978:	080069ff 	.word	0x080069ff
 800697c:	080069ff 	.word	0x080069ff
 8006980:	080069ff 	.word	0x080069ff
 8006984:	080069ff 	.word	0x080069ff
 8006988:	080069bb 	.word	0x080069bb
 800698c:	080069e5 	.word	0x080069e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b03      	cmp	r3, #3
 800699a:	d107      	bne.n	80069ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800699c:	f107 030a 	add.w	r3, r7, #10
 80069a0:	2202      	movs	r2, #2
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 face 	bl	8007f46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069aa:	e032      	b.n	8006a12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fa58 	bl	8007e64 <USBD_CtlError>
            ret = USBD_FAIL;
 80069b4:	2303      	movs	r3, #3
 80069b6:	75fb      	strb	r3, [r7, #23]
          break;
 80069b8:	e02b      	b.n	8006a12 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d107      	bne.n	80069d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069c6:	f107 030d 	add.w	r3, r7, #13
 80069ca:	2201      	movs	r2, #1
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fab9 	bl	8007f46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069d4:	e01d      	b.n	8006a12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fa43 	bl	8007e64 <USBD_CtlError>
            ret = USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	75fb      	strb	r3, [r7, #23]
          break;
 80069e2:	e016      	b.n	8006a12 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d00f      	beq.n	8006a10 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 fa36 	bl	8007e64 <USBD_CtlError>
            ret = USBD_FAIL;
 80069f8:	2303      	movs	r3, #3
 80069fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069fc:	e008      	b.n	8006a10 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fa2f 	bl	8007e64 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a06:	2303      	movs	r3, #3
 8006a08:	75fb      	strb	r3, [r7, #23]
          break;
 8006a0a:	e002      	b.n	8006a12 <USBD_CDC_Setup+0x176>
          break;
 8006a0c:	bf00      	nop
 8006a0e:	e008      	b.n	8006a22 <USBD_CDC_Setup+0x186>
          break;
 8006a10:	bf00      	nop
      }
      break;
 8006a12:	e006      	b.n	8006a22 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fa24 	bl	8007e64 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e04f      	b.n	8006aee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a56:	78fa      	ldrb	r2, [r7, #3]
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	3318      	adds	r3, #24
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d029      	beq.n	8006ac0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	3318      	adds	r3, #24
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	78f9      	ldrb	r1, [r7, #3]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	460b      	mov	r3, r1
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	1a5b      	subs	r3, r3, r1
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4403      	add	r3, r0
 8006a8c:	3344      	adds	r3, #68	; 0x44
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a94:	fb03 f301 	mul.w	r3, r3, r1
 8006a98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d110      	bne.n	8006ac0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3318      	adds	r3, #24
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ab2:	78f9      	ldrb	r1, [r7, #3]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 ff54 	bl	8008966 <USBD_LL_Transmit>
 8006abe:	e015      	b.n	8006aec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00b      	beq.n	8006aec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e015      	b.n	8006b44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 ff64 	bl	80089ea <USBD_LL_GetRxDataSize>
 8006b22:	4602      	mov	r2, r0
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e01b      	b.n	8006b9e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d015      	beq.n	8006b9c <USBD_CDC_EP0_RxReady+0x50>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b76:	2bff      	cmp	r3, #255	; 0xff
 8006b78:	d010      	beq.n	8006b9c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006b88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b90:	b292      	uxth	r2, r2
 8006b92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	22ff      	movs	r2, #255	; 0xff
 8006b98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2243      	movs	r2, #67	; 0x43
 8006bb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006bb6:	4b03      	ldr	r3, [pc, #12]	; (8006bc4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	20000094 	.word	0x20000094

08006bc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2243      	movs	r2, #67	; 0x43
 8006bd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006bd6:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	20000050 	.word	0x20000050

08006be8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2243      	movs	r2, #67	; 0x43
 8006bf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006bf6:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	200000d8 	.word	0x200000d8

08006c08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	220a      	movs	r2, #10
 8006c14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c16:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	2000000c 	.word	0x2000000c

08006c28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e004      	b.n	8006c46 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b087      	sub	sp, #28
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c64:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e008      	b.n	8006c82 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e004      	b.n	8006cb4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e01a      	b.n	8006d18 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d114      	bne.n	8006d16 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d0a:	2181      	movs	r1, #129	; 0x81
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 fe2a 	bl	8008966 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e016      	b.n	8006d6c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7c1b      	ldrb	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d50:	2101      	movs	r1, #1
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fe28 	bl	80089a8 <USBD_LL_PrepareReceive>
 8006d58:	e007      	b.n	8006d6a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	2101      	movs	r1, #1
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 fe1f 	bl	80089a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e01f      	b.n	8006dcc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	79fa      	ldrb	r2, [r7, #7]
 8006dbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f001 fc9b 	bl	80086fc <USBD_LL_Init>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e016      	b.n	8006e1a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	f107 020e 	add.w	r2, r7, #14
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	4602      	mov	r2, r0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fcb2 	bl	8008794 <USBD_LL_Start>
 8006e30:	4603      	mov	r3, r0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	4611      	mov	r1, r2
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
  }

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 ff90 	bl	8007df0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d01a      	beq.n	8006f2a <USBD_LL_SetupStage+0x72>
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d822      	bhi.n	8006f3e <USBD_LL_SetupStage+0x86>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <USBD_LL_SetupStage+0x4a>
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d00a      	beq.n	8006f16 <USBD_LL_SetupStage+0x5e>
 8006f00:	e01d      	b.n	8006f3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa62 	bl	80073d4 <USBD_StdDevReq>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]
      break;
 8006f14:	e020      	b.n	8006f58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fac6 	bl	80074b0 <USBD_StdItfReq>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	e016      	b.n	8006f58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fb05 	bl	8007542 <USBD_StdEPReq>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3c:	e00c      	b.n	8006f58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fc81 	bl	8008854 <USBD_LL_StallEP>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
      break;
 8006f56:	bf00      	nop
  }

  return ret;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d138      	bne.n	8006fe8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d14a      	bne.n	800701e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d913      	bls.n	8006fbc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	1ad2      	subs	r2, r2, r3
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	4293      	cmp	r3, r2
 8006fac:	bf28      	it	cs
 8006fae:	4613      	movcs	r3, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f001 f80f 	bl	8007fd8 <USBD_CtlContinueRx>
 8006fba:	e030      	b.n	800701e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d10b      	bne.n	8006fe0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f001 f80a 	bl	8007ffa <USBD_CtlSendStatus>
 8006fe6:	e01a      	b.n	800701e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d114      	bne.n	800701e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00e      	beq.n	800701e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	7afa      	ldrb	r2, [r7, #11]
 800700a:	4611      	mov	r1, r2
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	4798      	blx	r3
 8007010:	4603      	mov	r3, r0
 8007012:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	e000      	b.n	8007020 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	460b      	mov	r3, r1
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007036:	7afb      	ldrb	r3, [r7, #11]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d16b      	bne.n	8007114 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3314      	adds	r3, #20
 8007040:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007048:	2b02      	cmp	r3, #2
 800704a:	d156      	bne.n	80070fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	429a      	cmp	r2, r3
 8007056:	d914      	bls.n	8007082 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	1ad2      	subs	r2, r2, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	461a      	mov	r2, r3
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 ff84 	bl	8007f7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007074:	2300      	movs	r3, #0
 8007076:	2200      	movs	r2, #0
 8007078:	2100      	movs	r1, #0
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f001 fc94 	bl	80089a8 <USBD_LL_PrepareReceive>
 8007080:	e03b      	b.n	80070fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	d11c      	bne.n	80070c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007096:	429a      	cmp	r2, r3
 8007098:	d316      	bcc.n	80070c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d20f      	bcs.n	80070c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070a8:	2200      	movs	r2, #0
 80070aa:	2100      	movs	r1, #0
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 ff65 	bl	8007f7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ba:	2300      	movs	r3, #0
 80070bc:	2200      	movs	r2, #0
 80070be:	2100      	movs	r1, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f001 fc71 	bl	80089a8 <USBD_LL_PrepareReceive>
 80070c6:	e018      	b.n	80070fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d10b      	bne.n	80070ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f001 fbb0 	bl	8008854 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 ff93 	bl	8008020 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007100:	2b01      	cmp	r3, #1
 8007102:	d122      	bne.n	800714a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7ff fe98 	bl	8006e3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007112:	e01a      	b.n	800714a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b03      	cmp	r3, #3
 800711e:	d114      	bne.n	800714a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	7afa      	ldrb	r2, [r7, #11]
 8007136:	4611      	mov	r1, r2
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	4798      	blx	r3
 800713c:	4603      	mov	r3, r0
 800713e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	e000      	b.n	800714c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e02f      	b.n	80071e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00f      	beq.n	80071b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6852      	ldr	r2, [r2, #4]
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	4611      	mov	r1, r2
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b2:	2340      	movs	r3, #64	; 0x40
 80071b4:	2200      	movs	r2, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fb06 	bl	80087ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2240      	movs	r2, #64	; 0x40
 80071ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ce:	2340      	movs	r3, #64	; 0x40
 80071d0:	2200      	movs	r2, #0
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 faf8 	bl	80087ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2240      	movs	r2, #64	; 0x40
 80071e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721e:	b2da      	uxtb	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2204      	movs	r2, #4
 800722a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b04      	cmp	r3, #4
 800724e:	d106      	bne.n	800725e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007256:	b2da      	uxtb	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800727e:	2303      	movs	r3, #3
 8007280:	e012      	b.n	80072a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b03      	cmp	r3, #3
 800728c:	d10b      	bne.n	80072a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e014      	b.n	80072f4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d10d      	bne.n	80072f2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	4611      	mov	r1, r2
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	e014      	b.n	8007340 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d10d      	bne.n	800733e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6852      	ldr	r2, [r2, #4]
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	4611      	mov	r1, r2
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
  }

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007396:	b480      	push	{r7}
 8007398:	b087      	sub	sp, #28
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	3301      	adds	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073b4:	8a3b      	ldrh	r3, [r7, #16]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	b21a      	sxth	r2, r3
 80073ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073be:	4313      	orrs	r3, r2
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073c4:	89fb      	ldrh	r3, [r7, #14]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d005      	beq.n	80073fa <USBD_StdDevReq+0x26>
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d853      	bhi.n	800749a <USBD_StdDevReq+0xc6>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <USBD_StdDevReq+0x3a>
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d14f      	bne.n	800749a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
      break;
 800740c:	e04a      	b.n	80074a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	2b09      	cmp	r3, #9
 8007414:	d83b      	bhi.n	800748e <USBD_StdDevReq+0xba>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <USBD_StdDevReq+0x48>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007471 	.word	0x08007471
 8007420:	08007485 	.word	0x08007485
 8007424:	0800748f 	.word	0x0800748f
 8007428:	0800747b 	.word	0x0800747b
 800742c:	0800748f 	.word	0x0800748f
 8007430:	0800744f 	.word	0x0800744f
 8007434:	08007445 	.word	0x08007445
 8007438:	0800748f 	.word	0x0800748f
 800743c:	08007467 	.word	0x08007467
 8007440:	08007459 	.word	0x08007459
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f9de 	bl	8007808 <USBD_GetDescriptor>
          break;
 800744c:	e024      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fb43 	bl	8007adc <USBD_SetAddress>
          break;
 8007456:	e01f      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fb82 	bl	8007b64 <USBD_SetConfig>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
          break;
 8007464:	e018      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fc21 	bl	8007cb0 <USBD_GetConfig>
          break;
 800746e:	e013      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fc52 	bl	8007d1c <USBD_GetStatus>
          break;
 8007478:	e00e      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fc81 	bl	8007d84 <USBD_SetFeature>
          break;
 8007482:	e009      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fc90 	bl	8007dac <USBD_ClrFeature>
          break;
 800748c:	e004      	b.n	8007498 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fce7 	bl	8007e64 <USBD_CtlError>
          break;
 8007496:	bf00      	nop
      }
      break;
 8007498:	e004      	b.n	80074a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fce1 	bl	8007e64 <USBD_CtlError>
      break;
 80074a2:	bf00      	nop
  }

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop

080074b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d005      	beq.n	80074d6 <USBD_StdItfReq+0x26>
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d82f      	bhi.n	800752e <USBD_StdItfReq+0x7e>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <USBD_StdItfReq+0x26>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d12b      	bne.n	800752e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d81d      	bhi.n	8007520 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	889b      	ldrh	r3, [r3, #4]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d813      	bhi.n	8007516 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	88db      	ldrh	r3, [r3, #6]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d110      	bne.n	800752a <USBD_StdItfReq+0x7a>
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10d      	bne.n	800752a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fd73 	bl	8007ffa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007514:	e009      	b.n	800752a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fca3 	bl	8007e64 <USBD_CtlError>
          break;
 800751e:	e004      	b.n	800752a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc9e 	bl	8007e64 <USBD_CtlError>
          break;
 8007528:	e000      	b.n	800752c <USBD_StdItfReq+0x7c>
          break;
 800752a:	bf00      	nop
      }
      break;
 800752c:	e004      	b.n	8007538 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fc97 	bl	8007e64 <USBD_CtlError>
      break;
 8007536:	bf00      	nop
  }

  return ret;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	889b      	ldrh	r3, [r3, #4]
 8007554:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d007      	beq.n	8007572 <USBD_StdEPReq+0x30>
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	f200 8145 	bhi.w	80077f2 <USBD_StdEPReq+0x2b0>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <USBD_StdEPReq+0x44>
 800756c:	2b20      	cmp	r3, #32
 800756e:	f040 8140 	bne.w	80077f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
      break;
 8007584:	e13a      	b.n	80077fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d007      	beq.n	800759e <USBD_StdEPReq+0x5c>
 800758e:	2b03      	cmp	r3, #3
 8007590:	f300 8129 	bgt.w	80077e6 <USBD_StdEPReq+0x2a4>
 8007594:	2b00      	cmp	r3, #0
 8007596:	d07f      	beq.n	8007698 <USBD_StdEPReq+0x156>
 8007598:	2b01      	cmp	r3, #1
 800759a:	d03c      	beq.n	8007616 <USBD_StdEPReq+0xd4>
 800759c:	e123      	b.n	80077e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d002      	beq.n	80075b0 <USBD_StdEPReq+0x6e>
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d016      	beq.n	80075dc <USBD_StdEPReq+0x9a>
 80075ae:	e02c      	b.n	800760a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00d      	beq.n	80075d2 <USBD_StdEPReq+0x90>
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	2b80      	cmp	r3, #128	; 0x80
 80075ba:	d00a      	beq.n	80075d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 f947 	bl	8008854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075c6:	2180      	movs	r1, #128	; 0x80
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f943 	bl	8008854 <USBD_LL_StallEP>
 80075ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075d0:	e020      	b.n	8007614 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fc45 	bl	8007e64 <USBD_CtlError>
              break;
 80075da:	e01b      	b.n	8007614 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	885b      	ldrh	r3, [r3, #2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10e      	bne.n	8007602 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <USBD_StdEPReq+0xc0>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d008      	beq.n	8007602 <USBD_StdEPReq+0xc0>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	88db      	ldrh	r3, [r3, #6]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f929 	bl	8008854 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fcf9 	bl	8007ffa <USBD_CtlSendStatus>

              break;
 8007608:	e004      	b.n	8007614 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fc29 	bl	8007e64 <USBD_CtlError>
              break;
 8007612:	bf00      	nop
          }
          break;
 8007614:	e0ec      	b.n	80077f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d002      	beq.n	8007628 <USBD_StdEPReq+0xe6>
 8007622:	2b03      	cmp	r3, #3
 8007624:	d016      	beq.n	8007654 <USBD_StdEPReq+0x112>
 8007626:	e030      	b.n	800768a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00d      	beq.n	800764a <USBD_StdEPReq+0x108>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b80      	cmp	r3, #128	; 0x80
 8007632:	d00a      	beq.n	800764a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f90b 	bl	8008854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800763e:	2180      	movs	r1, #128	; 0x80
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f907 	bl	8008854 <USBD_LL_StallEP>
 8007646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007648:	e025      	b.n	8007696 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fc09 	bl	8007e64 <USBD_CtlError>
              break;
 8007652:	e020      	b.n	8007696 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	885b      	ldrh	r3, [r3, #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d11b      	bne.n	8007694 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007662:	2b00      	cmp	r3, #0
 8007664:	d004      	beq.n	8007670 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 f911 	bl	8008892 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fcc2 	bl	8007ffa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007688:	e004      	b.n	8007694 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fbe9 	bl	8007e64 <USBD_CtlError>
              break;
 8007692:	e000      	b.n	8007696 <USBD_StdEPReq+0x154>
              break;
 8007694:	bf00      	nop
          }
          break;
 8007696:	e0ab      	b.n	80077f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d002      	beq.n	80076aa <USBD_StdEPReq+0x168>
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d032      	beq.n	800770e <USBD_StdEPReq+0x1cc>
 80076a8:	e097      	b.n	80077da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <USBD_StdEPReq+0x17e>
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d004      	beq.n	80076c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fbd3 	bl	8007e64 <USBD_CtlError>
                break;
 80076be:	e091      	b.n	80077e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	da0b      	bge.n	80076e0 <USBD_StdEPReq+0x19e>
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	3310      	adds	r3, #16
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	3304      	adds	r3, #4
 80076de:	e00b      	b.n	80076f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	3304      	adds	r3, #4
 80076f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2202      	movs	r2, #2
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fc1d 	bl	8007f46 <USBD_CtlSendData>
              break;
 800770c:	e06a      	b.n	80077e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800770e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	da11      	bge.n	800773a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	f003 020f 	and.w	r2, r3, #15
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	3324      	adds	r3, #36	; 0x24
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d117      	bne.n	8007760 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fb96 	bl	8007e64 <USBD_CtlError>
                  break;
 8007738:	e054      	b.n	80077e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800773a:	7bbb      	ldrb	r3, [r7, #14]
 800773c:	f003 020f 	and.w	r2, r3, #15
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb83 	bl	8007e64 <USBD_CtlError>
                  break;
 800775e:	e041      	b.n	80077e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	da0b      	bge.n	8007780 <USBD_StdEPReq+0x23e>
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	3310      	adds	r3, #16
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	3304      	adds	r3, #4
 800777e:	e00b      	b.n	8007798 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <USBD_StdEPReq+0x264>
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d103      	bne.n	80077ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e00e      	b.n	80077cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f88c 	bl	80088d0 <USBD_LL_IsStallEP>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e002      	b.n	80077cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2202      	movs	r2, #2
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fbb7 	bl	8007f46 <USBD_CtlSendData>
              break;
 80077d8:	e004      	b.n	80077e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb41 	bl	8007e64 <USBD_CtlError>
              break;
 80077e2:	bf00      	nop
          }
          break;
 80077e4:	e004      	b.n	80077f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fb3b 	bl	8007e64 <USBD_CtlError>
          break;
 80077ee:	bf00      	nop
      }
      break;
 80077f0:	e004      	b.n	80077fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb35 	bl	8007e64 <USBD_CtlError>
      break;
 80077fa:	bf00      	nop
  }

  return ret;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	885b      	ldrh	r3, [r3, #2]
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	2b06      	cmp	r3, #6
 800782a:	f200 8128 	bhi.w	8007a7e <USBD_GetDescriptor+0x276>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <USBD_GetDescriptor+0x2c>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007851 	.word	0x08007851
 8007838:	08007869 	.word	0x08007869
 800783c:	080078a9 	.word	0x080078a9
 8007840:	08007a7f 	.word	0x08007a7f
 8007844:	08007a7f 	.word	0x08007a7f
 8007848:	08007a1f 	.word	0x08007a1f
 800784c:	08007a4b 	.word	0x08007a4b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7c12      	ldrb	r2, [r2, #16]
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
      break;
 8007866:	e112      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7c1b      	ldrb	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10d      	bne.n	800788c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	f107 0208 	add.w	r2, r7, #8
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3301      	adds	r3, #1
 8007886:	2202      	movs	r2, #2
 8007888:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800788a:	e100      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	f107 0208 	add.w	r2, r7, #8
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	2202      	movs	r2, #2
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e0f2      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	885b      	ldrh	r3, [r3, #2]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	f200 80ac 	bhi.w	8007a0c <USBD_GetDescriptor+0x204>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_GetDescriptor+0xb4>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078d5 	.word	0x080078d5
 80078c0:	08007909 	.word	0x08007909
 80078c4:	0800793d 	.word	0x0800793d
 80078c8:	08007971 	.word	0x08007971
 80078cc:	080079a5 	.word	0x080079a5
 80078d0:	080079d9 	.word	0x080079d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f6:	e091      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fab2 	bl	8007e64 <USBD_CtlError>
            err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
          break;
 8007906:	e089      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e077      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa98 	bl	8007e64 <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e06f      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	7c12      	ldrb	r2, [r2, #16]
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795e:	e05d      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa7e 	bl	8007e64 <USBD_CtlError>
            err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
          break;
 800796e:	e055      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007992:	e043      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa64 	bl	8007e64 <USBD_CtlError>
            err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
          break;
 80079a2:	e03b      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e029      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa4a 	bl	8007e64 <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e021      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e00f      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa30 	bl	8007e64 <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e007      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa28 	bl	8007e64 <USBD_CtlError>
          err++;
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	3301      	adds	r3, #1
 8007a18:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a1a:	bf00      	nop
      }
      break;
 8007a1c:	e037      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	7c1b      	ldrb	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	f107 0208 	add.w	r2, r7, #8
 8007a32:	4610      	mov	r0, r2
 8007a34:	4798      	blx	r3
 8007a36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a38:	e029      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa11 	bl	8007e64 <USBD_CtlError>
        err++;
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	3301      	adds	r3, #1
 8007a46:	72fb      	strb	r3, [r7, #11]
      break;
 8007a48:	e021      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7c1b      	ldrb	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10d      	bne.n	8007a6e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	f107 0208 	add.w	r2, r7, #8
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4798      	blx	r3
 8007a62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	2207      	movs	r2, #7
 8007a6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a6c:	e00f      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f9f7 	bl	8007e64 <USBD_CtlError>
        err++;
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a7c:	e007      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f9ef 	bl	8007e64 <USBD_CtlError>
      err++;
 8007a86:	7afb      	ldrb	r3, [r7, #11]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a8c:	bf00      	nop
  }

  if (err != 0U)
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d11e      	bne.n	8007ad2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	88db      	ldrh	r3, [r3, #6]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d016      	beq.n	8007aca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a9c:	893b      	ldrh	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00e      	beq.n	8007ac0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88da      	ldrh	r2, [r3, #6]
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bf28      	it	cs
 8007aac:	4613      	movcs	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ab2:	893b      	ldrh	r3, [r7, #8]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa44 	bl	8007f46 <USBD_CtlSendData>
 8007abe:	e009      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9ce 	bl	8007e64 <USBD_CtlError>
 8007ac8:	e004      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa95 	bl	8007ffa <USBD_CtlSendStatus>
 8007ad0:	e000      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
    return;
 8007ad2:	bf00      	nop
  }
}
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop

08007adc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	889b      	ldrh	r3, [r3, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d131      	bne.n	8007b52 <USBD_SetAddress+0x76>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	88db      	ldrh	r3, [r3, #6]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d12d      	bne.n	8007b52 <USBD_SetAddress+0x76>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	2b7f      	cmp	r3, #127	; 0x7f
 8007afc:	d829      	bhi.n	8007b52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	885b      	ldrh	r3, [r3, #2]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d104      	bne.n	8007b20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9a3 	bl	8007e64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1e:	e01d      	b.n	8007b5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7bfa      	ldrb	r2, [r7, #15]
 8007b24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fefb 	bl	8008928 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa61 	bl	8007ffa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	e009      	b.n	8007b5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b50:	e004      	b.n	8007b5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f985 	bl	8007e64 <USBD_CtlError>
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	885b      	ldrh	r3, [r3, #2]
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	4b4c      	ldr	r3, [pc, #304]	; (8007cac <USBD_SetConfig+0x148>)
 8007b7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b7c:	4b4b      	ldr	r3, [pc, #300]	; (8007cac <USBD_SetConfig+0x148>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d905      	bls.n	8007b90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f96c 	bl	8007e64 <USBD_CtlError>
    return USBD_FAIL;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e088      	b.n	8007ca2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d002      	beq.n	8007ba2 <USBD_SetConfig+0x3e>
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d025      	beq.n	8007bec <USBD_SetConfig+0x88>
 8007ba0:	e071      	b.n	8007c86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ba2:	4b42      	ldr	r3, [pc, #264]	; (8007cac <USBD_SetConfig+0x148>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01c      	beq.n	8007be4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007baa:	4b40      	ldr	r3, [pc, #256]	; (8007cac <USBD_SetConfig+0x148>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bb4:	4b3d      	ldr	r3, [pc, #244]	; (8007cac <USBD_SetConfig+0x148>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff f948 	bl	8006e50 <USBD_SetClassConfig>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d004      	beq.n	8007bd4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f949 	bl	8007e64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bd2:	e065      	b.n	8007ca0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fa10 	bl	8007ffa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007be2:	e05d      	b.n	8007ca0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fa08 	bl	8007ffa <USBD_CtlSendStatus>
      break;
 8007bea:	e059      	b.n	8007ca0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007bec:	4b2f      	ldr	r3, [pc, #188]	; (8007cac <USBD_SetConfig+0x148>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d112      	bne.n	8007c1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bfc:	4b2b      	ldr	r3, [pc, #172]	; (8007cac <USBD_SetConfig+0x148>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c06:	4b29      	ldr	r3, [pc, #164]	; (8007cac <USBD_SetConfig+0x148>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff f93b 	bl	8006e88 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f9f1 	bl	8007ffa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c18:	e042      	b.n	8007ca0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c1a:	4b24      	ldr	r3, [pc, #144]	; (8007cac <USBD_SetConfig+0x148>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d02a      	beq.n	8007c7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff f929 	bl	8006e88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c36:	4b1d      	ldr	r3, [pc, #116]	; (8007cac <USBD_SetConfig+0x148>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c40:	4b1a      	ldr	r3, [pc, #104]	; (8007cac <USBD_SetConfig+0x148>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff f902 	bl	8006e50 <USBD_SetClassConfig>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00f      	beq.n	8007c76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f903 	bl	8007e64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff f90e 	bl	8006e88 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c74:	e014      	b.n	8007ca0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9bf 	bl	8007ffa <USBD_CtlSendStatus>
      break;
 8007c7c:	e010      	b.n	8007ca0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f9bb 	bl	8007ffa <USBD_CtlSendStatus>
      break;
 8007c84:	e00c      	b.n	8007ca0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8eb 	bl	8007e64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c8e:	4b07      	ldr	r3, [pc, #28]	; (8007cac <USBD_SetConfig+0x148>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff f8f7 	bl	8006e88 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9e:	bf00      	nop
  }

  return ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200004f4 	.word	0x200004f4

08007cb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	88db      	ldrh	r3, [r3, #6]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d004      	beq.n	8007ccc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f8cd 	bl	8007e64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cca:	e023      	b.n	8007d14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	dc02      	bgt.n	8007cde <USBD_GetConfig+0x2e>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dc03      	bgt.n	8007ce4 <USBD_GetConfig+0x34>
 8007cdc:	e015      	b.n	8007d0a <USBD_GetConfig+0x5a>
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d00b      	beq.n	8007cfa <USBD_GetConfig+0x4a>
 8007ce2:	e012      	b.n	8007d0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3308      	adds	r3, #8
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f927 	bl	8007f46 <USBD_CtlSendData>
        break;
 8007cf8:	e00c      	b.n	8007d14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f91f 	bl	8007f46 <USBD_CtlSendData>
        break;
 8007d08:	e004      	b.n	8007d14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8a9 	bl	8007e64 <USBD_CtlError>
        break;
 8007d12:	bf00      	nop
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d81e      	bhi.n	8007d72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	88db      	ldrh	r3, [r3, #6]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d004      	beq.n	8007d46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f890 	bl	8007e64 <USBD_CtlError>
        break;
 8007d44:	e01a      	b.n	8007d7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f043 0202 	orr.w	r2, r3, #2
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	330c      	adds	r3, #12
 8007d66:	2202      	movs	r2, #2
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f8eb 	bl	8007f46 <USBD_CtlSendData>
      break;
 8007d70:	e004      	b.n	8007d7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f875 	bl	8007e64 <USBD_CtlError>
      break;
 8007d7a:	bf00      	nop
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	885b      	ldrh	r3, [r3, #2]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d106      	bne.n	8007da4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f92b 	bl	8007ffa <USBD_CtlSendStatus>
  }
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d80b      	bhi.n	8007ddc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	885b      	ldrh	r3, [r3, #2]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d10c      	bne.n	8007de6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f910 	bl	8007ffa <USBD_CtlSendStatus>
      }
      break;
 8007dda:	e004      	b.n	8007de6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f840 	bl	8007e64 <USBD_CtlError>
      break;
 8007de4:	e000      	b.n	8007de8 <USBD_ClrFeature+0x3c>
      break;
 8007de6:	bf00      	nop
  }
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff fabb 	bl	8007396 <SWAPBYTE>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3301      	adds	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff faae 	bl	8007396 <SWAPBYTE>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3301      	adds	r3, #1
 8007e46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff faa1 	bl	8007396 <SWAPBYTE>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	80da      	strh	r2, [r3, #6]
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e6e:	2180      	movs	r1, #128	; 0x80
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fcef 	bl	8008854 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e76:	2100      	movs	r1, #0
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fceb 	bl	8008854 <USBD_LL_StallEP>
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d036      	beq.n	8007f0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ea0:	6938      	ldr	r0, [r7, #16]
 8007ea2:	f000 f836 	bl	8007f12 <USBD_GetLen>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	7812      	ldrb	r2, [r2, #0]
 8007ebe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4413      	add	r3, r2
 8007ecc:	2203      	movs	r2, #3
 8007ece:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ed6:	e013      	b.n	8007f00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	7812      	ldrb	r2, [r2, #0]
 8007ee2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	613b      	str	r3, [r7, #16]
    idx++;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	3301      	adds	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	3301      	adds	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e7      	bne.n	8007ed8 <USBD_GetString+0x52>
 8007f08:	e000      	b.n	8007f0c <USBD_GetString+0x86>
    return;
 8007f0a:	bf00      	nop
  }
}
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b085      	sub	sp, #20
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f22:	e005      	b.n	8007f30 <USBD_GetLen+0x1e>
  {
    len++;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	3301      	adds	r3, #1
 8007f28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1f5      	bne.n	8007f24 <USBD_GetLen+0x12>
  }

  return len;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2202      	movs	r2, #2
 8007f56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 fcfa 	bl	8008966 <USBD_LL_Transmit>

  return USBD_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fce9 	bl	8008966 <USBD_LL_Transmit>

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2203      	movs	r2, #3
 8007fae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fced 	bl	80089a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fcdc 	bl	80089a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2204      	movs	r2, #4
 8008006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800800a:	2300      	movs	r3, #0
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fca8 	bl	8008966 <USBD_LL_Transmit>

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2205      	movs	r2, #5
 800802c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008030:	2300      	movs	r3, #0
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fcb6 	bl	80089a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800804c:	2200      	movs	r2, #0
 800804e:	4912      	ldr	r1, [pc, #72]	; (8008098 <MX_USB_DEVICE_Init+0x50>)
 8008050:	4812      	ldr	r0, [pc, #72]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008052:	f7fe fe8f 	bl	8006d74 <USBD_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800805c:	f7f8 fc90 	bl	8000980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008060:	490f      	ldr	r1, [pc, #60]	; (80080a0 <MX_USB_DEVICE_Init+0x58>)
 8008062:	480e      	ldr	r0, [pc, #56]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008064:	f7fe feb6 	bl	8006dd4 <USBD_RegisterClass>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800806e:	f7f8 fc87 	bl	8000980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008072:	490c      	ldr	r1, [pc, #48]	; (80080a4 <MX_USB_DEVICE_Init+0x5c>)
 8008074:	4809      	ldr	r0, [pc, #36]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008076:	f7fe fdd7 	bl	8006c28 <USBD_CDC_RegisterInterface>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008080:	f7f8 fc7e 	bl	8000980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008084:	4805      	ldr	r0, [pc, #20]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008086:	f7fe fecc 	bl	8006e22 <USBD_Start>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008090:	f7f8 fc76 	bl	8000980 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008094:	bf00      	nop
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000130 	.word	0x20000130
 800809c:	2000071c 	.word	0x2000071c
 80080a0:	20000018 	.word	0x20000018
 80080a4:	2000011c 	.word	0x2000011c

080080a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080ac:	2200      	movs	r2, #0
 80080ae:	4905      	ldr	r1, [pc, #20]	; (80080c4 <CDC_Init_FS+0x1c>)
 80080b0:	4805      	ldr	r0, [pc, #20]	; (80080c8 <CDC_Init_FS+0x20>)
 80080b2:	f7fe fdce 	bl	8006c52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080b6:	4905      	ldr	r1, [pc, #20]	; (80080cc <CDC_Init_FS+0x24>)
 80080b8:	4803      	ldr	r0, [pc, #12]	; (80080c8 <CDC_Init_FS+0x20>)
 80080ba:	f7fe fde8 	bl	8006c8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	200011ec 	.word	0x200011ec
 80080c8:	2000071c 	.word	0x2000071c
 80080cc:	200009ec 	.word	0x200009ec

080080d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b23      	cmp	r3, #35	; 0x23
 80080f4:	d84a      	bhi.n	800818c <CDC_Control_FS+0xac>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <CDC_Control_FS+0x1c>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	0800818d 	.word	0x0800818d
 8008100:	0800818d 	.word	0x0800818d
 8008104:	0800818d 	.word	0x0800818d
 8008108:	0800818d 	.word	0x0800818d
 800810c:	0800818d 	.word	0x0800818d
 8008110:	0800818d 	.word	0x0800818d
 8008114:	0800818d 	.word	0x0800818d
 8008118:	0800818d 	.word	0x0800818d
 800811c:	0800818d 	.word	0x0800818d
 8008120:	0800818d 	.word	0x0800818d
 8008124:	0800818d 	.word	0x0800818d
 8008128:	0800818d 	.word	0x0800818d
 800812c:	0800818d 	.word	0x0800818d
 8008130:	0800818d 	.word	0x0800818d
 8008134:	0800818d 	.word	0x0800818d
 8008138:	0800818d 	.word	0x0800818d
 800813c:	0800818d 	.word	0x0800818d
 8008140:	0800818d 	.word	0x0800818d
 8008144:	0800818d 	.word	0x0800818d
 8008148:	0800818d 	.word	0x0800818d
 800814c:	0800818d 	.word	0x0800818d
 8008150:	0800818d 	.word	0x0800818d
 8008154:	0800818d 	.word	0x0800818d
 8008158:	0800818d 	.word	0x0800818d
 800815c:	0800818d 	.word	0x0800818d
 8008160:	0800818d 	.word	0x0800818d
 8008164:	0800818d 	.word	0x0800818d
 8008168:	0800818d 	.word	0x0800818d
 800816c:	0800818d 	.word	0x0800818d
 8008170:	0800818d 	.word	0x0800818d
 8008174:	0800818d 	.word	0x0800818d
 8008178:	0800818d 	.word	0x0800818d
 800817c:	0800818d 	.word	0x0800818d
 8008180:	0800818d 	.word	0x0800818d
 8008184:	0800818d 	.word	0x0800818d
 8008188:	0800818d 	.word	0x0800818d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800818c:	bf00      	nop
  }

  return (USBD_OK);
 800818e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4805      	ldr	r0, [pc, #20]	; (80081c0 <CDC_Receive_FS+0x24>)
 80081aa:	f7fe fd70 	bl	8006c8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081ae:	4804      	ldr	r0, [pc, #16]	; (80081c0 <CDC_Receive_FS+0x24>)
 80081b0:	f7fe fdb6 	bl	8006d20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	2000071c 	.word	0x2000071c

080081c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081d4:	4b0d      	ldr	r3, [pc, #52]	; (800820c <CDC_Transmit_FS+0x48>)
 80081d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e00b      	b.n	8008202 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081ea:	887b      	ldrh	r3, [r7, #2]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4806      	ldr	r0, [pc, #24]	; (800820c <CDC_Transmit_FS+0x48>)
 80081f2:	f7fe fd2e 	bl	8006c52 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <CDC_Transmit_FS+0x48>)
 80081f8:	f7fe fd62 	bl	8006cc0 <USBD_CDC_TransmitPacket>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	2000071c 	.word	0x2000071c

08008210 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008226:	4618      	mov	r0, r3
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	6039      	str	r1, [r7, #0]
 800823e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2212      	movs	r2, #18
 8008244:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008246:	4b03      	ldr	r3, [pc, #12]	; (8008254 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	2000014c 	.word	0x2000014c

08008258 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2204      	movs	r2, #4
 8008268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800826a:	4b03      	ldr	r3, [pc, #12]	; (8008278 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	20000160 	.word	0x20000160

0800827c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d105      	bne.n	800829a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	4907      	ldr	r1, [pc, #28]	; (80082b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008292:	4808      	ldr	r0, [pc, #32]	; (80082b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008294:	f7ff fdf7 	bl	8007e86 <USBD_GetString>
 8008298:	e004      	b.n	80082a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	4904      	ldr	r1, [pc, #16]	; (80082b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800829e:	4805      	ldr	r0, [pc, #20]	; (80082b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80082a0:	f7ff fdf1 	bl	8007e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	200019ec 	.word	0x200019ec
 80082b4:	08008bfc 	.word	0x08008bfc

080082b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	4904      	ldr	r1, [pc, #16]	; (80082d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082c8:	4804      	ldr	r0, [pc, #16]	; (80082dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082ca:	f7ff fddc 	bl	8007e86 <USBD_GetString>
  return USBD_StrDesc;
 80082ce:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	200019ec 	.word	0x200019ec
 80082dc:	08008c14 	.word	0x08008c14

080082e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	221a      	movs	r2, #26
 80082f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082f2:	f000 f843 	bl	800837c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082f6:	4b02      	ldr	r3, [pc, #8]	; (8008300 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000164 	.word	0x20000164

08008304 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d105      	bne.n	8008322 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4907      	ldr	r1, [pc, #28]	; (8008338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800831a:	4808      	ldr	r0, [pc, #32]	; (800833c <USBD_FS_ConfigStrDescriptor+0x38>)
 800831c:	f7ff fdb3 	bl	8007e86 <USBD_GetString>
 8008320:	e004      	b.n	800832c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	4904      	ldr	r1, [pc, #16]	; (8008338 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008326:	4805      	ldr	r0, [pc, #20]	; (800833c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008328:	f7ff fdad 	bl	8007e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800832c:	4b02      	ldr	r3, [pc, #8]	; (8008338 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	200019ec 	.word	0x200019ec
 800833c:	08008c28 	.word	0x08008c28

08008340 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	6039      	str	r1, [r7, #0]
 800834a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d105      	bne.n	800835e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	4907      	ldr	r1, [pc, #28]	; (8008374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008356:	4808      	ldr	r0, [pc, #32]	; (8008378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008358:	f7ff fd95 	bl	8007e86 <USBD_GetString>
 800835c:	e004      	b.n	8008368 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	4904      	ldr	r1, [pc, #16]	; (8008374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008362:	4805      	ldr	r0, [pc, #20]	; (8008378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008364:	f7ff fd8f 	bl	8007e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008368:	4b02      	ldr	r3, [pc, #8]	; (8008374 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200019ec 	.word	0x200019ec
 8008378:	08008c34 	.word	0x08008c34

0800837c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008382:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <Get_SerialNum+0x44>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008388:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <Get_SerialNum+0x48>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800838e:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <Get_SerialNum+0x4c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4413      	add	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083a2:	2208      	movs	r2, #8
 80083a4:	4909      	ldr	r1, [pc, #36]	; (80083cc <Get_SerialNum+0x50>)
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 f814 	bl	80083d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083ac:	2204      	movs	r2, #4
 80083ae:	4908      	ldr	r1, [pc, #32]	; (80083d0 <Get_SerialNum+0x54>)
 80083b0:	68b8      	ldr	r0, [r7, #8]
 80083b2:	f000 f80f 	bl	80083d4 <IntToUnicode>
  }
}
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	1fff7a10 	.word	0x1fff7a10
 80083c4:	1fff7a14 	.word	0x1fff7a14
 80083c8:	1fff7a18 	.word	0x1fff7a18
 80083cc:	20000166 	.word	0x20000166
 80083d0:	20000176 	.word	0x20000176

080083d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]
 80083ea:	e027      	b.n	800843c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	0f1b      	lsrs	r3, r3, #28
 80083f0:	2b09      	cmp	r3, #9
 80083f2:	d80b      	bhi.n	800840c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	0f1b      	lsrs	r3, r3, #28
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	4619      	mov	r1, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	440b      	add	r3, r1
 8008404:	3230      	adds	r2, #48	; 0x30
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	e00a      	b.n	8008422 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	0f1b      	lsrs	r3, r3, #28
 8008410:	b2da      	uxtb	r2, r3
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	4619      	mov	r1, r3
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	440b      	add	r3, r1
 800841c:	3237      	adds	r2, #55	; 0x37
 800841e:	b2d2      	uxtb	r2, r2
 8008420:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	011b      	lsls	r3, r3, #4
 8008426:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	3301      	adds	r3, #1
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	4413      	add	r3, r2
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	3301      	adds	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
 800843c:	7dfa      	ldrb	r2, [r7, #23]
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	429a      	cmp	r2, r3
 8008442:	d3d3      	bcc.n	80083ec <IntToUnicode+0x18>
  }
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
	...

08008454 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08a      	sub	sp, #40	; 0x28
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800845c:	f107 0314 	add.w	r3, r7, #20
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	609a      	str	r2, [r3, #8]
 8008468:	60da      	str	r2, [r3, #12]
 800846a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008474:	d147      	bne.n	8008506 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008476:	2300      	movs	r3, #0
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	4b25      	ldr	r3, [pc, #148]	; (8008510 <HAL_PCD_MspInit+0xbc>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	4a24      	ldr	r2, [pc, #144]	; (8008510 <HAL_PCD_MspInit+0xbc>)
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	6313      	str	r3, [r2, #48]	; 0x30
 8008486:	4b22      	ldr	r3, [pc, #136]	; (8008510 <HAL_PCD_MspInit+0xbc>)
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008498:	2300      	movs	r3, #0
 800849a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849c:	2300      	movs	r3, #0
 800849e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80084a0:	f107 0314 	add.w	r3, r7, #20
 80084a4:	4619      	mov	r1, r3
 80084a6:	481b      	ldr	r0, [pc, #108]	; (8008514 <HAL_PCD_MspInit+0xc0>)
 80084a8:	f7f9 fcf4 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b2:	2302      	movs	r3, #2
 80084b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ba:	2300      	movs	r3, #0
 80084bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084be:	230a      	movs	r3, #10
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c2:	f107 0314 	add.w	r3, r7, #20
 80084c6:	4619      	mov	r1, r3
 80084c8:	4812      	ldr	r0, [pc, #72]	; (8008514 <HAL_PCD_MspInit+0xc0>)
 80084ca:	f7f9 fce3 	bl	8001e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084ce:	4b10      	ldr	r3, [pc, #64]	; (8008510 <HAL_PCD_MspInit+0xbc>)
 80084d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d2:	4a0f      	ldr	r2, [pc, #60]	; (8008510 <HAL_PCD_MspInit+0xbc>)
 80084d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d8:	6353      	str	r3, [r2, #52]	; 0x34
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <HAL_PCD_MspInit+0xbc>)
 80084e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e2:	4a0b      	ldr	r2, [pc, #44]	; (8008510 <HAL_PCD_MspInit+0xbc>)
 80084e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084e8:	6453      	str	r3, [r2, #68]	; 0x44
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <HAL_PCD_MspInit+0xbc>)
 80084ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084f6:	2200      	movs	r2, #0
 80084f8:	2100      	movs	r1, #0
 80084fa:	2043      	movs	r0, #67	; 0x43
 80084fc:	f7f9 fc93 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008500:	2043      	movs	r0, #67	; 0x43
 8008502:	f7f9 fcac 	bl	8001e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008506:	bf00      	nop
 8008508:	3728      	adds	r7, #40	; 0x28
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40023800 	.word	0x40023800
 8008514:	40020000 	.word	0x40020000

08008518 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f7fe fcc2 	bl	8006eb8 <USBD_LL_SetupStage>
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	1a9b      	subs	r3, r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	4619      	mov	r1, r3
 8008566:	f7fe fcfc 	bl	8006f62 <USBD_LL_DataOutStage>
}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	3348      	adds	r3, #72	; 0x48
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	4619      	mov	r1, r3
 800859a:	f7fe fd45 	bl	8007028 <USBD_LL_DataInStage>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fe59 	bl	800726c <USBD_LL_SOF>
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085ca:	2301      	movs	r3, #1
 80085cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
 80085da:	e008      	b.n	80085ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d102      	bne.n	80085ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
 80085e8:	e001      	b.n	80085ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80085ea:	f7f8 f9c9 	bl	8000980 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085f4:	7bfa      	ldrb	r2, [r7, #15]
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fe fdf9 	bl	80071f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fda5 	bl	8007154 <USBD_LL_Reset>
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fdf4 	bl	8007210 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800863a:	f043 0301 	orr.w	r3, r3, #1
 800863e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <HAL_PCD_SuspendCallback+0x48>)
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	4a03      	ldr	r2, [pc, #12]	; (800865c <HAL_PCD_SuspendCallback+0x48>)
 800864e:	f043 0306 	orr.w	r3, r3, #6
 8008652:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	e000ed00 	.word	0xe000ed00

08008660 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe fde4 	bl	800723c <USBD_LL_Resume>
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800868e:	78fa      	ldrb	r2, [r7, #3]
 8008690:	4611      	mov	r1, r2
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fe32 	bl	80072fc <USBD_LL_IsoOUTIncomplete>
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086b2:	78fa      	ldrb	r2, [r7, #3]
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fdfa 	bl	80072b0 <USBD_LL_IsoINIncomplete>
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fe38 	bl	8007348 <USBD_LL_DevConnected>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fe35 	bl	800735e <USBD_LL_DevDisconnected>
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d13c      	bne.n	8008786 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800870c:	4a20      	ldr	r2, [pc, #128]	; (8008790 <USBD_LL_Init+0x94>)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a1e      	ldr	r2, [pc, #120]	; (8008790 <USBD_LL_Init+0x94>)
 8008718:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800871c:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <USBD_LL_Init+0x94>)
 800871e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008722:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008724:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <USBD_LL_Init+0x94>)
 8008726:	2204      	movs	r2, #4
 8008728:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800872a:	4b19      	ldr	r3, [pc, #100]	; (8008790 <USBD_LL_Init+0x94>)
 800872c:	2202      	movs	r2, #2
 800872e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008730:	4b17      	ldr	r3, [pc, #92]	; (8008790 <USBD_LL_Init+0x94>)
 8008732:	2200      	movs	r2, #0
 8008734:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008736:	4b16      	ldr	r3, [pc, #88]	; (8008790 <USBD_LL_Init+0x94>)
 8008738:	2202      	movs	r2, #2
 800873a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800873c:	4b14      	ldr	r3, [pc, #80]	; (8008790 <USBD_LL_Init+0x94>)
 800873e:	2200      	movs	r2, #0
 8008740:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <USBD_LL_Init+0x94>)
 8008744:	2200      	movs	r2, #0
 8008746:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008748:	4b11      	ldr	r3, [pc, #68]	; (8008790 <USBD_LL_Init+0x94>)
 800874a:	2200      	movs	r2, #0
 800874c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800874e:	4b10      	ldr	r3, [pc, #64]	; (8008790 <USBD_LL_Init+0x94>)
 8008750:	2201      	movs	r2, #1
 8008752:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008754:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <USBD_LL_Init+0x94>)
 8008756:	2200      	movs	r2, #0
 8008758:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800875a:	480d      	ldr	r0, [pc, #52]	; (8008790 <USBD_LL_Init+0x94>)
 800875c:	f7fa fb34 	bl	8002dc8 <HAL_PCD_Init>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008766:	f7f8 f90b 	bl	8000980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800876a:	2180      	movs	r1, #128	; 0x80
 800876c:	4808      	ldr	r0, [pc, #32]	; (8008790 <USBD_LL_Init+0x94>)
 800876e:	f7fb fc92 	bl	8004096 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008772:	2240      	movs	r2, #64	; 0x40
 8008774:	2100      	movs	r1, #0
 8008776:	4806      	ldr	r0, [pc, #24]	; (8008790 <USBD_LL_Init+0x94>)
 8008778:	f7fb fc46 	bl	8004008 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800877c:	2280      	movs	r2, #128	; 0x80
 800877e:	2101      	movs	r1, #1
 8008780:	4803      	ldr	r0, [pc, #12]	; (8008790 <USBD_LL_Init+0x94>)
 8008782:	f7fb fc41 	bl	8004008 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20001bec 	.word	0x20001bec

08008794 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fa fc29 	bl	8003002 <HAL_PCD_Start>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f942 	bl	8008a40 <USBD_Get_USB_Status>
 80087bc:	4603      	mov	r3, r0
 80087be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	4608      	mov	r0, r1
 80087d4:	4611      	mov	r1, r2
 80087d6:	461a      	mov	r2, r3
 80087d8:	4603      	mov	r3, r0
 80087da:	70fb      	strb	r3, [r7, #3]
 80087dc:	460b      	mov	r3, r1
 80087de:	70bb      	strb	r3, [r7, #2]
 80087e0:	4613      	mov	r3, r2
 80087e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087f2:	78bb      	ldrb	r3, [r7, #2]
 80087f4:	883a      	ldrh	r2, [r7, #0]
 80087f6:	78f9      	ldrb	r1, [r7, #3]
 80087f8:	f7fb f80d 	bl	8003816 <HAL_PCD_EP_Open>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	4618      	mov	r0, r3
 8008804:	f000 f91c 	bl	8008a40 <USBD_Get_USB_Status>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800880c:	7bbb      	ldrb	r3, [r7, #14]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7fb f856 	bl	80038e6 <HAL_PCD_EP_Close>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 f8fd 	bl	8008a40 <USBD_Get_USB_Status>
 8008846:	4603      	mov	r3, r0
 8008848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884a:	7bbb      	ldrb	r3, [r7, #14]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7fb f92e 	bl	8003ad4 <HAL_PCD_EP_SetStall>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 f8de 	bl	8008a40 <USBD_Get_USB_Status>
 8008884:	4603      	mov	r3, r0
 8008886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008888:	7bbb      	ldrb	r3, [r7, #14]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088ac:	78fa      	ldrb	r2, [r7, #3]
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fb f973 	bl	8003b9c <HAL_PCD_EP_ClrStall>
 80088b6:	4603      	mov	r3, r0
 80088b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 f8bf 	bl	8008a40 <USBD_Get_USB_Status>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	da0b      	bge.n	8008904 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088f2:	68f9      	ldr	r1, [r7, #12]
 80088f4:	4613      	mov	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	1a9b      	subs	r3, r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	440b      	add	r3, r1
 80088fe:	333e      	adds	r3, #62	; 0x3e
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	e00b      	b.n	800891c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800890a:	68f9      	ldr	r1, [r7, #12]
 800890c:	4613      	mov	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800891a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	4611      	mov	r1, r2
 8008946:	4618      	mov	r0, r3
 8008948:	f7fa ff40 	bl	80037cc <HAL_PCD_SetAddress>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f874 	bl	8008a40 <USBD_Get_USB_Status>
 8008958:	4603      	mov	r3, r0
 800895a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800895c:	7bbb      	ldrb	r3, [r7, #14]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	603b      	str	r3, [r7, #0]
 8008972:	460b      	mov	r3, r1
 8008974:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008984:	7af9      	ldrb	r1, [r7, #11]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	f7fb f859 	bl	8003a40 <HAL_PCD_EP_Transmit>
 800898e:	4603      	mov	r3, r0
 8008990:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f853 	bl	8008a40 <USBD_Get_USB_Status>
 800899a:	4603      	mov	r3, r0
 800899c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800899e:	7dbb      	ldrb	r3, [r7, #22]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	460b      	mov	r3, r1
 80089b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089c6:	7af9      	ldrb	r1, [r7, #11]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	f7fa ffd5 	bl	800397a <HAL_PCD_EP_Receive>
 80089d0:	4603      	mov	r3, r0
 80089d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f832 	bl	8008a40 <USBD_Get_USB_Status>
 80089dc:	4603      	mov	r3, r0
 80089de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fb f805 	bl	8003a10 <HAL_PCD_EP_GetRxCount>
 8008a06:	4603      	mov	r3, r0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a18:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <USBD_static_malloc+0x18>)
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	200004f8 	.word	0x200004f8

08008a2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d817      	bhi.n	8008a84 <USBD_Get_USB_Status+0x44>
 8008a54:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <USBD_Get_USB_Status+0x1c>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008a73 	.word	0x08008a73
 8008a64:	08008a79 	.word	0x08008a79
 8008a68:	08008a7f 	.word	0x08008a7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a70:	e00b      	b.n	8008a8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a72:	2303      	movs	r3, #3
 8008a74:	73fb      	strb	r3, [r7, #15]
    break;
 8008a76:	e008      	b.n	8008a8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7c:	e005      	b.n	8008a8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	73fb      	strb	r3, [r7, #15]
    break;
 8008a82:	e002      	b.n	8008a8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a84:	2303      	movs	r3, #3
 8008a86:	73fb      	strb	r3, [r7, #15]
    break;
 8008a88:	bf00      	nop
  }
  return usb_status;
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <__cxa_pure_virtual>:
 8008a98:	b508      	push	{r3, lr}
 8008a9a:	f000 f80d 	bl	8008ab8 <_ZSt9terminatev>

08008a9e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008a9e:	b508      	push	{r3, lr}
 8008aa0:	4780      	blx	r0
 8008aa2:	f000 f80e 	bl	8008ac2 <abort>
	...

08008aa8 <_ZSt13get_terminatev>:
 8008aa8:	4b02      	ldr	r3, [pc, #8]	; (8008ab4 <_ZSt13get_terminatev+0xc>)
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	f3bf 8f5b 	dmb	ish
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	20000180 	.word	0x20000180

08008ab8 <_ZSt9terminatev>:
 8008ab8:	b508      	push	{r3, lr}
 8008aba:	f7ff fff5 	bl	8008aa8 <_ZSt13get_terminatev>
 8008abe:	f7ff ffee 	bl	8008a9e <_ZN10__cxxabiv111__terminateEPFvvE>

08008ac2 <abort>:
 8008ac2:	b508      	push	{r3, lr}
 8008ac4:	2006      	movs	r0, #6
 8008ac6:	f000 f86b 	bl	8008ba0 <raise>
 8008aca:	2001      	movs	r0, #1
 8008acc:	f7f8 fff4 	bl	8001ab8 <_exit>

08008ad0 <__errno>:
 8008ad0:	4b01      	ldr	r3, [pc, #4]	; (8008ad8 <__errno+0x8>)
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	20000184 	.word	0x20000184

08008adc <__libc_init_array>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	4d0d      	ldr	r5, [pc, #52]	; (8008b14 <__libc_init_array+0x38>)
 8008ae0:	4c0d      	ldr	r4, [pc, #52]	; (8008b18 <__libc_init_array+0x3c>)
 8008ae2:	1b64      	subs	r4, r4, r5
 8008ae4:	10a4      	asrs	r4, r4, #2
 8008ae6:	2600      	movs	r6, #0
 8008ae8:	42a6      	cmp	r6, r4
 8008aea:	d109      	bne.n	8008b00 <__libc_init_array+0x24>
 8008aec:	4d0b      	ldr	r5, [pc, #44]	; (8008b1c <__libc_init_array+0x40>)
 8008aee:	4c0c      	ldr	r4, [pc, #48]	; (8008b20 <__libc_init_array+0x44>)
 8008af0:	f000 f872 	bl	8008bd8 <_init>
 8008af4:	1b64      	subs	r4, r4, r5
 8008af6:	10a4      	asrs	r4, r4, #2
 8008af8:	2600      	movs	r6, #0
 8008afa:	42a6      	cmp	r6, r4
 8008afc:	d105      	bne.n	8008b0a <__libc_init_array+0x2e>
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b04:	4798      	blx	r3
 8008b06:	3601      	adds	r6, #1
 8008b08:	e7ee      	b.n	8008ae8 <__libc_init_array+0xc>
 8008b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0e:	4798      	blx	r3
 8008b10:	3601      	adds	r6, #1
 8008b12:	e7f2      	b.n	8008afa <__libc_init_array+0x1e>
 8008b14:	08008c94 	.word	0x08008c94
 8008b18:	08008c94 	.word	0x08008c94
 8008b1c:	08008c94 	.word	0x08008c94
 8008b20:	08008c9c 	.word	0x08008c9c

08008b24 <memcpy>:
 8008b24:	440a      	add	r2, r1
 8008b26:	4291      	cmp	r1, r2
 8008b28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b2c:	d100      	bne.n	8008b30 <memcpy+0xc>
 8008b2e:	4770      	bx	lr
 8008b30:	b510      	push	{r4, lr}
 8008b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b3a:	4291      	cmp	r1, r2
 8008b3c:	d1f9      	bne.n	8008b32 <memcpy+0xe>
 8008b3e:	bd10      	pop	{r4, pc}

08008b40 <memset>:
 8008b40:	4402      	add	r2, r0
 8008b42:	4603      	mov	r3, r0
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d100      	bne.n	8008b4a <memset+0xa>
 8008b48:	4770      	bx	lr
 8008b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4e:	e7f9      	b.n	8008b44 <memset+0x4>

08008b50 <_raise_r>:
 8008b50:	291f      	cmp	r1, #31
 8008b52:	b538      	push	{r3, r4, r5, lr}
 8008b54:	4604      	mov	r4, r0
 8008b56:	460d      	mov	r5, r1
 8008b58:	d904      	bls.n	8008b64 <_raise_r+0x14>
 8008b5a:	2316      	movs	r3, #22
 8008b5c:	6003      	str	r3, [r0, #0]
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b66:	b112      	cbz	r2, 8008b6e <_raise_r+0x1e>
 8008b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b6c:	b94b      	cbnz	r3, 8008b82 <_raise_r+0x32>
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 f830 	bl	8008bd4 <_getpid_r>
 8008b74:	462a      	mov	r2, r5
 8008b76:	4601      	mov	r1, r0
 8008b78:	4620      	mov	r0, r4
 8008b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7e:	f000 b817 	b.w	8008bb0 <_kill_r>
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d00a      	beq.n	8008b9c <_raise_r+0x4c>
 8008b86:	1c59      	adds	r1, r3, #1
 8008b88:	d103      	bne.n	8008b92 <_raise_r+0x42>
 8008b8a:	2316      	movs	r3, #22
 8008b8c:	6003      	str	r3, [r0, #0]
 8008b8e:	2001      	movs	r0, #1
 8008b90:	e7e7      	b.n	8008b62 <_raise_r+0x12>
 8008b92:	2400      	movs	r4, #0
 8008b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b98:	4628      	mov	r0, r5
 8008b9a:	4798      	blx	r3
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	e7e0      	b.n	8008b62 <_raise_r+0x12>

08008ba0 <raise>:
 8008ba0:	4b02      	ldr	r3, [pc, #8]	; (8008bac <raise+0xc>)
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f7ff bfd3 	b.w	8008b50 <_raise_r>
 8008baa:	bf00      	nop
 8008bac:	20000184 	.word	0x20000184

08008bb0 <_kill_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	; (8008bd0 <_kill_r+0x20>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	f7f8 ff6b 	bl	8001a98 <_kill>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d102      	bne.n	8008bcc <_kill_r+0x1c>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	b103      	cbz	r3, 8008bcc <_kill_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop
 8008bd0:	20001ff4 	.word	0x20001ff4

08008bd4 <_getpid_r>:
 8008bd4:	f7f8 bf58 	b.w	8001a88 <_getpid>

08008bd8 <_init>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr

08008be4 <_fini>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	bf00      	nop
 8008be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bea:	bc08      	pop	{r3}
 8008bec:	469e      	mov	lr, r3
 8008bee:	4770      	bx	lr
