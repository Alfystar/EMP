
STM_EMP_usb_callBack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d2c  08008d2c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d34  08008d34  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f84  200001e8  08008f2c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000216c  08008f2c  0002216c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2da  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004315  00000000  00000000  0003e4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00042808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  00043c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d89  00000000  00000000  00044f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196f5  00000000  00000000  0006ccb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfacf  00000000  00000000  000863ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155e7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005710  00000000  00000000  00155ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e8 	.word	0x200001e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c70 	.word	0x08008c70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ec 	.word	0x200001ec
 80001c4:	08008c70 	.word	0x08008c70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
 * @retval int
 */

MP_ST_usb<packLinux2Ard, packArd2Linux, STM32MP_templateDefault()> MP_St;

int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f001 fb89 	bl	8001bdc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f82d 	bl	8000528 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 f95f 	bl	8000790 <_ZL12MX_GPIO_Initv>
	MX_I2C1_Init();
 80004d2:	f000 f8b9 	bl	8000648 <_ZL12MX_I2C1_Initv>
	MX_I2S3_Init();
 80004d6:	f000 f8eb 	bl	80006b0 <_ZL12MX_I2S3_Initv>
	MX_SPI1_Init();
 80004da:	f000 f91d 	bl	8000718 <_ZL12MX_SPI1_Initv>
	MX_USB_DEVICE_Init();
 80004de:	f007 fdff 	bl	80080e0 <MX_USB_DEVICE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */

	packArd2Linux pWrite { 0, "Hi sys" };
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <main+0x60>)
 80004e4:	f107 0318 	add.w	r3, r7, #24
 80004e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packLinux2Ard pRead;
	HAL_Delay(1000);
 80004ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f2:	f001 fbe5 	bl	8001cc0 <HAL_Delay>

	while (1) {
		MP_St.getData_wait(&pRead);
 80004f6:	463b      	mov	r3, r7
 80004f8:	4619      	mov	r1, r3
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <main+0x64>)
 80004fc:	f000 fa6d 	bl	80009da <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_>
		pWrite.num = pRead.num+1;
 8000500:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000504:	b29b      	uxth	r3, r3
 8000506:	3301      	adds	r3, #1
 8000508:	b29b      	uxth	r3, r3
 800050a:	b21b      	sxth	r3, r3
 800050c:	833b      	strh	r3, [r7, #24]
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
/// Data Send & Get
/*    On success return 0
 *    On fail return -1
 */

templatePar() int MP<templateParCall()>::packSend(pOut *pack) { return packSend(pack, sizeof(pOut)); }
 8000514:	220c      	movs	r2, #12
 8000516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <main+0x64>)
 800051a:	f000 faf4 	bl	8000b06 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t>
		MP_St.getData_wait(&pRead);
 800051e:	e7ea      	b.n	80004f6 <main+0x36>
 8000520:	08008c88 	.word	0x08008c88
 8000524:	200002f8 	.word	0x200002f8

08000528 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b098      	sub	sp, #96	; 0x60
 800052c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800052e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f008 fb4e 	bl	8008bd8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b38      	ldr	r3, [pc, #224]	; (8000640 <_Z18SystemClock_Configv+0x118>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <_Z18SystemClock_Configv+0x118>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6413      	str	r3, [r2, #64]	; 0x40
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <_Z18SystemClock_Configv+0x118>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <_Z18SystemClock_Configv+0x11c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <_Z18SystemClock_Configv+0x11c>)
 8000580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <_Z18SystemClock_Configv+0x11c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005a6:	2308      	movs	r3, #8
 80005a8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ae:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fdd3 	bl	8004168 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf14      	ite	ne
 80005c8:	2301      	movne	r3, #1
 80005ca:	2300      	moveq	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <_Z18SystemClock_Configv+0xae>
		Error_Handler();
 80005d2:	f000 f9db 	bl	800098c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 f82f 	bl	8004658 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <_Z18SystemClock_Configv+0xe6>
		Error_Handler();
 800060a:	f000 f9bf 	bl	800098c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000612:	23c0      	movs	r3, #192	; 0xc0
 8000614:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fa02 	bl	8004a28 <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf14      	ite	ne
 800062a:	2301      	movne	r3, #1
 800062c:	2300      	moveq	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <_Z18SystemClock_Configv+0x110>
		Error_Handler();
 8000634:	f000 f9aa 	bl	800098c <Error_Handler>
	}
}
 8000638:	bf00      	nop
 800063a:	3760      	adds	r7, #96	; 0x60
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <_ZL12MX_I2C1_Initv+0x60>)
 8000650:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000654:	4a15      	ldr	r2, [pc, #84]	; (80006ac <_ZL12MX_I2C1_Initv+0x64>)
 8000656:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000686:	f001 fe07 	bl	8002298 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 800069a:	f000 f977 	bl	800098c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000204 	.word	0x20000204
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <_ZL12MX_I2S3_Initv>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <_ZL12MX_I2S3_Initv+0x60>)
 80006b8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <_ZL12MX_I2S3_Initv+0x64>)
 80006da:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006f0:	f001 ff16 	bl	8002520 <HAL_I2S_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <_ZL12MX_I2S3_Initv+0x58>
		Error_Handler();
 8000704:	f000 f942 	bl	800098c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000258 	.word	0x20000258
 8000710:	40003c00 	.word	0x40003c00
 8000714:	00017700 	.word	0x00017700

08000718 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800071e:	4a1b      	ldr	r2, [pc, #108]	; (800078c <_ZL12MX_SPI1_Initv+0x74>)
 8000720:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000764:	220a      	movs	r2, #10
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800076a:	f004 fa9d 	bl	8004ca8 <HAL_SPI_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800077e:	f000 f905 	bl	800098c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200002a0 	.word	0x200002a0
 800078c:	40013000 	.word	0x40013000

08000790 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b71      	ldr	r3, [pc, #452]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a70      	ldr	r2, [pc, #448]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b6e      	ldr	r3, [pc, #440]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b6a      	ldr	r3, [pc, #424]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a69      	ldr	r2, [pc, #420]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b67      	ldr	r3, [pc, #412]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b63      	ldr	r3, [pc, #396]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a62      	ldr	r2, [pc, #392]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b60      	ldr	r3, [pc, #384]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b5c      	ldr	r3, [pc, #368]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a5b      	ldr	r2, [pc, #364]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b59      	ldr	r3, [pc, #356]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a54      	ldr	r2, [pc, #336]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b52      	ldr	r3, [pc, #328]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b4e      	ldr	r3, [pc, #312]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a4d      	ldr	r2, [pc, #308]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b4b      	ldr	r3, [pc, #300]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4848      	ldr	r0, [pc, #288]	; (8000974 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000854:	f001 fd06 	bl	8002264 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4846      	ldr	r0, [pc, #280]	; (8000978 <_ZL12MX_GPIO_Initv+0x1e8>)
 800085e:	f001 fd01 	bl	8002264 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000868:	4844      	ldr	r0, [pc, #272]	; (800097c <_ZL12MX_GPIO_Initv+0x1ec>)
 800086a:	f001 fcfb 	bl	8002264 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	483b      	ldr	r0, [pc, #236]	; (8000974 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000886:	f001 fb51 	bl	8001f2c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4835      	ldr	r0, [pc, #212]	; (8000978 <_ZL12MX_GPIO_Initv+0x1e8>)
 80008a2:	f001 fb43 	bl	8001f2c <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	482d      	ldr	r0, [pc, #180]	; (8000978 <_ZL12MX_GPIO_Initv+0x1e8>)
 80008c2:	f001 fb33 	bl	8001f2c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <_ZL12MX_GPIO_Initv+0x1f0>)
 80008cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	482a      	ldr	r0, [pc, #168]	; (8000984 <_ZL12MX_GPIO_Initv+0x1f4>)
 80008da:	f001 fb27 	bl	8001f2c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80008de:	2304      	movs	r3, #4
 80008e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4825      	ldr	r0, [pc, #148]	; (8000988 <_ZL12MX_GPIO_Initv+0x1f8>)
 80008f2:	f001 fb1b 	bl	8001f2c <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000908:	2305      	movs	r3, #5
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	481d      	ldr	r0, [pc, #116]	; (8000988 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000914:	f001 fb0a 	bl	8001f2c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000918:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <_ZL12MX_GPIO_Initv+0x1ec>)
 8000932:	f001 fafb 	bl	8001f2c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000936:	2320      	movs	r3, #32
 8000938:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <_ZL12MX_GPIO_Initv+0x1ec>)
 800094a:	f001 faef 	bl	8001f2c <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000954:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000962:	f001 fae3 	bl	8001f2c <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	10120000 	.word	0x10120000
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400

0800098c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>

08000996 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE10_callBacksC1Ev>:
  typedef struct _callBacks {
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev>:

// Parametric instantiation based on the compiled template class
templatePar()MP_ST_usb<templateParCall()> *MP_ST_usb<templateParCall()>::instance = nullptr;

templatePar()
MP_ST_usb<templateParCall()>::MP_ST_usb() : MP_ST_usb<templateParCall()>(callBacksMP()) {
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffe7 	bl	8000996 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE10_callBacksC1Ev>
 80009c8:	68f9      	ldr	r1, [r7, #12]
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f824 	bl	8000a18 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE>
}
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_>:


templatePar() MP_ST_usb<templateParCall()>::~MP_ST_usb() {
}

templatePar()int16_t MP_ST_usb<templateParCall()>::getData_wait(pIn *pack) {
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
	while (this->dataAvailable() < 1) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f858 	bl	8000a9c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf0c      	ite	eq
 80009f2:	2301      	moveq	r3, #1
 80009f4:	2300      	movne	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d000      	beq.n	80009fe <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_+0x24>
 80009fc:	e7f2      	b.n	80009e4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_+0xa>
	}
	return this->getData_try(pack);
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6839      	ldr	r1, [r7, #0]
 8000a08:	4610      	mov	r0, r2
 8000a0a:	4798      	blx	r3
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE>:
MP_ST_usb<templateParCall()>::MP_ST_usb(callBacksMP callBack) : MP<templateParCall()>(callBack) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6839      	ldr	r1, [r7, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f90c 	bl	8000c44 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS3_10_callBacksE>
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x50>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f927 	bl	8000c8c <_ZN14CircularBufferIhLt368EEC1Ev>
	byteSend.memClean();
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f935 	bl	8000cb4 <_ZN14CircularBufferIhLt368EE8memCleanEv>
	instance = this;
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x54>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6013      	str	r3, [r2, #0]
	USBD_Interface_fops_FS.Receive = MP_ST_usb<templateParCall()>::isrRead;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x58>)
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x5c>)
 8000a54:	60da      	str	r2, [r3, #12]
	USBD_Interface_fops_FS.TransmitCplt = MP_ST_usb<templateParCall()>::isrSendNotify;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x58>)
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS_2MPIS1_S2_Lb1ELt16ELt4EE10_callBacksE+0x60>)
 8000a5a:	611a      	str	r2, [r3, #16]
}
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	08008ce4 	.word	0x08008ce4
 8000a6c:	20000664 	.word	0x20000664
 8000a70:	2000011c 	.word	0x2000011c
 8000a74:	08000cf1 	.word	0x08000cf1
 8000a78:	08000d35 	.word	0x08000d35

08000a7c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EED1Ev>:
templatePar() MP_ST_usb<templateParCall()>::~MP_ST_usb() {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
}
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EED1Ev+0x1c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	08008ce4 	.word	0x08008ce4

08000a9c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>:
    return ret;

  return 0;
}

templatePar() uint16_t MP<templateParCall()>::dataAvailable() { return this->packRecive.usedSpace(); }
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f998 	bl	8000de0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_>:

// On success: copy pack Logic, inside *pack are saved the tail data if possible,
// On fail: return -1 and *pack aren't touch
templatePar() int16_t MP<templateParCall()>::getData_try(pIn *pack) {
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
  if (packRecive.isEmpty())
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f9ab 	bl	8000e26 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d002      	beq.n	8000adc <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_+0x22>
    return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	e010      	b.n	8000afe <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_+0x44>
  // If data are dataAvailable
  memcpy(pack, packRecive.getPtr(), sizeof(pIn));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f9b4 	bl	8000e50 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2216      	movs	r2, #22
 8000aec:	4619      	mov	r1, r3
 8000aee:	6838      	ldr	r0, [r7, #0]
 8000af0:	f008 f864 	bl	8008bbc <memcpy>
  return dataAvailable();
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ffd1 	bl	8000a9c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b21b      	sxth	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t>:
templatePar() int MP<templateParCall()>::packSend(pOut *pack, uint16_t bSize) {
 8000b06:	b5b0      	push	{r4, r5, r7, lr}
 8000b08:	b090      	sub	sp, #64	; 0x40
 8000b0a:	af02      	add	r7, sp, #8
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	4613      	mov	r3, r2
 8000b12:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000b14:	466b      	mov	r3, sp
 8000b16:	461d      	mov	r5, r3
  int ret = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t packSize = bSize + CRC8_enable();
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	867b      	strh	r3, [r7, #50]	; 0x32
  uint8_t packBuf[packSize]; // CRC8 may add 1 byte
 8000b22:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b24:	1e5c      	subs	r4, r3, #1
 8000b26:	637c      	str	r4, [r7, #52]	; 0x34
 8000b28:	4623      	mov	r3, r4
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f04f 0100 	mov.w	r1, #0
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	00cb      	lsls	r3, r1, #3
 8000b3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b40:	00c2      	lsls	r2, r0, #3
 8000b42:	4623      	mov	r3, r4
 8000b44:	3301      	adds	r3, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f04f 0100 	mov.w	r1, #0
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	f04f 0300 	mov.w	r3, #0
 8000b54:	00cb      	lsls	r3, r1, #3
 8000b56:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b5a:	00c2      	lsls	r2, r0, #3
 8000b5c:	4623      	mov	r3, r4
 8000b5e:	3301      	adds	r3, #1
 8000b60:	3307      	adds	r3, #7
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	ebad 0d03 	sub.w	sp, sp, r3
 8000b6a:	ab02      	add	r3, sp, #8
 8000b6c:	3300      	adds	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  memcpy(packBuf, pack, bSize);
 8000b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b72:	88fa      	ldrh	r2, [r7, #6]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f008 f820 	bl	8008bbc <memcpy>
    packBuf[packSize - 1] = crc8_stream((uint8_t *)pack, bSize);
 8000b7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b7e:	1e5c      	subs	r4, r3, #1
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	4619      	mov	r1, r3
 8000b84:	68b8      	ldr	r0, [r7, #8]
 8000b86:	f005 fdf9 	bl	800677c <_Z11crc8_streamPht>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b90:	551a      	strb	r2, [r3, r4]
  uint16_t sendSize = packSize + 1; // Cobs add 1 byte
 8000b92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b94:	3301      	adds	r3, #1
 8000b96:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t sendBuf[sendSize + 1]; // +1 for the final 0
 8000b98:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8000b9a:	623c      	str	r4, [r7, #32]
 8000b9c:	4623      	mov	r3, r4
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f04f 0100 	mov.w	r1, #0
 8000ba6:	f04f 0200 	mov.w	r2, #0
 8000baa:	f04f 0300 	mov.w	r3, #0
 8000bae:	00cb      	lsls	r3, r1, #3
 8000bb0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bb4:	00c2      	lsls	r2, r0, #3
 8000bb6:	4623      	mov	r3, r4
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f04f 0100 	mov.w	r1, #0
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	00cb      	lsls	r3, r1, #3
 8000bca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bce:	00c2      	lsls	r2, r0, #3
 8000bd0:	4623      	mov	r3, r4
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	3307      	adds	r3, #7
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	ebad 0d03 	sub.w	sp, sp, r3
 8000bde:	ab02      	add	r3, sp, #8
 8000be0:	3300      	adds	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  cobs_encode_result res = cobs_encode(sendBuf, sendSize, packBuf, packSize);
 8000be4:	69f9      	ldr	r1, [r7, #28]
 8000be6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000be8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000bea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000bec:	f107 0014 	add.w	r0, r7, #20
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	f005 fc06 	bl	8006404 <cobs_encode>
  if (res.status != COBS_ENCODE_OK)
 8000bf8:	7e3b      	ldrb	r3, [r7, #24]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0xfe>
    return -1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c02:	e019      	b.n	8000c38 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x132>
  sendBuf[sendSize] = '\0';
 8000c04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	54d1      	strb	r1, [r2, r3]
  if ((ret = packSend_Concrete(sendBuf, sendSize + 1)) != 0)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3308      	adds	r3, #8
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	69f9      	ldr	r1, [r7, #28]
 8000c16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c18:	3201      	adds	r2, #1
 8000c1a:	b292      	uxth	r2, r2
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	4798      	blx	r3
 8000c20:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bf14      	ite	ne
 8000c28:	2301      	movne	r3, #1
 8000c2a:	2300      	moveq	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x130>
    return ret;
 8000c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c34:	e000      	b.n	8000c38 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x132>
  return 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	46ad      	mov	sp, r5
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3738      	adds	r7, #56	; 0x38
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c44 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS3_10_callBacksE>:
templatePar() MP<templateParCall()>::MP(callBacksMP clback_) : clback(clback_) { bufClear(); }
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1ENS3_10_callBacksE+0x44>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	811a      	strh	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	330a      	adds	r3, #10
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f811 	bl	8000c8c <_ZN14CircularBufferIhLt368EEC1Ev>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f905 	bl	8000e80 <_ZN14CircularBufferI14_packLinux2ArdLt4EEC1Ev>
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f916 	bl	8000ea8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8bufClearEv>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	08008d00 	.word	0x08008d00

08000c8c <_ZN14CircularBufferIhLt368EEC1Ev>:
  uint16_t tailInc();
  uint16_t tailAdd(uint16_t len);
  uint16_t tailSet(uint16_t pos); // in case of error can go back
};

template <class T, uint16_t nElem> CircularBuffer<T, nElem>::CircularBuffer() {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  this->head_ = 0;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
  this->tail_ = 0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  memClean();
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f805 	bl	8000cb4 <_ZN14CircularBufferIhLt368EE8memCleanEv>
}
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZN14CircularBufferIhLt368EE8memCleanEv>:

template <class T, uint16_t nElem> void CircularBuffer<T, nElem>::memClean() {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  for (uint16_t i = 0; i < real_nElem; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	81fb      	strh	r3, [r7, #14]
 8000cc0:	89fb      	ldrh	r3, [r7, #14]
 8000cc2:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000cc6:	d80b      	bhi.n	8000ce0 <_ZN14CircularBufferIhLt368EE8memCleanEv+0x2c>
    memset(&this->buf_[i], 0, sizeof(T));
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f007 ff80 	bl	8008bd8 <memset>
  for (uint16_t i = 0; i < real_nElem; i++)
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	81fb      	strh	r3, [r7, #14]
 8000cde:	e7ef      	b.n	8000cc0 <_ZN14CircularBufferIhLt368EE8memCleanEv+0xc>
  reset();
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 f8f7 	bl	8000ed4 <_ZN14CircularBufferIhLt368EE5resetEv>
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
templatePar()int8_t MP_ST_usb<templateParCall()>::isrRead(uint8_t *Buf, uint32_t *Len) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	MP_ST_usb<templateParCall()> *inst = MP_ST_usb<templateParCall()>::instance;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm+0x3c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	60fb      	str	r3, [r7, #12]
	inst->byteRecive.putArray(Buf, *Len);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f103 000a 	add.w	r0, r3, #10
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f000 f8f0 	bl	8000ef4 <_ZN14CircularBufferIhLt368EE8putArrayEPht>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm+0x40>)
 8000d16:	f006 f84f 	bl	8006db8 <USBD_CDC_ReceivePacket>
	inst->byteParsing();
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 f8fb 	bl	8000f18 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv>
	return USBD_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000664 	.word	0x20000664
 8000d30:	20000890 	.word	0x20000890

08000d34 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh>:
templatePar()int8_t MP_ST_usb<templateParCall()>::isrSendNotify(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	71fb      	strb	r3, [r7, #7]
	MP_ST_usb<templateParCall()> *inst = MP_ST_usb<templateParCall()>::instance;
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0xa8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	61fb      	str	r3, [r7, #28]
	if (inst->byteSend.usedSpace()) {
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f9a3 	bl	800109a <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	bf14      	ite	ne
 8000d5a:	2301      	movne	r3, #1
 8000d5c:	2300      	moveq	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d035      	beq.n	8000dd0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9c>
		len = inst->byteSend.usedSpaceLinear();
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f9b9 	bl	80010e2 <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv>
 8000d70:	4603      	mov	r3, r0
 8000d72:	837b      	strh	r3, [r7, #26]
		uint8_t *tailPtr = inst->byteSend.getTailPtr();
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f9d3 	bl	8001126 <_ZN14CircularBufferIhLt368EE10getTailPtrEv>
 8000d80:	6178      	str	r0, [r7, #20]
		uint16_t tailBackUp = inst->byteSend.getTail();
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f9dc 	bl	8001146 <_ZNK14CircularBufferIhLt368EE7getTailEv>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	827b      	strh	r3, [r7, #18]
		inst->byteSend.tailAdd(len);
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000d98:	8b7a      	ldrh	r2, [r7, #26]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f9df 	bl	8001160 <_ZN14CircularBufferIhLt368EE7tailAddEt>
		if (CDC_Transmit_FS(tailPtr, len) == USBD_BUSY) {
 8000da2:	8b7b      	ldrh	r3, [r7, #26]
 8000da4:	4619      	mov	r1, r3
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f007 fa58 	bl	800825c <CDC_Transmit_FS>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d009      	beq.n	8000dd0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9c>
			inst->byteSend.tailSet(tailBackUp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 8000dc2:	8a7a      	ldrh	r2, [r7, #18]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fa00 	bl	80011cc <_ZN14CircularBufferIhLt368EE7tailSetEt>
			return USBD_FAIL;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9e>
	return USBD_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000664 	.word	0x20000664

08000de0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>:
template <class T, uint16_t nElem>
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
}

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpace() const {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  // This 2 block are only to speed-up, formula always function
  if (isFull())
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 fa05 	bl	80011f8 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x18>
    return nElem;
 8000df4:	2304      	movs	r3, #4
 8000df6:	e012      	b.n	8000e1e <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x3e>
  if (isEmpty())
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f814 	bl	8000e26 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x28>
    return 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e00a      	b.n	8000e1e <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x3e>

  return countSlotBetween(tail_, head_);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8000e14:	461a      	mov	r2, r3
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 fa12 	bl	8001240 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt>
 8000e1c:	4603      	mov	r3, r0
  // return modSub(head_, tail_, real_nElem); // One Free Slot Logic
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isEmpty() const { return head_ == tail_; }
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv>:
template <class T, uint16_t nElem> T *CircularBuffer<T, nElem>::getPtr() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if (isEmpty()) {
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ffe4 	bl	8000e26 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv+0x18>
    return nullptr;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e007      	b.n	8000e78 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv+0x28>
  auto val = getTailPtr();
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fa09 	bl	8001280 <_ZN14CircularBufferI14_packLinux2ArdLt4EE10getTailPtrEv>
 8000e6e:	60f8      	str	r0, [r7, #12]
  this->tailInc();
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 fa18 	bl	80012a6 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailIncEv>
  return val;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_ZN14CircularBufferI14_packLinux2ArdLt4EEC1Ev>:
template <class T, uint16_t nElem> CircularBuffer<T, nElem>::CircularBuffer() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  this->head_ = 0;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  this->tail_ = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  memClean();
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fa11 	bl	80012c0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>
}
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8bufClearEv>:
templatePar() void MP<templateParCall()>::bufClear() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  byteRecive.memClean();
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	330a      	adds	r3, #10
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fefd 	bl	8000cb4 <_ZN14CircularBufferIhLt368EE8memCleanEv>
  packRecive.memClean();
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f9fd 	bl	80012c0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>
  lastStartIndex = 0;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	811a      	strh	r2, [r3, #8]
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZN14CircularBufferIhLt368EE5resetEv>:
template <class T, uint16_t nElem> inline void CircularBuffer<T, nElem>::reset() { head_ = tail_; }
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8b3 2174 	ldrh.w	r2, [r3, #372]	; 0x174
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN14CircularBufferIhLt368EE8putArrayEPht>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::putArray(T *item, uint16_t nItem) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	4613      	mov	r3, r2
 8000f00:	80fb      	strh	r3, [r7, #6]
  return putArray(item, nItem, sizeof(T));
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	2301      	movs	r3, #1
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 f9f8 	bl	80012fe <_ZN14CircularBufferIhLt368EE8putArrayEPhtt>
 8000f0e:	4603      	mov	r3, r0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv>:

templatePar() int MP<templateParCall()>::packSend_Concrete(uint8_t byteSend) { return packSend_Concrete(&byteSend, 1); }

/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// Byte parsing using CRC8 and COBS to
templatePar() uint16_t MP<templateParCall()>::byteParsing() {
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b092      	sub	sp, #72	; 0x48
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	6078      	str	r0, [r7, #4]
  uint8_t dato;
  uint16_t datoId;
  uint16_t packFound = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	87fb      	strh	r3, [r7, #62]	; 0x3e
  while (!byteRecive.isEmpty()) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	330a      	adds	r3, #10
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fa75 	bl	8001418 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80aa 	beq.w	8001090 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x178>
 8000f3c:	466b      	mov	r3, sp
 8000f3e:	461d      	mov	r5, r3
    // Get the byte and his position (if is a 0, need to be saved)
    dato = byteRecive.get(&datoId);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	330a      	adds	r3, #10
 8000f44:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fa79 	bl	8001442 <_ZN14CircularBufferIhLt368EE3getEPt>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if (dato != 0)
 8000f56:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 8091 	bne.w	8001082 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x16a>
      continue;

    /// ########################## COBS DECODE ##########################
    // NB:COBS protocol add 1 byte at the pack, At the start
    uint16_t COBSsrcSize = byteRecive.countSlotBetween(lastStartIndex, datoId);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f103 000a 	add.w	r0, r3, #10
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	891b      	ldrh	r3, [r3, #8]
 8000f6a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f000 fa7d 	bl	800146c <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>
 8000f72:	4603      	mov	r3, r0
 8000f74:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (COBSsrcSize - 1 > MAXPackINsize || COBSsrcSize < 2) {
 8000f76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000f78:	2b18      	cmp	r3, #24
 8000f7a:	d802      	bhi.n	8000f82 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x6a>
 8000f7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d805      	bhi.n	8000f8e <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x76>
      // Someting wrong, no 0 was recived in time, or too many zero are received
      // Anyway the pack are lost
      lastStartIndex = datoId + 1; // restart the logic from the next byte
 8000f82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f84:	3301      	adds	r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	811a      	strh	r2, [r3, #8]
      continue;
 8000f8c:	e07e      	b.n	800108c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x174>
    }
    // Fill the buffer for the decoding
    uint8_t COBSEncoded[COBSsrcSize];
 8000f8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000f90:	1e5c      	subs	r4, r3, #1
 8000f92:	637c      	str	r4, [r7, #52]	; 0x34
 8000f94:	4623      	mov	r3, r4
 8000f96:	3301      	adds	r3, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f04f 0100 	mov.w	r1, #0
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	00cb      	lsls	r3, r1, #3
 8000fa8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fac:	00c2      	lsls	r2, r0, #3
 8000fae:	4623      	mov	r3, r4
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f04f 0100 	mov.w	r1, #0
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	00cb      	lsls	r3, r1, #3
 8000fc2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fc6:	00c2      	lsls	r2, r0, #3
 8000fc8:	4623      	mov	r3, r4
 8000fca:	3301      	adds	r3, #1
 8000fcc:	3307      	adds	r3, #7
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000fd6:	ab02      	add	r3, sp, #8
 8000fd8:	3300      	adds	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
    byteRecive.memcpyCb(COBSEncoded, lastStartIndex, COBSsrcSize);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 000a 	add.w	r0, r3, #10
 8000fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	891a      	ldrh	r2, [r3, #8]
 8000fe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000fea:	f000 fa61 	bl	80014b0 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt>
    uint8_t COBSDecode[MAXPackINsize];

    cobs_decode_result res = cobs_decode(COBSDecode, MAXPackINsize, COBSEncoded, COBSsrcSize);
 8000fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ff0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ff2:	f107 000c 	add.w	r0, r7, #12
 8000ff6:	f107 0114 	add.w	r1, r7, #20
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	2217      	movs	r2, #23
 8001000:	f005 fa98 	bl	8006534 <cobs_decode>
    lastStartIndex = datoId + 1; // From now, in any case, datoId are the new lastStartIndex
 8001004:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001006:	3301      	adds	r3, #1
 8001008:	b29a      	uxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	811a      	strh	r2, [r3, #8]

    if (res.status != COBS_DECODE_OK) {
 800100e:	7c3b      	ldrb	r3, [r7, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d138      	bne.n	8001086 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x16e>
      continue;
    }
    /// ######################## CRC8 VALIDATION ########################
    if (CRC8_enable()) {
      uint8_t calcCRC = crc8_stream(COBSDecode, res.out_len - 1); // Last byte are the CRC
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b29b      	uxth	r3, r3
 8001018:	3b01      	subs	r3, #1
 800101a:	b29a      	uxth	r2, r3
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f005 fbaa 	bl	800677c <_Z11crc8_streamPht>
 8001028:	4603      	mov	r3, r0
 800102a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (calcCRC != COBSDecode[res.out_len - 1])
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001036:	4413      	add	r3, r2
 8001038:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800103c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001040:	429a      	cmp	r2, r3
 8001042:	d122      	bne.n	800108a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x172>
        continue; // CRC8 Fail!!!
    }
    packRecive.put((pIn *)COBSDecode, res.out_len - 1);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	b29b      	uxth	r3, r3
 800104e:	3b01      	subs	r3, #1
 8001050:	b29a      	uxth	r2, r3
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	f000 fa5c 	bl	8001514 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t>
    packTimeRefresh(); // from now, the pack are available to the system
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	330c      	adds	r3, #12
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	4798      	blx	r3
    packFound++;
 8001068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800106a:	3301      	adds	r3, #1
 800106c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    if (clback.pkDetect)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x166>
      clback.pkDetect(this);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
 800107e:	46ad      	mov	sp, r5
 8001080:	e750      	b.n	8000f24 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0xc>
      continue;
 8001082:	bf00      	nop
 8001084:	e002      	b.n	800108c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x174>
      continue;
 8001086:	bf00      	nop
 8001088:	e000      	b.n	800108c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x174>
        continue; // CRC8 Fail!!!
 800108a:	bf00      	nop
 800108c:	46ad      	mov	sp, r5
  while (!byteRecive.isEmpty()) {
 800108e:	e749      	b.n	8000f24 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0xc>
  } //  while (!byteRecive->isEmpty())
  return packFound;
 8001090:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8001092:	4618      	mov	r0, r3
 8001094:	3740      	adds	r7, #64	; 0x40
 8001096:	46bd      	mov	sp, r7
 8001098:	bdb0      	pop	{r4, r5, r7, pc}

0800109a <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpace() const {
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  if (isFull())
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fa62 	bl	800156c <_ZNK14CircularBufferIhLt368EE6isFullEv>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x1a>
    return nElem;
 80010ae:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80010b2:	e012      	b.n	80010da <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x40>
  if (isEmpty())
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f9af 	bl	8001418 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x2a>
    return 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e00a      	b.n	80010da <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x40>
  return countSlotBetween(tail_, head_);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8b3 1174 	ldrh.w	r1, [r3, #372]	; 0x174
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 80010d0:	461a      	mov	r2, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f9ca 	bl	800146c <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv>:

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpaceLinear() const {
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	if(tail_ <= head_)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f8b3 2174 	ldrh.w	r2, [r3, #372]	; 0x174
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d808      	bhi.n	800110c <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv+0x2a>
	    return head_ - tail_; // include empty case
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8b3 2172 	ldrh.w	r2, [r3, #370]	; 0x172
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	b29b      	uxth	r3, r3
 800110a:	e006      	b.n	800111a <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv+0x38>

    return real_nElem - tail_; // the end of the array are reach before the end of buffered
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001112:	f5c3 73b8 	rsb	r3, r3, #368	; 0x170
 8001116:	3301      	adds	r3, #1
 8001118:	b29b      	uxth	r3, r3
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_ZN14CircularBufferIhLt368EE10getTailPtrEv>:
template <class T, uint16_t nElem> inline T *CircularBuffer<T, nElem>::getTailPtr() { return &buf_[tail_]; }
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001134:	461a      	mov	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_ZNK14CircularBufferIhLt368EE7getTailEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::getTail() const { return tail_; }
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_ZN14CircularBufferIhLt368EE7tailAddEt>:
  return posOld;
}

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailAdd(uint16_t len) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
  if (usedSpace() < len)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff94 	bl	800109a <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	4293      	cmp	r3, r2
 800117a:	bf8c      	ite	hi
 800117c:	2301      	movhi	r3, #1
 800117e:	2300      	movls	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <_ZN14CircularBufferIhLt368EE7tailAddEt+0x2c>
    return -1;
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	e018      	b.n	80011be <_ZN14CircularBufferIhLt368EE7tailAddEt+0x5e>
  tail_ = (tail_ + len) % real_nElem;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001192:	461a      	mov	r2, r3
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4413      	add	r3, r2
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <_ZN14CircularBufferIhLt368EE7tailAddEt+0x68>)
 800119a:	fb82 1203 	smull	r1, r2, r2, r3
 800119e:	441a      	add	r2, r3
 80011a0:	1211      	asrs	r1, r2, #8
 80011a2:	17da      	asrs	r2, r3, #31
 80011a4:	1a8a      	subs	r2, r1, r2
 80011a6:	f240 1171 	movw	r1, #369	; 0x171
 80011aa:	fb01 f202 	mul.w	r2, r1, r2
 80011ae:	1a9a      	subs	r2, r3, r2
 80011b0:	b292      	uxth	r2, r2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  return tail_;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	b19ab5c5 	.word	0xb19ab5c5

080011cc <_ZN14CircularBufferIhLt368EE7tailSetEt>:

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailSet(uint16_t pos) {
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  uint16_t posOld = tail_;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 80011de:	81fb      	strh	r3, [r7, #14]
  tail_ = pos;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  return posOld;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isFull() const {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return head_ == modSub(tail_, 1, real_nElem);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001206:	4618      	mov	r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800120e:	1d19      	adds	r1, r3, #4
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv+0x44>)
 8001212:	fb83 2301 	smull	r2, r3, r3, r1
 8001216:	105a      	asrs	r2, r3, #1
 8001218:	17cb      	asrs	r3, r1, #31
 800121a:	1ad2      	subs	r2, r2, r3
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	1aca      	subs	r2, r1, r3
 8001224:	4290      	cmp	r0, r2
 8001226:	bf0c      	ite	eq
 8001228:	2301      	moveq	r3, #1
 800122a:	2300      	movne	r3, #0
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	66666667 	.word	0x66666667

08001240 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt>:
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	803b      	strh	r3, [r7, #0]
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
 8001250:	883a      	ldrh	r2, [r7, #0]
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	1d5a      	adds	r2, r3, #5
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt+0x3c>)
 800125a:	fb83 1302 	smull	r1, r3, r3, r2
 800125e:	1059      	asrs	r1, r3, #1
 8001260:	17d3      	asrs	r3, r2, #31
 8001262:	1ac9      	subs	r1, r1, r3
 8001264:	460b      	mov	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	1ad1      	subs	r1, r2, r3
 800126c:	b28b      	uxth	r3, r1
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	66666667 	.word	0x66666667

08001280 <_ZN14CircularBufferI14_packLinux2ArdLt4EE10getTailPtrEv>:
template <class T, uint16_t nElem> inline T *CircularBuffer<T, nElem>::getTailPtr() { return &buf_[tail_]; }
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800128e:	461a      	mov	r2, r3
 8001290:	2316      	movs	r3, #22
 8001292:	fb03 f302 	mul.w	r3, r3, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	2101      	movs	r1, #1
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f981 	bl	80015b8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>:
template <class T, uint16_t nElem> void CircularBuffer<T, nElem>::memClean() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  for (uint16_t i = 0; i < real_nElem; i++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	81fb      	strh	r3, [r7, #14]
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d80e      	bhi.n	80012f0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv+0x30>
    memset(&this->buf_[i], 0, sizeof(T));
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	2216      	movs	r2, #22
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	2216      	movs	r2, #22
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f007 fc78 	bl	8008bd8 <memset>
  for (uint16_t i = 0; i < real_nElem; i++)
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	3301      	adds	r3, #1
 80012ec:	81fb      	strh	r3, [r7, #14]
 80012ee:	e7ed      	b.n	80012cc <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv+0xc>
  reset();
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f995 	bl	8001620 <_ZN14CircularBufferI14_packLinux2ArdLt4EE5resetEv>
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_ZN14CircularBufferIhLt368EE8putArrayEPhtt>:
uint16_t CircularBuffer<T, nElem>::putArray(T *item, uint16_t nItem, uint16_t bSize) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	4611      	mov	r1, r2
 800130a:	461a      	mov	r2, r3
 800130c:	460b      	mov	r3, r1
 800130e:	80fb      	strh	r3, [r7, #6]
 8001310:	4613      	mov	r3, r2
 8001312:	80bb      	strh	r3, [r7, #4]
  if (availableSpace() < nItem)
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 f837 	bl	8001388 <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	4293      	cmp	r3, r2
 8001322:	bf8c      	ite	hi
 8001324:	2301      	movhi	r3, #1
 8001326:	2300      	movls	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x36>
    return -1;
 800132e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001332:	e025      	b.n	8001380 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x82>
  if (bSize > sizeof(T))
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d902      	bls.n	8001340 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x42>
    return -2;
 800133a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800133e:	e01f      	b.n	8001380 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x82>
  int ret = head_; // old head
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8001346:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < nItem; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	429a      	cmp	r2, r3
 8001352:	da13      	bge.n	800137c <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x7e>
    memcpy((void *)&buf_[head_], &item[i], bSize);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1898      	adds	r0, r3, r2
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	88ba      	ldrh	r2, [r7, #4]
 8001368:	4619      	mov	r1, r3
 800136a:	f007 fc27 	bl	8008bbc <memcpy>
    headInc();
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f966 	bl	8001640 <_ZN14CircularBufferIhLt368EE7headIncEv>
  for (int i = 0; i < nItem; i++) {
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e7e7      	b.n	800134c <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x4e>
  return ret; // old head
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	b29b      	uxth	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::availableSpace() const {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  return nElem - usedSpace();
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fe82 	bl	800109a <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 8001396:	4603      	mov	r3, r0
 8001398:	f5c3 73b8 	rsb	r3, r3, #368	; 0x170
 800139c:	b29b      	uxth	r3, r3
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <_ZN14CircularBufferIhLt368EE7headAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headAdd(uint16_t len) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
  if (availableSpace() < len)
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ffe7 	bl	8001388 <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	4293      	cmp	r3, r2
 80013c2:	bf8c      	ite	hi
 80013c4:	2301      	movhi	r3, #1
 80013c6:	2300      	movls	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <_ZN14CircularBufferIhLt368EE7headAddEt+0x2c>
    return -1;
 80013ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d2:	e01a      	b.n	800140a <_ZN14CircularBufferIhLt368EE7headAddEt+0x62>
  uint16_t oldHead = head_;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 80013da:	81fb      	strh	r3, [r7, #14]
  head_ = (head_ + len) % real_nElem;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 80013e2:	461a      	mov	r2, r3
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <_ZN14CircularBufferIhLt368EE7headAddEt+0x6c>)
 80013ea:	fb82 1203 	smull	r1, r2, r2, r3
 80013ee:	441a      	add	r2, r3
 80013f0:	1211      	asrs	r1, r2, #8
 80013f2:	17da      	asrs	r2, r3, #31
 80013f4:	1a8a      	subs	r2, r1, r2
 80013f6:	f240 1171 	movw	r1, #369	; 0x171
 80013fa:	fb01 f202 	mul.w	r2, r1, r2
 80013fe:	1a9a      	subs	r2, r3, r2
 8001400:	b292      	uxth	r2, r2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
  return oldHead; // old head
 8001408:	89fb      	ldrh	r3, [r7, #14]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	b19ab5c5 	.word	0xb19ab5c5

08001418 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isEmpty() const { return head_ == tail_; }
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8b3 2172 	ldrh.w	r2, [r3, #370]	; 0x172
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800142c:	429a      	cmp	r2, r3
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_ZN14CircularBufferIhLt368EE3getEPt>:
template <class T, uint16_t nElem> T CircularBuffer<T, nElem>::get(uint16_t *indexRet) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  *indexRet = getTail();
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fe7a 	bl	8001146 <_ZNK14CircularBufferIhLt368EE7getTailEv>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	801a      	strh	r2, [r3, #0]
  return get();
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f8fd 	bl	800165a <_ZN14CircularBufferIhLt368EE3getEv>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>:
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	803b      	strh	r3, [r7, #0]
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
 800147c:	883a      	ldrh	r2, [r7, #0]
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f203 1371 	addw	r3, r3, #369	; 0x171
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt+0x40>)
 8001488:	fb82 1203 	smull	r1, r2, r2, r3
 800148c:	441a      	add	r2, r3
 800148e:	1211      	asrs	r1, r2, #8
 8001490:	17da      	asrs	r2, r3, #31
 8001492:	1a8a      	subs	r2, r1, r2
 8001494:	f240 1171 	movw	r1, #369	; 0x171
 8001498:	fb01 f202 	mul.w	r2, r1, r2
 800149c:	1a9a      	subs	r2, r3, r2
 800149e:	b293      	uxth	r3, r2
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	b19ab5c5 	.word	0xb19ab5c5

080014b0 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt>:
void CircularBuffer<T, nElem>::memcpyCb(T *memDestArray, uint16_t localTail, uint16_t len) {
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	4611      	mov	r1, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	460b      	mov	r3, r1
 80014c0:	80fb      	strh	r3, [r7, #6]
 80014c2:	4613      	mov	r3, r2
 80014c4:	80bb      	strh	r3, [r7, #4]
  for (uint16_t i = 0; i < len; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	82fb      	strh	r3, [r7, #22]
 80014ca:	8afa      	ldrh	r2, [r7, #22]
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d218      	bcs.n	8001504 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x54>
    memDestArray[i] = buf_[(localTail + i) % real_nElem];
 80014d2:	88fa      	ldrh	r2, [r7, #6]
 80014d4:	8afb      	ldrh	r3, [r7, #22]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x60>)
 80014da:	fb82 1203 	smull	r1, r2, r2, r3
 80014de:	441a      	add	r2, r3
 80014e0:	1211      	asrs	r1, r2, #8
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	1a8a      	subs	r2, r1, r2
 80014e6:	f240 1171 	movw	r1, #369	; 0x171
 80014ea:	fb01 f202 	mul.w	r2, r1, r2
 80014ee:	1a9a      	subs	r2, r3, r2
 80014f0:	8afb      	ldrh	r3, [r7, #22]
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	440b      	add	r3, r1
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	5c8a      	ldrb	r2, [r1, r2]
 80014fa:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < len; i++) {
 80014fc:	8afb      	ldrh	r3, [r7, #22]
 80014fe:	3301      	adds	r3, #1
 8001500:	82fb      	strh	r3, [r7, #22]
 8001502:	e7e2      	b.n	80014ca <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x1a>
}
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	b19ab5c5 	.word	0xb19ab5c5

08001514 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::put(T *item, uint16_t bSize) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	4613      	mov	r3, r2
 8001520:	80fb      	strh	r3, [r7, #6]
  if (isFull())
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff fe68 	bl	80011f8 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x20>
    return -1;
 800152e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001532:	e017      	b.n	8001564 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x50>
  if (bSize > sizeof(T))
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	2b16      	cmp	r3, #22
 8001538:	d902      	bls.n	8001540 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x2c>
    return -2;
 800153a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800153e:	e011      	b.n	8001564 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x50>
  memcpy((void *)&buf_[head_], item, bSize);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001546:	461a      	mov	r2, r3
 8001548:	2316      	movs	r3, #22
 800154a:	fb03 f302 	mul.w	r3, r3, r2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	88fa      	ldrh	r2, [r7, #6]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	4618      	mov	r0, r3
 8001558:	f007 fb30 	bl	8008bbc <memcpy>
  return headInc(); // old head
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 f895 	bl	800168c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headIncEv>
 8001562:	4603      	mov	r3, r0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_ZNK14CircularBufferIhLt368EE6isFullEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isFull() const {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return head_ == modSub(tail_, 1, real_nElem);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800157a:	4618      	mov	r0, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001582:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <_ZNK14CircularBufferIhLt368EE6isFullEv+0x48>)
 8001588:	fb82 1203 	smull	r1, r2, r2, r3
 800158c:	441a      	add	r2, r3
 800158e:	1211      	asrs	r1, r2, #8
 8001590:	17da      	asrs	r2, r3, #31
 8001592:	1a8a      	subs	r2, r1, r2
 8001594:	f240 1171 	movw	r1, #369	; 0x171
 8001598:	fb01 f202 	mul.w	r2, r1, r2
 800159c:	1a9a      	subs	r2, r3, r2
 800159e:	4290      	cmp	r0, r2
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	b19ab5c5 	.word	0xb19ab5c5

080015b8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailAdd(uint16_t len) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  if (usedSpace() < len)
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fc0b 	bl	8000de0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	4293      	cmp	r3, r2
 80015d2:	bf8c      	ite	hi
 80015d4:	2301      	movhi	r3, #1
 80015d6:	2300      	movls	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x2c>
    return -1;
 80015de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e2:	e016      	b.n	8001612 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x5a>
  tail_ = (tail_ + len) % real_nElem;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80015ea:	461a      	mov	r2, r3
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	441a      	add	r2, r3
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x64>)
 80015f2:	fb83 1302 	smull	r1, r3, r3, r2
 80015f6:	1059      	asrs	r1, r3, #1
 80015f8:	17d3      	asrs	r3, r2, #31
 80015fa:	1ac9      	subs	r1, r1, r3
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	1ad1      	subs	r1, r2, r3
 8001604:	b28a      	uxth	r2, r1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  return tail_;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	66666667 	.word	0x66666667

08001620 <_ZN14CircularBufferI14_packLinux2ArdLt4EE5resetEv>:
template <class T, uint16_t nElem> inline void CircularBuffer<T, nElem>::reset() { head_ = tail_; }
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_ZN14CircularBufferIhLt368EE7headIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headInc() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return headAdd(1); // old head
 8001648:	2101      	movs	r1, #1
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff feac 	bl	80013a8 <_ZN14CircularBufferIhLt368EE7headAddEt>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_ZN14CircularBufferIhLt368EE3getEv>:
template <class T, uint16_t nElem> T CircularBuffer<T, nElem>::get() {
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  if (isEmpty()) {
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fed8 	bl	8001418 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <_ZN14CircularBufferIhLt368EE3getEv+0x18>
    return T();
 800166e:	2300      	movs	r3, #0
 8001670:	e008      	b.n	8001684 <_ZN14CircularBufferIhLt368EE3getEv+0x2a>
  auto val = readTail();
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f817 	bl	80016a6 <_ZNK14CircularBufferIhLt368EE8readTailEv>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
  this->tailInc();
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f822 	bl	80016c6 <_ZN14CircularBufferIhLt368EE7tailIncEv>
  return val;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headInc() {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return headAdd(1); // old head
 8001694:	2101      	movs	r1, #1
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f822 	bl	80016e0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_ZNK14CircularBufferIhLt368EE8readTailEv>:
template <class T, uint16_t nElem> inline T CircularBuffer<T, nElem>::readTail() const { return this->buf_[tail_]; }
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 80016b4:	461a      	mov	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN14CircularBufferIhLt368EE7tailIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	2101      	movs	r1, #1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd45 	bl	8001160 <_ZN14CircularBufferIhLt368EE7tailAddEt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headAdd(uint16_t len) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  if (availableSpace() < len)
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f82d 	bl	800174c <_ZNK14CircularBufferI14_packLinux2ArdLt4EE14availableSpaceEv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	4293      	cmp	r3, r2
 80016fa:	bf8c      	ite	hi
 80016fc:	2301      	movhi	r3, #1
 80016fe:	2300      	movls	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x2c>
    return -1;
 8001706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800170a:	e018      	b.n	800173e <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x5e>
  uint16_t oldHead = head_;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001712:	81fb      	strh	r3, [r7, #14]
  head_ = (head_ + len) % real_nElem;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800171a:	461a      	mov	r2, r3
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	441a      	add	r2, r3
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x68>)
 8001722:	fb83 1302 	smull	r1, r3, r3, r2
 8001726:	1059      	asrs	r1, r3, #1
 8001728:	17d3      	asrs	r3, r2, #31
 800172a:	1ac9      	subs	r1, r1, r3
 800172c:	460b      	mov	r3, r1
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	1ad1      	subs	r1, r2, r3
 8001734:	b28a      	uxth	r2, r1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  return oldHead; // old head
 800173c:	89fb      	ldrh	r3, [r7, #14]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	66666667 	.word	0x66666667

0800174c <_ZNK14CircularBufferI14_packLinux2ArdLt4EE14availableSpaceEv>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::availableSpace() const {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return nElem - usedSpace();
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fb43 	bl	8000de0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 800175a:	4603      	mov	r3, r0
 800175c:	f1c3 0304 	rsb	r3, r3, #4
 8001760:	b29b      	uxth	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <_Z41__static_initialization_and_destruction_0ii+0x20>
MP_ST_usb<packLinux2Ard, packArd2Linux, STM32MP_templateDefault()> MP_St;
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001788:	f7ff f913 	bl	80009b2 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d107      	bne.n	80017a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800179c:	4803      	ldr	r0, [pc, #12]	; (80017ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800179e:	f7ff f96d 	bl	8000a7c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EED1Ev>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002f8 	.word	0x200002f8

080017b0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht>:

templatePar()int MP_ST_usb<templateParCall()>::packSend_Concrete(uint8_t *stream, uint16_t len) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	80fb      	strh	r3, [r7, #6]
	//return 0;
	if (byteSend.availableSpace() < len) {
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fddf 	bl	8001388 <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4293      	cmp	r3, r2
 80017d2:	bf8c      	ite	hi
 80017d4:	2301      	movhi	r3, #1
 80017d6:	2300      	movls	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x34>
		return -2;
 80017de:	f06f 0301 	mvn.w	r3, #1
 80017e2:	e018      	b.n	8001816 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x66>
	}
	byteSend.putArray(stream, len);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 80017ea:	88fa      	ldrh	r2, [r7, #6]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fb80 	bl	8000ef4 <_ZN14CircularBufferIhLt368EE8putArrayEPht>
	if (isrSendNotify(nullptr, nullptr, 0) == USBD_FAIL)
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fa9b 	bl	8000d34 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b03      	cmp	r3, #3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x64>
		return -3;
 800180e:	f06f 0302 	mvn.w	r3, #2
 8001812:	e000      	b.n	8001816 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x66>
	return 0;
 8001814:	2300      	movs	r3, #0
		return -3;
	}

	return 0;

}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE15packTimeRefreshEv>:

templatePar()void MP_ST_usb<templateParCall()>::packTimeRefresh() {
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	lastDecodeTime = HAL_GetTick();
 8001826:	f000 fa3f 	bl	8001ca8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE15lastPackElapsedEv>:

templatePar()unsigned long MP_ST_usb<templateParCall()>::lastPackElapsed() {
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - lastDecodeTime;
 8001842:	f000 fa31 	bl	8001ca8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800184e:	1ad3      	subs	r3, r2, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_GLOBAL__sub_I_hi2c1>:
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
 800185c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff ff83 	bl	800176c <_Z41__static_initialization_and_destruction_0ii>
 8001866:	bd80      	pop	{r7, pc}

08001868 <_GLOBAL__sub_D_hi2c1>:
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
 800186c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff ff7b 	bl	800176c <_Z41__static_initialization_and_destruction_0ii>
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_MspInit+0x4c>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_MspInit+0x4c>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_MspInit+0x4c>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x4c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018b6:	2007      	movs	r0, #7
 80018b8:	f000 faf6 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_I2C_MspInit+0x84>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d12c      	bne.n	8001944 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_I2C_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_I2C_MspInit+0x88>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_I2C_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001906:	f44f 7310 	mov.w	r3, #576	; 0x240
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190c:	2312      	movs	r3, #18
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001918:	2304      	movs	r3, #4
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	480c      	ldr	r0, [pc, #48]	; (8001954 <HAL_I2C_MspInit+0x8c>)
 8001924:	f000 fb02 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_I2C_MspInit+0x88>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_I2C_MspInit+0x88>)
 8001932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_I2C_MspInit+0x88>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40005400 	.word	0x40005400
 8001950:	40023800 	.word	0x40023800
 8001954:	40020400 	.word	0x40020400

08001958 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <HAL_I2S_MspInit+0xc0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d14a      	bne.n	8001a10 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 8001984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_I2S_MspInit+0xc4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019ce:	2310      	movs	r3, #16
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019de:	2306      	movs	r3, #6
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <HAL_I2S_MspInit+0xc8>)
 80019ea:	f000 fa9f 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80019ee:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a00:	2306      	movs	r3, #6
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <HAL_I2S_MspInit+0xcc>)
 8001a0c:	f000 fa8e 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40003c00 	.word	0x40003c00
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020800 	.word	0x40020800

08001a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_SPI_MspInit+0x84>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d12b      	bne.n	8001aa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_SPI_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a82:	23e0      	movs	r3, #224	; 0xe0
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a92:	2305      	movs	r3, #5
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <HAL_SPI_MspInit+0x8c>)
 8001a9e:	f000 fa45 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40013000 	.word	0x40013000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b04:	f000 f8bc 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <OTG_FS_IRQHandler+0x10>)
 8001b12:	f001 faf5 	bl	8003100 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20001d60 	.word	0x20001d60

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_kill>:

int _kill(int pid, int sig)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b3a:	f007 f815 	bl	8008b68 <__errno>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2216      	movs	r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
	return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_exit>:

void _exit (int status)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ffe7 	bl	8001b30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b62:	e7fe      	b.n	8001b62 <_exit+0x12>

08001b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <SystemInit+0x20>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <SystemInit+0x20>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b8c:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b8e:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b90:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ba4:	4c0b      	ldr	r4, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bb2:	f7ff ffd7 	bl	8001b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f006 ffdd 	bl	8008b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bba:	f7fe fc81 	bl	80004c0 <main>
  bx  lr    
 8001bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001bcc:	08008d44 	.word	0x08008d44
  ldr r2, =_sbss
 8001bd0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001bd4:	2000216c 	.word	0x2000216c

08001bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_Init+0x40>)
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_Init+0x40>)
 8001bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x40>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f94f 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fe32 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f967 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5c:	f000 f92f 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	2000088c 	.word	0x2000088c

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2000088c 	.word	0x2000088c

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	; (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff3e 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff8e 	bl	8001dfc <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff31 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e16b      	b.n	8002220 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 815a 	bne.w	800221a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d130      	bne.n	8001fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0201 	and.w	r2, r3, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d017      	beq.n	800201c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d123      	bne.n	8002070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80b4 	beq.w	800221a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b60      	ldr	r3, [pc, #384]	; (8002238 <HAL_GPIO_Init+0x30c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a5f      	ldr	r2, [pc, #380]	; (8002238 <HAL_GPIO_Init+0x30c>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <HAL_GPIO_Init+0x30c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ce:	4a5b      	ldr	r2, [pc, #364]	; (800223c <HAL_GPIO_Init+0x310>)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_GPIO_Init+0x314>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02b      	beq.n	8002152 <HAL_GPIO_Init+0x226>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a51      	ldr	r2, [pc, #324]	; (8002244 <HAL_GPIO_Init+0x318>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x222>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a50      	ldr	r2, [pc, #320]	; (8002248 <HAL_GPIO_Init+0x31c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x21e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4f      	ldr	r2, [pc, #316]	; (800224c <HAL_GPIO_Init+0x320>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x21a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_GPIO_Init+0x324>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x216>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4d      	ldr	r2, [pc, #308]	; (8002254 <HAL_GPIO_Init+0x328>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x212>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <HAL_GPIO_Init+0x32c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x20e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4b      	ldr	r2, [pc, #300]	; (800225c <HAL_GPIO_Init+0x330>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x20a>
 8002132:	2307      	movs	r3, #7
 8002134:	e00e      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002136:	2308      	movs	r3, #8
 8002138:	e00c      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800213a:	2306      	movs	r3, #6
 800213c:	e00a      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800213e:	2305      	movs	r3, #5
 8002140:	e008      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002142:	2304      	movs	r3, #4
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002146:	2303      	movs	r3, #3
 8002148:	e004      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800214a:	2302      	movs	r3, #2
 800214c:	e002      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002152:	2300      	movs	r3, #0
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f002 0203 	and.w	r2, r2, #3
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	4093      	lsls	r3, r2
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002164:	4935      	ldr	r1, [pc, #212]	; (800223c <HAL_GPIO_Init+0x310>)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002172:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <HAL_GPIO_Init+0x334>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002196:	4a32      	ldr	r2, [pc, #200]	; (8002260 <HAL_GPIO_Init+0x334>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_GPIO_Init+0x334>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <HAL_GPIO_Init+0x334>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_GPIO_Init+0x334>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ea:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_GPIO_Init+0x334>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_GPIO_Init+0x334>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <HAL_GPIO_Init+0x334>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	f67f ae90 	bls.w	8001f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	40013800 	.word	0x40013800
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40020800 	.word	0x40020800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40021000 	.word	0x40021000
 8002254:	40021400 	.word	0x40021400
 8002258:	40021800 	.word	0x40021800
 800225c:	40021c00 	.word	0x40021c00
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e12b      	b.n	8002502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fb02 	bl	80018c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022fc:	f002 fb80 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8002300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a81      	ldr	r2, [pc, #516]	; (800250c <HAL_I2C_Init+0x274>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d807      	bhi.n	800231c <HAL_I2C_Init+0x84>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a80      	ldr	r2, [pc, #512]	; (8002510 <HAL_I2C_Init+0x278>)
 8002310:	4293      	cmp	r3, r2
 8002312:	bf94      	ite	ls
 8002314:	2301      	movls	r3, #1
 8002316:	2300      	movhi	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e006      	b.n	800232a <HAL_I2C_Init+0x92>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a7d      	ldr	r2, [pc, #500]	; (8002514 <HAL_I2C_Init+0x27c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	bf94      	ite	ls
 8002324:	2301      	movls	r3, #1
 8002326:	2300      	movhi	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0e7      	b.n	8002502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a78      	ldr	r2, [pc, #480]	; (8002518 <HAL_I2C_Init+0x280>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9b      	lsrs	r3, r3, #18
 800233c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a6a      	ldr	r2, [pc, #424]	; (800250c <HAL_I2C_Init+0x274>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d802      	bhi.n	800236c <HAL_I2C_Init+0xd4>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	e009      	b.n	8002380 <HAL_I2C_Init+0xe8>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	4a69      	ldr	r2, [pc, #420]	; (800251c <HAL_I2C_Init+0x284>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	3301      	adds	r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	430b      	orrs	r3, r1
 8002386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	495c      	ldr	r1, [pc, #368]	; (800250c <HAL_I2C_Init+0x274>)
 800239c:	428b      	cmp	r3, r1
 800239e:	d819      	bhi.n	80023d4 <HAL_I2C_Init+0x13c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e59      	subs	r1, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023b4:	400b      	ands	r3, r1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_I2C_Init+0x138>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e59      	subs	r1, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ce:	e051      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e04f      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_I2C_Init+0x168>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e012      	b.n	8002426 <HAL_I2C_Init+0x18e>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	0099      	lsls	r1, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x196>
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10e      	bne.n	8002454 <HAL_I2C_Init+0x1bc>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e58      	subs	r0, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	440b      	add	r3, r1
 8002444:	fbb0 f3f3 	udiv	r3, r0, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	e00f      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6809      	ldr	r1, [r1, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6911      	ldr	r1, [r2, #16]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	000186a0 	.word	0x000186a0
 8002510:	001e847f 	.word	0x001e847f
 8002514:	003d08ff 	.word	0x003d08ff
 8002518:	431bde83 	.word	0x431bde83
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e128      	b.n	8002784 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a90      	ldr	r2, [pc, #576]	; (800278c <HAL_I2S_Init+0x26c>)
 800254a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fa03 	bl	8001958 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002568:	f023 030f 	bic.w	r3, r3, #15
 800256c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2202      	movs	r2, #2
 8002574:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d060      	beq.n	8002640 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002586:	2310      	movs	r3, #16
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e001      	b.n	8002590 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b20      	cmp	r3, #32
 8002596:	d802      	bhi.n	800259e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800259e:	2001      	movs	r0, #1
 80025a0:	f002 fb24 	bl	8004bec <HAL_RCCEx_GetPeriphCLKFreq>
 80025a4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ae:	d125      	bne.n	80025fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	461a      	mov	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	3305      	adds	r3, #5
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	e01f      	b.n	800261a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	461a      	mov	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	3305      	adds	r3, #5
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e00e      	b.n	800261a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fbb2 f2f3 	udiv	r2, r2, r3
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	3305      	adds	r3, #5
 8002618:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4a5c      	ldr	r2, [pc, #368]	; (8002790 <HAL_I2S_Init+0x270>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	08db      	lsrs	r3, r3, #3
 8002624:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	e003      	b.n	8002648 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002640:	2302      	movs	r3, #2
 8002642:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d902      	bls.n	8002654 <HAL_I2S_Init+0x134>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	2bff      	cmp	r3, #255	; 0xff
 8002652:	d907      	bls.n	8002664 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	f043 0210 	orr.w	r2, r3, #16
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e08f      	b.n	8002784 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	ea42 0103 	orr.w	r1, r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	430a      	orrs	r2, r1
 8002676:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002682:	f023 030f 	bic.w	r3, r3, #15
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6851      	ldr	r1, [r2, #4]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68d2      	ldr	r2, [r2, #12]
 8002694:	4311      	orrs	r1, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6992      	ldr	r2, [r2, #24]
 800269a:	430a      	orrs	r2, r1
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d161      	bne.n	8002774 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a38      	ldr	r2, [pc, #224]	; (8002794 <HAL_I2S_Init+0x274>)
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a37      	ldr	r2, [pc, #220]	; (8002798 <HAL_I2S_Init+0x278>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_I2S_Init+0x1a4>
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_I2S_Init+0x27c>)
 80026c2:	e001      	b.n	80026c8 <HAL_I2S_Init+0x1a8>
 80026c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	4932      	ldr	r1, [pc, #200]	; (8002798 <HAL_I2S_Init+0x278>)
 80026d0:	428a      	cmp	r2, r1
 80026d2:	d101      	bne.n	80026d8 <HAL_I2S_Init+0x1b8>
 80026d4:	4a31      	ldr	r2, [pc, #196]	; (800279c <HAL_I2S_Init+0x27c>)
 80026d6:	e001      	b.n	80026dc <HAL_I2S_Init+0x1bc>
 80026d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80026dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026e0:	f023 030f 	bic.w	r3, r3, #15
 80026e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2b      	ldr	r2, [pc, #172]	; (8002798 <HAL_I2S_Init+0x278>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_I2S_Init+0x1d4>
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_I2S_Init+0x27c>)
 80026f2:	e001      	b.n	80026f8 <HAL_I2S_Init+0x1d8>
 80026f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f8:	2202      	movs	r2, #2
 80026fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a25      	ldr	r2, [pc, #148]	; (8002798 <HAL_I2S_Init+0x278>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_I2S_Init+0x1ea>
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_I2S_Init+0x27c>)
 8002708:	e001      	b.n	800270e <HAL_I2S_Init+0x1ee>
 800270a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271a:	d003      	beq.n	8002724 <HAL_I2S_Init+0x204>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	e001      	b.n	8002730 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800273a:	4313      	orrs	r3, r2
 800273c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002744:	4313      	orrs	r3, r2
 8002746:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800274e:	4313      	orrs	r3, r2
 8002750:	b29a      	uxth	r2, r3
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	4313      	orrs	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800275c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <HAL_I2S_Init+0x278>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_I2S_Init+0x24c>
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_I2S_Init+0x27c>)
 800276a:	e001      	b.n	8002770 <HAL_I2S_Init+0x250>
 800276c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002770:	897a      	ldrh	r2, [r7, #10]
 8002772:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	08002897 	.word	0x08002897
 8002790:	cccccccd 	.word	0xcccccccd
 8002794:	080029ad 	.word	0x080029ad
 8002798:	40003800 	.word	0x40003800
 800279c:	40003400 	.word	0x40003400

080027a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c9a      	adds	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10e      	bne.n	8002830 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002820:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ffb8 	bl	80027a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	b292      	uxth	r2, r2
 800284c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	1c9a      	adds	r2, r3, #2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10e      	bne.n	800288e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800287e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff93 	bl	80027b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d13a      	bne.n	8002928 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d109      	bne.n	80028d0 <I2S_IRQHandler+0x3a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d102      	bne.n	80028d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffb4 	bl	8002838 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d126      	bne.n	8002928 <I2S_IRQHandler+0x92>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d11f      	bne.n	8002928 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f043 0202 	orr.w	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ff50 	bl	80027c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b03      	cmp	r3, #3
 8002932:	d136      	bne.n	80029a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d109      	bne.n	8002952 <I2S_IRQHandler+0xbc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d102      	bne.n	8002952 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff45 	bl	80027dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b08      	cmp	r3, #8
 800295a:	d122      	bne.n	80029a2 <I2S_IRQHandler+0x10c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d11b      	bne.n	80029a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002978:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f043 0204 	orr.w	r2, r3, #4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff13 	bl	80027c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4aa2      	ldr	r2, [pc, #648]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80029c6:	4ba2      	ldr	r3, [pc, #648]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029c8:	e001      	b.n	80029ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80029ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a9b      	ldr	r2, [pc, #620]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80029e4:	4b9a      	ldr	r3, [pc, #616]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029e6:	e001      	b.n	80029ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80029e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d004      	beq.n	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 8099 	bne.w	8002b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d107      	bne.n	8002a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f925 	bl	8002c68 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d107      	bne.n	8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9c8 	bl	8002dc8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	d13a      	bne.n	8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d035      	beq.n	8002ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a7e      	ldr	r2, [pc, #504]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d101      	bne.n	8002a5a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002a56:	4b7e      	ldr	r3, [pc, #504]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a58:	e001      	b.n	8002a5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4979      	ldr	r1, [pc, #484]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a66:	428b      	cmp	r3, r1
 8002a68:	d101      	bne.n	8002a6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a6a:	4b79      	ldr	r3, [pc, #484]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a6c:	e001      	b.n	8002a72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a76:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fe88 	bl	80027c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	f040 80be 	bne.w	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80b8 	beq.w	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ade:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a59      	ldr	r2, [pc, #356]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002aea:	4b59      	ldr	r3, [pc, #356]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002aec:	e001      	b.n	8002af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4954      	ldr	r1, [pc, #336]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002afa:	428b      	cmp	r3, r1
 8002afc:	d101      	bne.n	8002b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002afe:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b00:	e001      	b.n	8002b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002b02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b0a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f043 0204 	orr.w	r2, r3, #4
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fe4a 	bl	80027c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b34:	e084      	b.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d107      	bne.n	8002b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8be 	bl	8002ccc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f8fd 	bl	8002d64 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d12f      	bne.n	8002bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d02a      	beq.n	8002bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b8c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2e      	ldr	r2, [pc, #184]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b98:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b9a:	e001      	b.n	8002ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4929      	ldr	r1, [pc, #164]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	d101      	bne.n	8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bae:	e001      	b.n	8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff fdfa 	bl	80027c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d131      	bne.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02c      	beq.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bf4:	e001      	b.n	8002bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4912      	ldr	r1, [pc, #72]	; (8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c02:	428b      	cmp	r3, r1
 8002c04:	d101      	bne.n	8002c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c08:	e001      	b.n	8002c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c22:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fdc5 	bl	80027c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c3e:	e000      	b.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c40:	bf00      	nop
}
 8002c42:	bf00      	nop
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40003800 	.word	0x40003800
 8002c50:	40003400 	.word	0x40003400

08002c54 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c99      	adds	r1, r3, #2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6251      	str	r1, [r2, #36]	; 0x24
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d113      	bne.n	8002cc2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ca8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff ffc9 	bl	8002c54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c99      	adds	r1, r3, #2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6251      	str	r1, [r2, #36]	; 0x24
 8002cde:	8819      	ldrh	r1, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <I2SEx_TxISR_I2SExt+0x90>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <I2SEx_TxISR_I2SExt+0x22>
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <I2SEx_TxISR_I2SExt+0x94>)
 8002cec:	e001      	b.n	8002cf2 <I2SEx_TxISR_I2SExt+0x26>
 8002cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf2:	460a      	mov	r2, r1
 8002cf4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d121      	bne.n	8002d52 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <I2SEx_TxISR_I2SExt+0x90>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <I2SEx_TxISR_I2SExt+0x50>
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <I2SEx_TxISR_I2SExt+0x94>)
 8002d1a:	e001      	b.n	8002d20 <I2SEx_TxISR_I2SExt+0x54>
 8002d1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	490d      	ldr	r1, [pc, #52]	; (8002d5c <I2SEx_TxISR_I2SExt+0x90>)
 8002d28:	428b      	cmp	r3, r1
 8002d2a:	d101      	bne.n	8002d30 <I2SEx_TxISR_I2SExt+0x64>
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <I2SEx_TxISR_I2SExt+0x94>)
 8002d2e:	e001      	b.n	8002d34 <I2SEx_TxISR_I2SExt+0x68>
 8002d30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff81 	bl	8002c54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40003800 	.word	0x40003800
 8002d60:	40003400 	.word	0x40003400

08002d64 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68d8      	ldr	r0, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	1c99      	adds	r1, r3, #2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d7c:	b282      	uxth	r2, r0
 8002d7e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d113      	bne.n	8002dc0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002da6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff4a 	bl	8002c54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <I2SEx_RxISR_I2SExt+0x90>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <I2SEx_RxISR_I2SExt+0x16>
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <I2SEx_RxISR_I2SExt+0x94>)
 8002ddc:	e001      	b.n	8002de2 <I2SEx_RxISR_I2SExt+0x1a>
 8002dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de2:	68d8      	ldr	r0, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	1c99      	adds	r1, r3, #2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002dee:	b282      	uxth	r2, r0
 8002df0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d121      	bne.n	8002e4e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <I2SEx_RxISR_I2SExt+0x90>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <I2SEx_RxISR_I2SExt+0x50>
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <I2SEx_RxISR_I2SExt+0x94>)
 8002e16:	e001      	b.n	8002e1c <I2SEx_RxISR_I2SExt+0x54>
 8002e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	490d      	ldr	r1, [pc, #52]	; (8002e58 <I2SEx_RxISR_I2SExt+0x90>)
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d101      	bne.n	8002e2c <I2SEx_RxISR_I2SExt+0x64>
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <I2SEx_RxISR_I2SExt+0x94>)
 8002e2a:	e001      	b.n	8002e30 <I2SEx_RxISR_I2SExt+0x68>
 8002e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e34:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ff03 	bl	8002c54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40003800 	.word	0x40003800
 8002e5c:	40003400 	.word	0x40003400

08002e60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e62:	b08f      	sub	sp, #60	; 0x3c
 8002e64:	af0a      	add	r7, sp, #40	; 0x28
 8002e66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e10f      	b.n	8003092 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f005 fb2d 	bl	80084ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f002 f896 	bl	8004fe2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	687e      	ldr	r6, [r7, #4]
 8002ebe:	466d      	mov	r5, sp
 8002ec0:	f106 0410 	add.w	r4, r6, #16
 8002ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ecc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ed0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed4:	1d33      	adds	r3, r6, #4
 8002ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed8:	6838      	ldr	r0, [r7, #0]
 8002eda:	f001 ff6e 	bl	8004dba <USB_CoreInit>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0d0      	b.n	8003092 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 f884 	bl	8005004 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e04a      	b.n	8002f98 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	333d      	adds	r3, #61	; 0x3d
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	333c      	adds	r3, #60	; 0x3c
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	b298      	uxth	r0, r3
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3342      	adds	r3, #66	; 0x42
 8002f3e:	4602      	mov	r2, r0
 8002f40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	333f      	adds	r3, #63	; 0x3f
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3344      	adds	r3, #68	; 0x44
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3348      	adds	r3, #72	; 0x48
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3350      	adds	r3, #80	; 0x50
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	3301      	adds	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3af      	bcc.n	8002f02 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e044      	b.n	8003032 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	3301      	adds	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d3b5      	bcc.n	8002fa8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	687e      	ldr	r6, [r7, #4]
 8003044:	466d      	mov	r5, sp
 8003046:	f106 0410 	add.w	r4, r6, #16
 800304a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800304e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003052:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003056:	e885 0003 	stmia.w	r5, {r0, r1}
 800305a:	1d33      	adds	r3, r6, #4
 800305c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800305e:	6838      	ldr	r0, [r7, #0]
 8003060:	f001 fffa 	bl	8005058 <USB_DevInit>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e00d      	b.n	8003092 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f003 f842 	bl	8006114 <USB_DevDisconnect>

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800309a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_PCD_Start+0x1c>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e020      	b.n	80030f8 <HAL_PCD_Start+0x5e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d109      	bne.n	80030da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d005      	beq.n	80030da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 ff6e 	bl	8004fc0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fff2 	bl	80060d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b08d      	sub	sp, #52	; 0x34
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f003 f8b0 	bl	800627c <USB_GetMode>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 839d 	bne.w	800385e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f003 f814 	bl	8006156 <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8393 	beq.w	800385c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f003 f80b 	bl	8006156 <USB_ReadInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f002 0202 	and.w	r2, r2, #2
 8003158:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f002 fff9 	bl	8006156 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b10      	cmp	r3, #16
 800316c:	d161      	bne.n	8003232 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0210 	bic.w	r2, r2, #16
 800317c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	0c5b      	lsrs	r3, r3, #17
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d124      	bne.n	80031f4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d035      	beq.n	8003222 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	6a38      	ldr	r0, [r7, #32]
 80031ca:	f002 fe5f 	bl	8005e8c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031da:	441a      	add	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ec:	441a      	add	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	619a      	str	r2, [r3, #24]
 80031f2:	e016      	b.n	8003222 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	0c5b      	lsrs	r3, r3, #17
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	d110      	bne.n	8003222 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003206:	2208      	movs	r2, #8
 8003208:	4619      	mov	r1, r3
 800320a:	6a38      	ldr	r0, [r7, #32]
 800320c:	f002 fe3e 	bl	8005e8c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800321c:	441a      	add	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0210 	orr.w	r2, r2, #16
 8003230:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f002 ff8d 	bl	8006156 <USB_ReadInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003242:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003246:	d16e      	bne.n	8003326 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f002 ff93 	bl	800617c <USB_ReadDevAllOutEpInterrupt>
 8003256:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003258:	e062      	b.n	8003320 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d057      	beq.n	8003314 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f002 ffb8 	bl	80061e4 <USB_ReadDevOutEPInterrupt>
 8003274:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00c      	beq.n	800329a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	2301      	movs	r3, #1
 8003290:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fdb1 	bl	8003dfc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b0:	461a      	mov	r2, r3
 80032b2:	2308      	movs	r3, #8
 80032b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 feab 	bl	8004014 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d4:	461a      	mov	r2, r3
 80032d6:	2310      	movs	r3, #16
 80032d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f0:	461a      	mov	r2, r3
 80032f2:	2320      	movs	r3, #32
 80032f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	461a      	mov	r2, r3
 800330e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003312:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	3301      	adds	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d199      	bne.n	800325a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f002 ff13 	bl	8006156 <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003336:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800333a:	f040 80c0 	bne.w	80034be <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f002 ff34 	bl	80061b0 <USB_ReadDevAllInEpInterrupt>
 8003348:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800334e:	e0b2      	b.n	80034b6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80a7 	beq.w	80034aa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f002 ff5a 	bl	8006220 <USB_ReadDevInEPInterrupt>
 800336c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d057      	beq.n	8003428 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	2201      	movs	r2, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	43db      	mvns	r3, r3
 8003392:	69f9      	ldr	r1, [r7, #28]
 8003394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003398:	4013      	ands	r3, r2
 800339a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a8:	461a      	mov	r2, r3
 80033aa:	2301      	movs	r3, #1
 80033ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d132      	bne.n	800341c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3348      	adds	r3, #72	; 0x48
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4403      	add	r3, r0
 80033d6:	3344      	adds	r3, #68	; 0x44
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4419      	add	r1, r3
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4403      	add	r3, r0
 80033ea:	3348      	adds	r3, #72	; 0x48
 80033ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d113      	bne.n	800341c <HAL_PCD_IRQHandler+0x31c>
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3350      	adds	r3, #80	; 0x50
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003414:	461a      	mov	r2, r3
 8003416:	2101      	movs	r1, #1
 8003418:	f002 ff62 	bl	80062e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	b2db      	uxtb	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f005 f8f1 	bl	800860a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343e:	461a      	mov	r2, r3
 8003440:	2308      	movs	r3, #8
 8003442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345a:	461a      	mov	r2, r3
 800345c:	2310      	movs	r3, #16
 800345e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003476:	461a      	mov	r2, r3
 8003478:	2340      	movs	r3, #64	; 0x40
 800347a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003492:	461a      	mov	r2, r3
 8003494:	2302      	movs	r3, #2
 8003496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fc1b 	bl	8003ce0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	3301      	adds	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f47f af49 	bne.w	8003350 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 fe47 	bl	8006156 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d2:	d122      	bne.n	800351a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034fa:	2100      	movs	r1, #0
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fe27 	bl	8004150 <HAL_PCDEx_LPM_Callback>
 8003502:	e002      	b.n	800350a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f005 f8f7 	bl	80086f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 fe19 	bl	8006156 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352e:	d112      	bne.n	8003556 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d102      	bne.n	8003546 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f005 f8b3 	bl	80086ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003554:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f002 fdfb 	bl	8006156 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	f040 80c7 	bne.w	80036fc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2110      	movs	r1, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f001 fec9 	bl	8005320 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	e056      	b.n	8003642 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a0:	461a      	mov	r2, r3
 80035a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035c6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f4:	461a      	mov	r2, r3
 80035f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800361a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362c:	0151      	lsls	r1, r2, #5
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	440a      	add	r2, r1
 8003632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800363a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	3301      	adds	r3, #1
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003648:	429a      	cmp	r2, r3
 800364a:	d3a3      	bcc.n	8003594 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800365e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	2b00      	cmp	r3, #0
 8003666:	d016      	beq.n	8003696 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003678:	f043 030b 	orr.w	r3, r3, #11
 800367c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368e:	f043 030b 	orr.w	r3, r3, #11
 8003692:	6453      	str	r3, [r2, #68]	; 0x44
 8003694:	e015      	b.n	80036c2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036bc:	f043 030b 	orr.w	r3, r3, #11
 80036c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036e6:	461a      	mov	r2, r3
 80036e8:	f002 fdfa 	bl	80062e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f002 fd28 	bl	8006156 <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d124      	bne.n	800375c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f002 fdbe 	bl	8006298 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fe5e 	bl	80053e2 <USB_GetDevSpeed>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	f001 f959 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8003736:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	4620      	mov	r0, r4
 8003742:	f001 fb9b 	bl	8004e7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f004 ff87 	bl	800865a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800375a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f002 fcf8 	bl	8006156 <USB_ReadInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b08      	cmp	r3, #8
 800376e:	d10a      	bne.n	8003786 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f004 ff64 	bl	800863e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f002 0208 	and.w	r2, r2, #8
 8003784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 fce3 	bl	8006156 <USB_ReadInterrupts>
 8003790:	4603      	mov	r3, r0
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800379a:	d10f      	bne.n	80037bc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	4619      	mov	r1, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f004 ffc6 	bl	8008738 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f002 fcc8 	bl	8006156 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037d0:	d10f      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f004 ff99 	bl	8008714 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f002 fcad 	bl	8006156 <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d10a      	bne.n	800381e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f004 ffa7 	bl	800875c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800381c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f002 fc97 	bl	8006156 <USB_ReadInterrupts>
 8003828:	4603      	mov	r3, r0
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d115      	bne.n	800385e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f004 ff97 	bl	8008778 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e000      	b.n	800385e <HAL_PCD_IRQHandler+0x75e>
      return;
 800385c:	bf00      	nop
    }
  }
}
 800385e:	3734      	adds	r7, #52	; 0x34
 8003860:	46bd      	mov	sp, r7
 8003862:	bd90      	pop	{r4, r7, pc}

08003864 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_PCD_SetAddress+0x1a>
 800387a:	2302      	movs	r3, #2
 800387c:	e013      	b.n	80038a6 <HAL_PCD_SetAddress+0x42>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f002 fbf5 	bl	8006086 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	4608      	mov	r0, r1
 80038b8:	4611      	mov	r1, r2
 80038ba:	461a      	mov	r2, r3
 80038bc:	4603      	mov	r3, r0
 80038be:	70fb      	strb	r3, [r7, #3]
 80038c0:	460b      	mov	r3, r1
 80038c2:	803b      	strh	r3, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da0f      	bge.n	80038f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	f003 020f 	and.w	r2, r3, #15
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	3338      	adds	r3, #56	; 0x38
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	3304      	adds	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	705a      	strb	r2, [r3, #1]
 80038f2:	e00f      	b.n	8003914 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 020f 	and.w	r2, r3, #15
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	3304      	adds	r3, #4
 800390c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003920:	883a      	ldrh	r2, [r7, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	78ba      	ldrb	r2, [r7, #2]
 800392a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800393e:	78bb      	ldrb	r3, [r7, #2]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d102      	bne.n	800394a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_PCD_EP_Open+0xaa>
 8003954:	2302      	movs	r3, #2
 8003956:	e00e      	b.n	8003976 <HAL_PCD_EP_Open+0xc8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68f9      	ldr	r1, [r7, #12]
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fd60 	bl	800542c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003974:	7afb      	ldrb	r3, [r7, #11]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800398a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398e:	2b00      	cmp	r3, #0
 8003990:	da0f      	bge.n	80039b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3338      	adds	r3, #56	; 0x38
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	705a      	strb	r2, [r3, #1]
 80039b0:	e00f      	b.n	80039d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	f003 020f 	and.w	r2, r3, #15
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	3304      	adds	r3, #4
 80039ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_PCD_EP_Close+0x6e>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e00e      	b.n	8003a0a <HAL_PCD_EP_Close+0x8c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68f9      	ldr	r1, [r7, #12]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fd9e 	bl	800553c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a22:	7afb      	ldrb	r3, [r7, #11]
 8003a24:	f003 020f 	and.w	r2, r3, #15
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a54:	7afb      	ldrb	r3, [r7, #11]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d102      	bne.n	8003a6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a6e:	7afb      	ldrb	r3, [r7, #11]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	6979      	ldr	r1, [r7, #20]
 8003a86:	f002 f879 	bl	8005b7c <USB_EP0StartXfer>
 8003a8a:	e008      	b.n	8003a9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	6979      	ldr	r1, [r7, #20]
 8003a9a:	f001 fe2b 	bl	80056f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae8:	7afb      	ldrb	r3, [r7, #11]
 8003aea:	f003 020f 	and.w	r2, r3, #15
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	3338      	adds	r3, #56	; 0x38
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	3304      	adds	r3, #4
 8003afe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2201      	movs	r2, #1
 8003b16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d102      	bne.n	8003b32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b32:	7afb      	ldrb	r3, [r7, #11]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	6979      	ldr	r1, [r7, #20]
 8003b4a:	f002 f817 	bl	8005b7c <USB_EP0StartXfer>
 8003b4e:	e008      	b.n	8003b62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6979      	ldr	r1, [r7, #20]
 8003b5e:	f001 fdc9 	bl	80056f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d901      	bls.n	8003b8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e050      	b.n	8003c2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	da0f      	bge.n	8003bb2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 020f 	and.w	r2, r3, #15
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	3338      	adds	r3, #56	; 0x38
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	705a      	strb	r2, [r3, #1]
 8003bb0:	e00d      	b.n	8003bce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_PCD_EP_SetStall+0x82>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e01e      	b.n	8003c2c <HAL_PCD_EP_SetStall+0xc0>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68f9      	ldr	r1, [r7, #12]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f002 f96e 	bl	8005ede <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	b2d9      	uxtb	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	f002 fb5f 	bl	80062e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 020f 	and.w	r2, r3, #15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d901      	bls.n	8003c52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e042      	b.n	8003cd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	da0f      	bge.n	8003c7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 020f 	and.w	r2, r3, #15
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	3338      	adds	r3, #56	; 0x38
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3304      	adds	r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	705a      	strb	r2, [r3, #1]
 8003c78:	e00f      	b.n	8003c9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	3304      	adds	r3, #4
 8003c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_PCD_EP_ClrStall+0x86>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e00e      	b.n	8003cd8 <HAL_PCD_EP_ClrStall+0xa4>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f002 f976 	bl	8005fba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3338      	adds	r3, #56	; 0x38
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d901      	bls.n	8003d18 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e06c      	b.n	8003df2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d902      	bls.n	8003d34 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3303      	adds	r3, #3
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d3c:	e02b      	b.n	8003d96 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d902      	bls.n	8003d5a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3303      	adds	r3, #3
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	68d9      	ldr	r1, [r3, #12]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	4603      	mov	r3, r0
 8003d78:	6978      	ldr	r0, [r7, #20]
 8003d7a:	f002 f852 	bl	8005e22 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	441a      	add	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	441a      	add	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d809      	bhi.n	8003dc0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	699a      	ldr	r2, [r3, #24]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d203      	bcs.n	8003dc0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1be      	bne.n	8003d3e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d811      	bhi.n	8003df0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	6939      	ldr	r1, [r7, #16]
 8003de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dec:	4013      	ands	r3, r2
 8003dee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	333c      	adds	r3, #60	; 0x3c
 8003e14:	3304      	adds	r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	f040 80a0 	bne.w	8003f74 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d015      	beq.n	8003e6a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a72      	ldr	r2, [pc, #456]	; (800400c <PCD_EP_OutXfrComplete_int+0x210>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f240 80dd 	bls.w	8004002 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80d7 	beq.w	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	6093      	str	r3, [r2, #8]
 8003e68:	e0cb      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	461a      	mov	r2, r3
 8003e82:	2320      	movs	r3, #32
 8003e84:	6093      	str	r3, [r2, #8]
 8003e86:	e0bc      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 80b7 	bne.w	8004002 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a5d      	ldr	r2, [pc, #372]	; (800400c <PCD_EP_OutXfrComplete_int+0x210>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d90f      	bls.n	8003ebc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	e0a2      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ece:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	0159      	lsls	r1, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003ee2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4403      	add	r3, r0
 8003ef2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ef6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4403      	add	r3, r0
 8003f1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4419      	add	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4403      	add	r3, r0
 8003f30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f34:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d114      	bne.n	8003f66 <PCD_EP_OutXfrComplete_int+0x16a>
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d108      	bne.n	8003f66 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2101      	movs	r1, #1
 8003f62:	f002 f9bd 	bl	80062e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f004 fb31 	bl	80085d4 <HAL_PCD_DataOutStageCallback>
 8003f72:	e046      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a26      	ldr	r2, [pc, #152]	; (8004010 <PCD_EP_OutXfrComplete_int+0x214>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d124      	bne.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	461a      	mov	r2, r3
 8003f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f98:	6093      	str	r3, [r2, #8]
 8003f9a:	e032      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f004 fb08 	bl	80085d4 <HAL_PCD_DataOutStageCallback>
 8003fc4:	e01d      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d114      	bne.n	8003ff6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f002 f975 	bl	80062e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f004 fae9 	bl	80085d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	4f54300a 	.word	0x4f54300a
 8004010:	4f54310a 	.word	0x4f54310a

08004014 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	333c      	adds	r3, #60	; 0x3c
 800402c:	3304      	adds	r3, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <PCD_EP_OutSetupPacket_int+0x88>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d90e      	bls.n	8004068 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f004 faa1 	bl	80085b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <PCD_EP_OutSetupPacket_int+0x88>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d90c      	bls.n	8004090 <PCD_EP_OutSetupPacket_int+0x7c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004088:	461a      	mov	r2, r3
 800408a:	2101      	movs	r1, #1
 800408c:	f002 f928 	bl	80062e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	4f54300a 	.word	0x4f54300a

080040a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
 80040ac:	4613      	mov	r3, r2
 80040ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040be:	883b      	ldrh	r3, [r7, #0]
 80040c0:	0419      	lsls	r1, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
 80040cc:	e028      	b.n	8004120 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4413      	add	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	e00d      	b.n	80040fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	3340      	adds	r3, #64	; 0x40
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	4413      	add	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	3301      	adds	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	3b01      	subs	r3, #1
 8004104:	429a      	cmp	r2, r3
 8004106:	d3ec      	bcc.n	80040e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004108:	883b      	ldrh	r3, [r7, #0]
 800410a:	0418      	lsls	r0, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	3b01      	subs	r3, #1
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	4302      	orrs	r2, r0
 8004118:	3340      	adds	r3, #64	; 0x40
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e264      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d075      	beq.n	8004272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004186:	4ba3      	ldr	r3, [pc, #652]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00c      	beq.n	80041ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4ba0      	ldr	r3, [pc, #640]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800419a:	2b08      	cmp	r3, #8
 800419c:	d112      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b9d      	ldr	r3, [pc, #628]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	4b99      	ldr	r3, [pc, #612]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05b      	beq.n	8004270 <HAL_RCC_OscConfig+0x108>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d157      	bne.n	8004270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e23f      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d106      	bne.n	80041dc <HAL_RCC_OscConfig+0x74>
 80041ce:	4b91      	ldr	r3, [pc, #580]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a90      	ldr	r2, [pc, #576]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e01d      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x98>
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a8a      	ldr	r2, [pc, #552]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a87      	ldr	r2, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 8004200:	4b84      	ldr	r3, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a83      	ldr	r2, [pc, #524]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b81      	ldr	r3, [pc, #516]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a80      	ldr	r2, [pc, #512]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fd fd42 	bl	8001ca8 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fd fd3e 	bl	8001ca8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e204      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0xc0>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd fd2e 	bl	8001ca8 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7fd fd2a 	bl	8001ca8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1f0      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004262:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0xe8>
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800427e:	4b65      	ldr	r3, [pc, #404]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b62      	ldr	r3, [pc, #392]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004292:	2b08      	cmp	r3, #8
 8004294:	d11c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b5f      	ldr	r3, [pc, #380]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e1c4      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	4b56      	ldr	r3, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4952      	ldr	r1, [pc, #328]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	e03a      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d8:	4b4f      	ldr	r3, [pc, #316]	; (8004418 <HAL_RCC_OscConfig+0x2b0>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fd fce3 	bl	8001ca8 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e6:	f7fd fcdf 	bl	8001ca8 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e1a5      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f8:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4940      	ldr	r1, [pc, #256]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431a:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_RCC_OscConfig+0x2b0>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd fcc2 	bl	8001ca8 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004328:	f7fd fcbe 	bl	8001ca8 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e184      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d030      	beq.n	80043b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435a:	4b30      	ldr	r3, [pc, #192]	; (800441c <HAL_RCC_OscConfig+0x2b4>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd fca2 	bl	8001ca8 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004368:	f7fd fc9e 	bl	8001ca8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e164      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x200>
 8004386:	e015      	b.n	80043b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004388:	4b24      	ldr	r3, [pc, #144]	; (800441c <HAL_RCC_OscConfig+0x2b4>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fd fc8b 	bl	8001ca8 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004396:	f7fd fc87 	bl	8001ca8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e14d      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a0 	beq.w	8004502 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d121      	bne.n	8004442 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a07      	ldr	r2, [pc, #28]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fd fc4d 	bl	8001ca8 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	e011      	b.n	8004436 <HAL_RCC_OscConfig+0x2ce>
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	42470000 	.word	0x42470000
 800441c:	42470e80 	.word	0x42470e80
 8004420:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7fd fc40 	bl	8001ca8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e106      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b85      	ldr	r3, [pc, #532]	; (800464c <HAL_RCC_OscConfig+0x4e4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d106      	bne.n	8004458 <HAL_RCC_OscConfig+0x2f0>
 800444a:	4b81      	ldr	r3, [pc, #516]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a80      	ldr	r2, [pc, #512]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	e01c      	b.n	8004492 <HAL_RCC_OscConfig+0x32a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b05      	cmp	r3, #5
 800445e:	d10c      	bne.n	800447a <HAL_RCC_OscConfig+0x312>
 8004460:	4b7b      	ldr	r3, [pc, #492]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a7a      	ldr	r2, [pc, #488]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	4b78      	ldr	r3, [pc, #480]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4a77      	ldr	r2, [pc, #476]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	; 0x70
 8004478:	e00b      	b.n	8004492 <HAL_RCC_OscConfig+0x32a>
 800447a:	4b75      	ldr	r3, [pc, #468]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a74      	ldr	r2, [pc, #464]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
 8004486:	4b72      	ldr	r3, [pc, #456]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a71      	ldr	r2, [pc, #452]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d015      	beq.n	80044c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd fc05 	bl	8001ca8 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fd fc01 	bl	8001ca8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0c5      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b8:	4b65      	ldr	r3, [pc, #404]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ee      	beq.n	80044a2 <HAL_RCC_OscConfig+0x33a>
 80044c4:	e014      	b.n	80044f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c6:	f7fd fbef 	bl	8001ca8 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ce:	f7fd fbeb 	bl	8001ca8 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e0af      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e4:	4b5a      	ldr	r3, [pc, #360]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ee      	bne.n	80044ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f6:	4b56      	ldr	r3, [pc, #344]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a55      	ldr	r2, [pc, #340]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 809b 	beq.w	8004642 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450c:	4b50      	ldr	r3, [pc, #320]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b08      	cmp	r3, #8
 8004516:	d05c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d141      	bne.n	80045a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b4c      	ldr	r3, [pc, #304]	; (8004654 <HAL_RCC_OscConfig+0x4ec>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fd fbbf 	bl	8001ca8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452e:	f7fd fbbb 	bl	8001ca8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e081      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004540:	4b43      	ldr	r3, [pc, #268]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	019b      	lsls	r3, r3, #6
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	3b01      	subs	r3, #1
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	061b      	lsls	r3, r3, #24
 8004570:	4937      	ldr	r1, [pc, #220]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <HAL_RCC_OscConfig+0x4ec>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fd fb94 	bl	8001ca8 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fb90 	bl	8001ca8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e056      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004596:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x41c>
 80045a2:	e04e      	b.n	8004642 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <HAL_RCC_OscConfig+0x4ec>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fd fb7d 	bl	8001ca8 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fd fb79 	bl	8001ca8 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e03f      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c4:	4b22      	ldr	r3, [pc, #136]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x44a>
 80045d0:	e037      	b.n	8004642 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e032      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045de:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <HAL_RCC_OscConfig+0x4e8>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d028      	beq.n	800463e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d121      	bne.n	800463e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d11a      	bne.n	800463e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800460e:	4013      	ands	r3, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004614:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004616:	4293      	cmp	r3, r2
 8004618:	d111      	bne.n	800463e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d107      	bne.n	800463e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40007000 	.word	0x40007000
 8004650:	40023800 	.word	0x40023800
 8004654:	42470060 	.word	0x42470060

08004658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0cc      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800466c:	4b68      	ldr	r3, [pc, #416]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d90c      	bls.n	8004694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	4b63      	ldr	r3, [pc, #396]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0b8      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ac:	4b59      	ldr	r3, [pc, #356]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a58      	ldr	r2, [pc, #352]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c4:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a52      	ldr	r2, [pc, #328]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d0:	4b50      	ldr	r3, [pc, #320]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	494d      	ldr	r1, [pc, #308]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d044      	beq.n	8004778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d119      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e07f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d003      	beq.n	8004716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004712:	2b03      	cmp	r3, #3
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004716:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e06f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004726:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e067      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004736:	4b37      	ldr	r3, [pc, #220]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 0203 	bic.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4934      	ldr	r1, [pc, #208]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004748:	f7fd faae 	bl	8001ca8 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474e:	e00a      	b.n	8004766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004750:	f7fd faaa 	bl	8001ca8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e04f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	4b2b      	ldr	r3, [pc, #172]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 020c 	and.w	r2, r3, #12
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	429a      	cmp	r2, r3
 8004776:	d1eb      	bne.n	8004750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d20c      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b20      	ldr	r3, [pc, #128]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e032      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4916      	ldr	r1, [pc, #88]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ca:	4b12      	ldr	r3, [pc, #72]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	490e      	ldr	r1, [pc, #56]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047de:	f000 f821 	bl	8004824 <HAL_RCC_GetSysClockFreq>
 80047e2:	4602      	mov	r2, r0
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	490a      	ldr	r1, [pc, #40]	; (8004818 <HAL_RCC_ClockConfig+0x1c0>)
 80047f0:	5ccb      	ldrb	r3, [r1, r3]
 80047f2:	fa22 f303 	lsr.w	r3, r2, r3
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCC_ClockConfig+0x1c8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fd fa0e 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023c00 	.word	0x40023c00
 8004814:	40023800 	.word	0x40023800
 8004818:	08008d14 	.word	0x08008d14
 800481c:	20000000 	.word	0x20000000
 8004820:	20000004 	.word	0x20000004

08004824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004824:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	607b      	str	r3, [r7, #4]
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	2300      	movs	r3, #0
 8004836:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800483c:	4b67      	ldr	r3, [pc, #412]	; (80049dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b08      	cmp	r3, #8
 8004846:	d00d      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x40>
 8004848:	2b08      	cmp	r3, #8
 800484a:	f200 80bd 	bhi.w	80049c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x34>
 8004852:	2b04      	cmp	r3, #4
 8004854:	d003      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0x3a>
 8004856:	e0b7      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004858:	4b61      	ldr	r3, [pc, #388]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800485a:	60bb      	str	r3, [r7, #8]
       break;
 800485c:	e0b7      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485e:	4b61      	ldr	r3, [pc, #388]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004860:	60bb      	str	r3, [r7, #8]
      break;
 8004862:	e0b4      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004864:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800486c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486e:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d04d      	beq.n	8004916 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487a:	4b58      	ldr	r3, [pc, #352]	; (80049dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	099b      	lsrs	r3, r3, #6
 8004880:	461a      	mov	r2, r3
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	f240 10ff 	movw	r0, #511	; 0x1ff
 800488a:	f04f 0100 	mov.w	r1, #0
 800488e:	ea02 0800 	and.w	r8, r2, r0
 8004892:	ea03 0901 	and.w	r9, r3, r1
 8004896:	4640      	mov	r0, r8
 8004898:	4649      	mov	r1, r9
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	014b      	lsls	r3, r1, #5
 80048a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048a8:	0142      	lsls	r2, r0, #5
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	ebb0 0008 	subs.w	r0, r0, r8
 80048b2:	eb61 0109 	sbc.w	r1, r1, r9
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	018b      	lsls	r3, r1, #6
 80048c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048c4:	0182      	lsls	r2, r0, #6
 80048c6:	1a12      	subs	r2, r2, r0
 80048c8:	eb63 0301 	sbc.w	r3, r3, r1
 80048cc:	f04f 0000 	mov.w	r0, #0
 80048d0:	f04f 0100 	mov.w	r1, #0
 80048d4:	00d9      	lsls	r1, r3, #3
 80048d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048da:	00d0      	lsls	r0, r2, #3
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	eb12 0208 	adds.w	r2, r2, r8
 80048e4:	eb43 0309 	adc.w	r3, r3, r9
 80048e8:	f04f 0000 	mov.w	r0, #0
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	0259      	lsls	r1, r3, #9
 80048f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048f6:	0250      	lsls	r0, r2, #9
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	461a      	mov	r2, r3
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	f7fb fc5e 	bl	80001c8 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4613      	mov	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e04a      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004916:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	099b      	lsrs	r3, r3, #6
 800491c:	461a      	mov	r2, r3
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004926:	f04f 0100 	mov.w	r1, #0
 800492a:	ea02 0400 	and.w	r4, r2, r0
 800492e:	ea03 0501 	and.w	r5, r3, r1
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	014b      	lsls	r3, r1, #5
 8004940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004944:	0142      	lsls	r2, r0, #5
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	1b00      	subs	r0, r0, r4
 800494c:	eb61 0105 	sbc.w	r1, r1, r5
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	018b      	lsls	r3, r1, #6
 800495a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800495e:	0182      	lsls	r2, r0, #6
 8004960:	1a12      	subs	r2, r2, r0
 8004962:	eb63 0301 	sbc.w	r3, r3, r1
 8004966:	f04f 0000 	mov.w	r0, #0
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	00d9      	lsls	r1, r3, #3
 8004970:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004974:	00d0      	lsls	r0, r2, #3
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	1912      	adds	r2, r2, r4
 800497c:	eb45 0303 	adc.w	r3, r5, r3
 8004980:	f04f 0000 	mov.w	r0, #0
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	0299      	lsls	r1, r3, #10
 800498a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800498e:	0290      	lsls	r0, r2, #10
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	461a      	mov	r2, r3
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	f7fb fc12 	bl	80001c8 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4613      	mov	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	60bb      	str	r3, [r7, #8]
      break;
 80049c6:	e002      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049ca:	60bb      	str	r3, [r7, #8]
      break;
 80049cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ce:	68bb      	ldr	r3, [r7, #8]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	00f42400 	.word	0x00f42400
 80049e4:	007a1200 	.word	0x007a1200

080049e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b03      	ldr	r3, [pc, #12]	; (80049fc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000000 	.word	0x20000000

08004a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a04:	f7ff fff0 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0a9b      	lsrs	r3, r3, #10
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4903      	ldr	r1, [pc, #12]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40023800 	.word	0x40023800
 8004a24:	08008d24 	.word	0x08008d24

08004a28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d035      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a50:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a56:	f7fd f927 	bl	8001ca8 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a5e:	f7fd f923 	bl	8001ca8 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0b0      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a70:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	019a      	lsls	r2, r3, #6
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	071b      	lsls	r3, r3, #28
 8004a88:	4955      	ldr	r1, [pc, #340]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a90:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a96:	f7fd f907 	bl	8001ca8 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a9e:	f7fd f903 	bl	8001ca8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e090      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8083 	beq.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b44      	ldr	r3, [pc, #272]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a43      	ldr	r2, [pc, #268]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3e      	ldr	r2, [pc, #248]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fd f8d9 	bl	8001ca8 <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fd f8d5 	bl	8001ca8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e062      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b0c:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b18:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d028      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b40:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b46:	4b28      	ldr	r3, [pc, #160]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b4c:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d114      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fd f8a3 	bl	8001ca8 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fd f89f 	bl	8001ca8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e02a      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ee      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b94:	d10d      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	490d      	ldr	r1, [pc, #52]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	e005      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bbc:	6093      	str	r3, [r2, #8]
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	4905      	ldr	r1, [pc, #20]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	42470068 	.word	0x42470068
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40007000 	.word	0x40007000
 8004be8:	42470e40 	.word	0x42470e40

08004bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d13e      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d12f      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c22:	617b      	str	r3, [r7, #20]
          break;
 8004c24:	e02f      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c32:	d108      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3c:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e007      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c70:	0f1b      	lsrs	r3, r3, #28
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
          break;
 8004c7e:	e002      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
          break;
 8004c84:	bf00      	nop
        }
      }
      break;
 8004c86:	bf00      	nop
    }
  }
  return frequency;
 8004c88:	697b      	ldr	r3, [r7, #20]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	00bb8000 	.word	0x00bb8000
 8004ca0:	007a1200 	.word	0x007a1200
 8004ca4:	00f42400 	.word	0x00f42400

08004ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07b      	b.n	8004db2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cca:	d009      	beq.n	8004ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc fe94 	bl	8001a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	ea42 0103 	orr.w	r1, r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	f003 0104 	and.w	r1, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f003 0210 	and.w	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dba:	b084      	sub	sp, #16
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	f107 001c 	add.w	r0, r7, #28
 8004dc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d122      	bne.n	8004e18 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d105      	bne.n	8004e0c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 fac5 	bl	800639c <USB_CoreReset>
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e01a      	b.n	8004e4e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f001 fab9 	bl	800639c <USB_CoreReset>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e40:	e005      	b.n	8004e4e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10b      	bne.n	8004e6c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f043 0206 	orr.w	r2, r3, #6
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e78:	b004      	add	sp, #16
 8004e7a:	4770      	bx	lr

08004e7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	4613      	mov	r3, r2
 8004e88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d165      	bne.n	8004f5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a41      	ldr	r2, [pc, #260]	; (8004f98 <USB_SetTurnaroundTime+0x11c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d906      	bls.n	8004ea6 <USB_SetTurnaroundTime+0x2a>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a40      	ldr	r2, [pc, #256]	; (8004f9c <USB_SetTurnaroundTime+0x120>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d202      	bcs.n	8004ea6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ea0:	230f      	movs	r3, #15
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e062      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4a3c      	ldr	r2, [pc, #240]	; (8004f9c <USB_SetTurnaroundTime+0x120>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d306      	bcc.n	8004ebc <USB_SetTurnaroundTime+0x40>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4a3b      	ldr	r2, [pc, #236]	; (8004fa0 <USB_SetTurnaroundTime+0x124>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d202      	bcs.n	8004ebc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004eb6:	230e      	movs	r3, #14
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e057      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a38      	ldr	r2, [pc, #224]	; (8004fa0 <USB_SetTurnaroundTime+0x124>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d306      	bcc.n	8004ed2 <USB_SetTurnaroundTime+0x56>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a37      	ldr	r2, [pc, #220]	; (8004fa4 <USB_SetTurnaroundTime+0x128>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d202      	bcs.n	8004ed2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ecc:	230d      	movs	r3, #13
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e04c      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a33      	ldr	r2, [pc, #204]	; (8004fa4 <USB_SetTurnaroundTime+0x128>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d306      	bcc.n	8004ee8 <USB_SetTurnaroundTime+0x6c>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a32      	ldr	r2, [pc, #200]	; (8004fa8 <USB_SetTurnaroundTime+0x12c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d802      	bhi.n	8004ee8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e041      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a2f      	ldr	r2, [pc, #188]	; (8004fa8 <USB_SetTurnaroundTime+0x12c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d906      	bls.n	8004efe <USB_SetTurnaroundTime+0x82>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a2e      	ldr	r2, [pc, #184]	; (8004fac <USB_SetTurnaroundTime+0x130>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d802      	bhi.n	8004efe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ef8:	230b      	movs	r3, #11
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e036      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <USB_SetTurnaroundTime+0x130>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d906      	bls.n	8004f14 <USB_SetTurnaroundTime+0x98>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4a29      	ldr	r2, [pc, #164]	; (8004fb0 <USB_SetTurnaroundTime+0x134>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d802      	bhi.n	8004f14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f0e:	230a      	movs	r3, #10
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e02b      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <USB_SetTurnaroundTime+0x134>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d906      	bls.n	8004f2a <USB_SetTurnaroundTime+0xae>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a25      	ldr	r2, [pc, #148]	; (8004fb4 <USB_SetTurnaroundTime+0x138>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d202      	bcs.n	8004f2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f24:	2309      	movs	r3, #9
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e020      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4a21      	ldr	r2, [pc, #132]	; (8004fb4 <USB_SetTurnaroundTime+0x138>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d306      	bcc.n	8004f40 <USB_SetTurnaroundTime+0xc4>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <USB_SetTurnaroundTime+0x13c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d802      	bhi.n	8004f40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e015      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <USB_SetTurnaroundTime+0x13c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d906      	bls.n	8004f56 <USB_SetTurnaroundTime+0xda>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <USB_SetTurnaroundTime+0x140>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d202      	bcs.n	8004f56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f50:	2307      	movs	r3, #7
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e00a      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f56:	2306      	movs	r3, #6
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e007      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f62:	2309      	movs	r3, #9
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e001      	b.n	8004f6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f68:	2309      	movs	r3, #9
 8004f6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	029b      	lsls	r3, r3, #10
 8004f80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	00d8acbf 	.word	0x00d8acbf
 8004f9c:	00e4e1c0 	.word	0x00e4e1c0
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	01067380 	.word	0x01067380
 8004fa8:	011a499f 	.word	0x011a499f
 8004fac:	01312cff 	.word	0x01312cff
 8004fb0:	014ca43f 	.word	0x014ca43f
 8004fb4:	016e3600 	.word	0x016e3600
 8004fb8:	01a6ab1f 	.word	0x01a6ab1f
 8004fbc:	01e84800 	.word	0x01e84800

08004fc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f043 0201 	orr.w	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f023 0201 	bic.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d106      	bne.n	8005030 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]
 800502e:	e00b      	b.n	8005048 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e001      	b.n	8005048 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e003      	b.n	8005050 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005048:	2032      	movs	r0, #50	; 0x32
 800504a:	f7fc fe39 	bl	8001cc0 <HAL_Delay>

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005058:	b084      	sub	sp, #16
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e009      	b.n	800508c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3340      	adds	r3, #64	; 0x40
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	2200      	movs	r2, #0
 8005084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3301      	adds	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b0e      	cmp	r3, #14
 8005090:	d9f2      	bls.n	8005078 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11c      	bne.n	80050d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a6:	f043 0302 	orr.w	r3, r3, #2
 80050aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
 80050d0:	e00b      	b.n	80050ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050f0:	461a      	mov	r2, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fc:	4619      	mov	r1, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005104:	461a      	mov	r2, r3
 8005106:	680b      	ldr	r3, [r1, #0]
 8005108:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10c      	bne.n	800512a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005116:	2100      	movs	r1, #0
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f949 	bl	80053b0 <USB_SetDevSpeed>
 800511e:	e008      	b.n	8005132 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005120:	2101      	movs	r1, #1
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f944 	bl	80053b0 <USB_SetDevSpeed>
 8005128:	e003      	b.n	8005132 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800512a:	2103      	movs	r1, #3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f93f 	bl	80053b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005132:	2110      	movs	r1, #16
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f8f3 	bl	8005320 <USB_FlushTxFifo>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f911 	bl	800536c <USB_FlushRxFifo>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	461a      	mov	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	e043      	b.n	8005206 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005194:	d118      	bne.n	80051c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	461a      	mov	r2, r3
 80051aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e013      	b.n	80051da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	461a      	mov	r2, r3
 80051c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e008      	b.n	80051da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	461a      	mov	r2, r3
 80051e8:	2300      	movs	r3, #0
 80051ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	461a      	mov	r2, r3
 80051fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	3301      	adds	r3, #1
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	429a      	cmp	r2, r3
 800520c:	d3b7      	bcc.n	800517e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	e043      	b.n	800529c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800522a:	d118      	bne.n	800525e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	461a      	mov	r2, r3
 8005240:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e013      	b.n	8005270 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	461a      	mov	r2, r3
 8005256:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	e008      	b.n	8005270 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	461a      	mov	r2, r3
 800526c:	2300      	movs	r3, #0
 800526e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	461a      	mov	r2, r3
 800527e:	2300      	movs	r3, #0
 8005280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528e:	461a      	mov	r2, r3
 8005290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005294:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3301      	adds	r3, #1
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d3b7      	bcc.n	8005214 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f043 0210 	orr.w	r2, r3, #16
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <USB_DevInit+0x2c4>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f043 0208 	orr.w	r2, r3, #8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005318:	b004      	add	sp, #16
 800531a:	4770      	bx	lr
 800531c:	803c3800 	.word	0x803c3800

08005320 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	019b      	lsls	r3, r3, #6
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <USB_FlushTxFifo+0x48>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e006      	b.n	800535a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b20      	cmp	r3, #32
 8005356:	d0f0      	beq.n	800533a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	00030d40 	.word	0x00030d40

0800536c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2210      	movs	r2, #16
 800537c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3301      	adds	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a09      	ldr	r2, [pc, #36]	; (80053ac <USB_FlushRxFifo+0x40>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e006      	b.n	800539e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b10      	cmp	r3, #16
 800539a:	d0f0      	beq.n	800537e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	00030d40 	.word	0x00030d40

080053b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d0:	4313      	orrs	r3, r2
 80053d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b087      	sub	sp, #28
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0306 	and.w	r3, r3, #6
 80053fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d102      	bne.n	8005408 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]
 8005406:	e00a      	b.n	800541e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d002      	beq.n	8005414 <USB_GetDevSpeed+0x32>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b06      	cmp	r3, #6
 8005412:	d102      	bne.n	800541a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005414:	2302      	movs	r3, #2
 8005416:	75fb      	strb	r3, [r7, #23]
 8005418:	e001      	b.n	800541e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800541a:	230f      	movs	r3, #15
 800541c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800541e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005420:	4618      	mov	r0, r3
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d13a      	bne.n	80054be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	2101      	movs	r1, #1
 800545a:	fa01 f303 	lsl.w	r3, r1, r3
 800545e:	b29b      	uxth	r3, r3
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005466:	4313      	orrs	r3, r2
 8005468:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d155      	bne.n	800552c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	78db      	ldrb	r3, [r3, #3]
 800549a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800549c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	059b      	lsls	r3, r3, #22
 80054a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a4:	4313      	orrs	r3, r2
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	e036      	b.n	800552c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	2101      	movs	r1, #1
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054dc:	4313      	orrs	r3, r2
 80054de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11a      	bne.n	800552c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	78db      	ldrb	r3, [r3, #3]
 8005510:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005512:	430b      	orrs	r3, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	785b      	ldrb	r3, [r3, #1]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d161      	bne.n	800561c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800556e:	d11f      	bne.n	80055b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800558e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	2101      	movs	r1, #1
 80055c2:	fa01 f303 	lsl.w	r3, r1, r3
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d0:	4013      	ands	r3, r2
 80055d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	2101      	movs	r1, #1
 80055e6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	43db      	mvns	r3, r3
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f4:	4013      	ands	r3, r2
 80055f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	0159      	lsls	r1, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	440b      	add	r3, r1
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	4619      	mov	r1, r3
 8005614:	4b35      	ldr	r3, [pc, #212]	; (80056ec <USB_DeactivateEndpoint+0x1b0>)
 8005616:	4013      	ands	r3, r2
 8005618:	600b      	str	r3, [r1, #0]
 800561a:	e060      	b.n	80056de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800562e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005632:	d11f      	bne.n	8005674 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005652:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	43db      	mvns	r3, r3
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005694:	4013      	ands	r3, r2
 8005696:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	2101      	movs	r1, #1
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	43db      	mvns	r3, r3
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b8:	4013      	ands	r3, r2
 80056ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	0159      	lsls	r1, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	440b      	add	r3, r1
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	4619      	mov	r1, r3
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <USB_DeactivateEndpoint+0x1b4>)
 80056da:	4013      	ands	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	ec337800 	.word	0xec337800
 80056f0:	eff37800 	.word	0xeff37800

080056f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08a      	sub	sp, #40	; 0x28
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b01      	cmp	r3, #1
 8005712:	f040 815c 	bne.w	80059ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d132      	bne.n	8005784 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005738:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800573c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005740:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005760:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	0cdb      	lsrs	r3, r3, #19
 800577e:	04db      	lsls	r3, r3, #19
 8005780:	6113      	str	r3, [r2, #16]
 8005782:	e074      	b.n	800586e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579e:	0cdb      	lsrs	r3, r3, #19
 80057a0:	04db      	lsls	r3, r3, #19
 80057a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6959      	ldr	r1, [r3, #20]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	440b      	add	r3, r1
 80057e0:	1e59      	subs	r1, r3, #1
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ea:	04d9      	lsls	r1, r3, #19
 80057ec:	4b9d      	ldr	r3, [pc, #628]	; (8005a64 <USB_EPStartXfer+0x370>)
 80057ee:	400b      	ands	r3, r1
 80057f0:	69b9      	ldr	r1, [r7, #24]
 80057f2:	0148      	lsls	r0, r1, #5
 80057f4:	69f9      	ldr	r1, [r7, #28]
 80057f6:	4401      	add	r1, r0
 80057f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057fc:	4313      	orrs	r3, r2
 80057fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005816:	69b9      	ldr	r1, [r7, #24]
 8005818:	0148      	lsls	r0, r1, #5
 800581a:	69f9      	ldr	r1, [r7, #28]
 800581c:	4401      	add	r1, r0
 800581e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005822:	4313      	orrs	r3, r2
 8005824:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d11f      	bne.n	800586e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005848:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800584c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800586c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d14b      	bne.n	800590c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	78db      	ldrb	r3, [r3, #3]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d128      	bne.n	80058ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d110      	bne.n	80058ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	e00f      	b.n	80058ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005904:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e12f      	b.n	8005b6c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005926:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800592a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	78db      	ldrb	r3, [r3, #3]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d015      	beq.n	8005960 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8117 	beq.w	8005b6c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	2101      	movs	r1, #1
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	69f9      	ldr	r1, [r7, #28]
 8005956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800595a:	4313      	orrs	r3, r2
 800595c:	634b      	str	r3, [r1, #52]	; 0x34
 800595e:	e105      	b.n	8005b6c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d110      	bne.n	8005992 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e00f      	b.n	80059b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	68d9      	ldr	r1, [r3, #12]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	b298      	uxth	r0, r3
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4603      	mov	r3, r0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fa2b 	bl	8005e22 <USB_WritePacket>
 80059cc:	e0ce      	b.n	8005b6c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e8:	0cdb      	lsrs	r3, r3, #19
 80059ea:	04db      	lsls	r3, r3, #19
 80059ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d126      	bne.n	8005a68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a30:	69b9      	ldr	r1, [r7, #24]
 8005a32:	0148      	lsls	r0, r1, #5
 8005a34:	69f9      	ldr	r1, [r7, #28]
 8005a36:	4401      	add	r1, r0
 8005a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a5e:	6113      	str	r3, [r2, #16]
 8005a60:	e036      	b.n	8005ad0 <USB_EPStartXfer+0x3dc>
 8005a62:	bf00      	nop
 8005a64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	1e5a      	subs	r2, r3, #1
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	8afb      	ldrh	r3, [r7, #22]
 8005a8e:	04d9      	lsls	r1, r3, #19
 8005a90:	4b39      	ldr	r3, [pc, #228]	; (8005b78 <USB_EPStartXfer+0x484>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	0148      	lsls	r0, r1, #5
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	4401      	add	r1, r0
 8005a9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	8af9      	ldrh	r1, [r7, #22]
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac0:	69b9      	ldr	r1, [r7, #24]
 8005ac2:	0148      	lsls	r0, r1, #5
 8005ac4:	69f9      	ldr	r1, [r7, #28]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005acc:	4313      	orrs	r3, r2
 8005ace:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d10d      	bne.n	8005af2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68d9      	ldr	r1, [r3, #12]
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	460a      	mov	r2, r1
 8005af0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	78db      	ldrb	r3, [r3, #3]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d128      	bne.n	8005b4c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d110      	bne.n	8005b2c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	e00f      	b.n	8005b4c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	1ff80000 	.word	0x1ff80000

08005b7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	4613      	mov	r3, r2
 8005b88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	f040 80cd 	bne.w	8005d38 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d132      	bne.n	8005c0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	0cdb      	lsrs	r3, r3, #19
 8005c06:	04db      	lsls	r3, r3, #19
 8005c08:	6113      	str	r3, [r2, #16]
 8005c0a:	e04e      	b.n	8005caa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c26:	0cdb      	lsrs	r3, r3, #19
 8005c28:	04db      	lsls	r3, r3, #19
 8005c2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d903      	bls.n	8005c64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c9a:	6939      	ldr	r1, [r7, #16]
 8005c9c:	0148      	lsls	r0, r1, #5
 8005c9e:	6979      	ldr	r1, [r7, #20]
 8005ca0:	4401      	add	r1, r0
 8005ca2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d11e      	bne.n	8005cee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d009      	beq.n	8005ccc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	e092      	b.n	8005e14 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d07e      	beq.n	8005e14 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	2101      	movs	r1, #1
 8005d28:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d32:	4313      	orrs	r3, r2
 8005d34:	634b      	str	r3, [r1, #52]	; 0x34
 8005d36:	e06d      	b.n	8005e14 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d52:	0cdb      	lsrs	r3, r3, #19
 8005d54:	04db      	lsls	r3, r3, #19
 8005d56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005daa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc2:	6939      	ldr	r1, [r7, #16]
 8005dc4:	0148      	lsls	r0, r1, #5
 8005dc6:	6979      	ldr	r1, [r7, #20]
 8005dc8:	4401      	add	r1, r0
 8005dca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d10d      	bne.n	8005df4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	68d9      	ldr	r1, [r3, #12]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	460a      	mov	r2, r1
 8005df2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b089      	sub	sp, #36	; 0x24
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	461a      	mov	r2, r3
 8005e30:	460b      	mov	r3, r1
 8005e32:	71fb      	strb	r3, [r7, #7]
 8005e34:	4613      	mov	r3, r2
 8005e36:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11a      	bne.n	8005e7e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e48:	88bb      	ldrh	r3, [r7, #4]
 8005e4a:	3303      	adds	r3, #3
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e00f      	b.n	8005e76 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	031a      	lsls	r2, r3, #12
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e62:	461a      	mov	r2, r3
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	3301      	adds	r3, #1
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d3eb      	bcc.n	8005e56 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3724      	adds	r7, #36	; 0x24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	3303      	adds	r3, #3
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e00b      	b.n	8005ec8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d3ef      	bcc.n	8005eb0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3724      	adds	r7, #36	; 0x24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d12c      	bne.n	8005f54 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	db12      	blt.n	8005f32 <USB_EPSetStall+0x54>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00f      	beq.n	8005f32 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f30:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e02b      	b.n	8005fac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	db12      	blt.n	8005f8c <USB_EPSetStall+0xae>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00f      	beq.n	8005f8c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f8a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005faa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d128      	bne.n	8006028 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ff4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	78db      	ldrb	r3, [r3, #3]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d003      	beq.n	8006006 <USB_EPClearStall+0x4c>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	78db      	ldrb	r3, [r3, #3]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d138      	bne.n	8006078 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	e027      	b.n	8006078 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	440a      	add	r2, r1
 800603e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006046:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	78db      	ldrb	r3, [r3, #3]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d003      	beq.n	8006058 <USB_EPClearStall+0x9e>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	78db      	ldrb	r3, [r3, #3]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d10f      	bne.n	8006078 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006076:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060ec:	f023 0303 	bic.w	r3, r3, #3
 80060f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006100:	f023 0302 	bic.w	r3, r3, #2
 8006104:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006142:	f043 0302 	orr.w	r3, r3, #2
 8006146:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4013      	ands	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800616e:	68fb      	ldr	r3, [r7, #12]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4013      	ands	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	0c1b      	lsrs	r3, r3, #16
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	b29b      	uxth	r3, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006212:	68bb      	ldr	r3, [r7, #8]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	01db      	lsls	r3, r3, #7
 8006252:	b2db      	uxtb	r3, r3
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4013      	ands	r3, r2
 800626c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800626e:	68bb      	ldr	r3, [r7, #8]
}
 8006270:	4618      	mov	r0, r3
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0301 	and.w	r3, r3, #1
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
	...

080062e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	460b      	mov	r3, r1
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	333c      	adds	r3, #60	; 0x3c
 80062f6:	3304      	adds	r3, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4a26      	ldr	r2, [pc, #152]	; (8006398 <USB_EP0_OutStart+0xb8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d90a      	bls.n	800631a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006314:	d101      	bne.n	800631a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	e037      	b.n	800638a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006348:	f043 0318 	orr.w	r3, r3, #24
 800634c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10f      	bne.n	8006388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	4f54300a 	.word	0x4f54300a

0800639c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a13      	ldr	r2, [pc, #76]	; (8006400 <USB_CoreReset+0x64>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d901      	bls.n	80063ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e01b      	b.n	80063f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	daf2      	bge.n	80063a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f043 0201 	orr.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a09      	ldr	r2, [pc, #36]	; (8006400 <USB_CoreReset+0x64>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d901      	bls.n	80063e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d0f0      	beq.n	80063d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	00030d40 	.word	0x00030d40

08006404 <cobs_encode>:
 *
 * returns:        A struct containing the success status of the encoding
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result cobs_encode(void *dst_buf_ptr, size_t dst_buf_len, const void *src_ptr, size_t src_len) {
 8006404:	b480      	push	{r7}
 8006406:	b08f      	sub	sp, #60	; 0x3c
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
  cobs_encode_result result = {0, COBS_ENCODE_OK};
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	2300      	movs	r3, #0
 8006418:	753b      	strb	r3, [r7, #20]
  const uint8_t *src_read_ptr = src_ptr;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
  const uint8_t *src_end_ptr = src_read_ptr + src_len;
 800641e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006422:	4413      	add	r3, r2
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *dst_buf_start_ptr = dst_buf_ptr;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	623b      	str	r3, [r7, #32]
  uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4413      	add	r3, r2
 8006430:	61fb      	str	r3, [r7, #28]
  uint8_t *dst_code_write_ptr = dst_buf_ptr;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t *dst_write_ptr = dst_code_write_ptr + 1;
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	3301      	adds	r3, #1
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t src_byte = 0;
 800643c:	2300      	movs	r3, #0
 800643e:	76fb      	strb	r3, [r7, #27]
  uint8_t search_len = 1;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* First, do a NULL pointer check and return immediately if it fails. */
  if ((dst_buf_ptr == NULL) || (src_ptr == NULL)) {
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <cobs_encode+0x4e>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <cobs_encode+0x64>
    result.status = COBS_ENCODE_NULL_POINTER;
 8006452:	2301      	movs	r3, #1
 8006454:	753b      	strb	r3, [r7, #20]
    return result;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	461a      	mov	r2, r3
 800645a:	f107 0310 	add.w	r3, r7, #16
 800645e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006462:	e882 0003 	stmia.w	r2, {r0, r1}
 8006466:	e05f      	b.n	8006528 <cobs_encode+0x124>
  }

  if (src_len != 0) {
 8006468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d040      	beq.n	80064f0 <cobs_encode+0xec>
    /* Iterate over the source bytes */
    for (;;) {
      /* Check for running out of output buffer space */
      if (dst_write_ptr >= dst_buf_end_ptr) {
 800646e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	429a      	cmp	r2, r3
 8006474:	d305      	bcc.n	8006482 <cobs_encode+0x7e>
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8006476:	7d3b      	ldrb	r3, [r7, #20]
 8006478:	f043 0302 	orr.w	r3, r3, #2
 800647c:	b2db      	uxtb	r3, r3
 800647e:	753b      	strb	r3, [r7, #20]
        break;
 8006480:	e036      	b.n	80064f0 <cobs_encode+0xec>
      }

      src_byte = *src_read_ptr++;
 8006482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	637a      	str	r2, [r7, #52]	; 0x34
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	76fb      	strb	r3, [r7, #27]
      if (src_byte == 0) {
 800648c:	7efb      	ldrb	r3, [r7, #27]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <cobs_encode+0xae>
        /* We found a zero byte */
        *dst_code_write_ptr = search_len;
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006498:	701a      	strb	r2, [r3, #0]
        dst_code_write_ptr = dst_write_ptr++;
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30
        search_len = 1;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (src_read_ptr >= src_end_ptr) {
 80064a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d3de      	bcc.n	800646e <cobs_encode+0x6a>
          break;
 80064b0:	e01e      	b.n	80064f0 <cobs_encode+0xec>
        }
      } else {
        /* Copy the non-zero byte to the destination buffer */
        *dst_write_ptr++ = src_byte;
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b8:	7efa      	ldrb	r2, [r7, #27]
 80064ba:	701a      	strb	r2, [r3, #0]
        search_len++;
 80064bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064c0:	3301      	adds	r3, #1
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (src_read_ptr >= src_end_ptr) {
 80064c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d20f      	bcs.n	80064ee <cobs_encode+0xea>
          break;
        }
        if (search_len == 0xFF) {
 80064ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064d2:	2bff      	cmp	r3, #255	; 0xff
 80064d4:	d1cb      	bne.n	800646e <cobs_encode+0x6a>
          /* We have a long string of non-zero bytes, so we need
           * to write out a length code of 0xFF. */
          *dst_code_write_ptr = search_len;
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80064dc:	701a      	strb	r2, [r3, #0]
          dst_code_write_ptr = dst_write_ptr++;
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e4:	633b      	str	r3, [r7, #48]	; 0x30
          search_len = 1;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (dst_write_ptr >= dst_buf_end_ptr) {
 80064ec:	e7bf      	b.n	800646e <cobs_encode+0x6a>
          break;
 80064ee:	bf00      	nop

  /* We've reached the end of the source data (or possibly run out of output buffer)
   * Finalise the remaining output. In particular, write the code (length) byte.
   * Update the pointer to calculate the final output length.
   */
  if (dst_code_write_ptr >= dst_buf_end_ptr) {
 80064f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d307      	bcc.n	8006508 <cobs_encode+0x104>
    /* We've run out of output buffer to write the code byte. */
    result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 80064f8:	7d3b      	ldrb	r3, [r7, #20]
 80064fa:	f043 0302 	orr.w	r3, r3, #2
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	753b      	strb	r3, [r7, #20]
    dst_write_ptr = dst_buf_end_ptr;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006506:	e003      	b.n	8006510 <cobs_encode+0x10c>
  } else {
    /* Write the last code (length) byte. */
    *dst_code_write_ptr = search_len;
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800650e:	701a      	strb	r2, [r3, #0]
  }

  /* Calculate the output length, from the value of dst_code_write_ptr */
  result.out_len = dst_write_ptr - dst_buf_start_ptr;
 8006510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	613b      	str	r3, [r7, #16]

  return result;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	461a      	mov	r2, r3
 800651c:	f107 0310 	add.w	r3, r7, #16
 8006520:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006524:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	373c      	adds	r7, #60	; 0x3c
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <cobs_decode>:
 *
 * returns:        A struct containing the success status of the decoding
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_decode_result cobs_decode(void *dst_buf_ptr, size_t dst_buf_len, const void *src_ptr, size_t src_len) {
 8006534:	b480      	push	{r7}
 8006536:	b08f      	sub	sp, #60	; 0x3c
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  cobs_decode_result result = {0, COBS_DECODE_OK};
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	2300      	movs	r3, #0
 8006548:	753b      	strb	r3, [r7, #20]
  const uint8_t *src_read_ptr = src_ptr;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
  const uint8_t *src_end_ptr = src_read_ptr + src_len;
 800654e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006552:	4413      	add	r3, r2
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t *dst_buf_start_ptr = dst_buf_ptr;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 800655a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4413      	add	r3, r2
 8006560:	623b      	str	r3, [r7, #32]
  uint8_t *dst_write_ptr = dst_buf_ptr;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t src_byte;
  uint8_t i;
  uint8_t len_code;

  /* First, do a NULL pointer check and return immediately if it fails. */
  if ((dst_buf_ptr == NULL) || (src_ptr == NULL)) {
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <cobs_decode+0x3e>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <cobs_decode+0x54>
    result.status = COBS_DECODE_NULL_POINTER;
 8006572:	2301      	movs	r3, #1
 8006574:	753b      	strb	r3, [r7, #20]
    return result;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	461a      	mov	r2, r3
 800657a:	f107 0310 	add.w	r3, r7, #16
 800657e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006582:	e882 0003 	stmia.w	r2, {r0, r1}
 8006586:	e07e      	b.n	8006686 <cobs_decode+0x152>
  }

  if (src_len != 0) {
 8006588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d06f      	beq.n	800666e <cobs_decode+0x13a>
    for (;;) {
      len_code = *src_read_ptr++;
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	637a      	str	r2, [r7, #52]	; 0x34
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      if (len_code == 0) {
 800659a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d105      	bne.n	80065ae <cobs_decode+0x7a>
        result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 80065a2:	7d3b      	ldrb	r3, [r7, #20]
 80065a4:	f043 0304 	orr.w	r3, r3, #4
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	753b      	strb	r3, [r7, #20]
        break;
 80065ac:	e05f      	b.n	800666e <cobs_decode+0x13a>
      }
      len_code--;
 80065ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065b2:	3b01      	subs	r3, #1
 80065b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      /* Check length code against remaining input bytes */
      remaining_bytes = src_end_ptr - src_read_ptr;
 80065b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	61fb      	str	r3, [r7, #28]
      if (len_code > remaining_bytes) {
 80065c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d207      	bcs.n	80065da <cobs_decode+0xa6>
        result.status |= COBS_DECODE_INPUT_TOO_SHORT;
 80065ca:	7d3b      	ldrb	r3, [r7, #20]
 80065cc:	f043 0308 	orr.w	r3, r3, #8
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	753b      	strb	r3, [r7, #20]
        len_code = remaining_bytes;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

      /* Check length code against remaining output buffer space */
      remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
 80065da:	6a3a      	ldr	r2, [r7, #32]
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	61fb      	str	r3, [r7, #28]
      if (len_code > remaining_bytes) {
 80065e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d207      	bcs.n	80065fc <cobs_decode+0xc8>
        result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 80065ec:	7d3b      	ldrb	r3, [r7, #20]
 80065ee:	f043 0302 	orr.w	r3, r3, #2
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	753b      	strb	r3, [r7, #20]
        len_code = remaining_bytes;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

      for (i = len_code; i != 0; i--) {
 80065fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006604:	e016      	b.n	8006634 <cobs_decode+0x100>
        src_byte = *src_read_ptr++;
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	637a      	str	r2, [r7, #52]	; 0x34
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	76fb      	strb	r3, [r7, #27]
        if (src_byte == 0) {
 8006610:	7efb      	ldrb	r3, [r7, #27]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <cobs_decode+0xec>
          result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 8006616:	7d3b      	ldrb	r3, [r7, #20]
 8006618:	f043 0304 	orr.w	r3, r3, #4
 800661c:	b2db      	uxtb	r3, r3
 800661e:	753b      	strb	r3, [r7, #20]
        }
        *dst_write_ptr++ = src_byte;
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	633a      	str	r2, [r7, #48]	; 0x30
 8006626:	7efa      	ldrb	r2, [r7, #27]
 8006628:	701a      	strb	r2, [r3, #0]
      for (i = len_code; i != 0; i--) {
 800662a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800662e:	3b01      	subs	r3, #1
 8006630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e4      	bne.n	8006606 <cobs_decode+0xd2>
      }

      if (src_read_ptr >= src_end_ptr) {
 800663c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	429a      	cmp	r2, r3
 8006642:	d213      	bcs.n	800666c <cobs_decode+0x138>
        break;
      }

      /* Add a zero to the end */
      if (len_code != 0xFE) {
 8006644:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006648:	2bfe      	cmp	r3, #254	; 0xfe
 800664a:	d0a0      	beq.n	800658e <cobs_decode+0x5a>
        if (dst_write_ptr >= dst_buf_end_ptr) {
 800664c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	429a      	cmp	r2, r3
 8006652:	d305      	bcc.n	8006660 <cobs_decode+0x12c>
          result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 8006654:	7d3b      	ldrb	r3, [r7, #20]
 8006656:	f043 0302 	orr.w	r3, r3, #2
 800665a:	b2db      	uxtb	r3, r3
 800665c:	753b      	strb	r3, [r7, #20]
          break;
 800665e:	e006      	b.n	800666e <cobs_decode+0x13a>
        }
        *dst_write_ptr++ = 0;
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	633a      	str	r2, [r7, #48]	; 0x30
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
      len_code = *src_read_ptr++;
 800666a:	e790      	b.n	800658e <cobs_decode+0x5a>
        break;
 800666c:	bf00      	nop
      }
    }
  }

  result.out_len = dst_write_ptr - dst_buf_start_ptr;
 800666e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	613b      	str	r3, [r7, #16]

  return result;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	461a      	mov	r2, r3
 800667a:	f107 0310 	add.w	r3, r7, #16
 800667e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006682:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	373c      	adds	r7, #60	; 0x3c
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <_Z8crc_mathhh>:
// callers use crc8_byte

#ifdef CRC_MATH
// A basic implementation of CRC8 using only arithmetic

uint8_t crc_math(uint8_t data, uint8_t crc) {
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	4603      	mov	r3, r0
 800669a:	460a      	mov	r2, r1
 800669c:	71fb      	strb	r3, [r7, #7]
 800669e:	4613      	mov	r3, r2
 80066a0:	71bb      	strb	r3, [r7, #6]
  uint8_t i = (data ^ crc);
 80066a2:	79fa      	ldrb	r2, [r7, #7]
 80066a4:	79bb      	ldrb	r3, [r7, #6]
 80066a6:	4053      	eors	r3, r2
 80066a8:	73fb      	strb	r3, [r7, #15]

  crc = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	71bb      	strb	r3, [r7, #6]

  if (i & 1)
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <_Z8crc_mathhh+0x2e>
    crc ^= 0x5e;
 80066b8:	79bb      	ldrb	r3, [r7, #6]
 80066ba:	f083 035e 	eor.w	r3, r3, #94	; 0x5e
 80066be:	71bb      	strb	r3, [r7, #6]
  if (i & 2)
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d004      	beq.n	80066d4 <_Z8crc_mathhh+0x42>
    crc ^= 0xbc;
 80066ca:	79bb      	ldrb	r3, [r7, #6]
 80066cc:	f083 0343 	eor.w	r3, r3, #67	; 0x43
 80066d0:	43db      	mvns	r3, r3
 80066d2:	71bb      	strb	r3, [r7, #6]
  if (i & 4)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <_Z8crc_mathhh+0x54>
    crc ^= 0x61;
 80066de:	79bb      	ldrb	r3, [r7, #6]
 80066e0:	f083 0361 	eor.w	r3, r3, #97	; 0x61
 80066e4:	71bb      	strb	r3, [r7, #6]
  if (i & 8)
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <_Z8crc_mathhh+0x68>
    crc ^= 0xc2;
 80066f0:	79bb      	ldrb	r3, [r7, #6]
 80066f2:	f083 033d 	eor.w	r3, r3, #61	; 0x3d
 80066f6:	43db      	mvns	r3, r3
 80066f8:	71bb      	strb	r3, [r7, #6]
  if (i & 0x10)
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <_Z8crc_mathhh+0x7c>
    crc ^= 0x9d;
 8006704:	79bb      	ldrb	r3, [r7, #6]
 8006706:	f083 0362 	eor.w	r3, r3, #98	; 0x62
 800670a:	43db      	mvns	r3, r3
 800670c:	71bb      	strb	r3, [r7, #6]
  if (i & 0x20)
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <_Z8crc_mathhh+0x8e>
    crc ^= 0x23;
 8006718:	79bb      	ldrb	r3, [r7, #6]
 800671a:	f083 0323 	eor.w	r3, r3, #35	; 0x23
 800671e:	71bb      	strb	r3, [r7, #6]
  if (i & 0x40)
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <_Z8crc_mathhh+0xa0>
    crc ^= 0x46;
 800672a:	79bb      	ldrb	r3, [r7, #6]
 800672c:	f083 0346 	eor.w	r3, r3, #70	; 0x46
 8006730:	71bb      	strb	r3, [r7, #6]
  if (i & 0x80)
 8006732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006736:	2b00      	cmp	r3, #0
 8006738:	da04      	bge.n	8006744 <_Z8crc_mathhh+0xb2>
    crc ^= 0x8c;
 800673a:	79bb      	ldrb	r3, [r7, #6]
 800673c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8006740:	43db      	mvns	r3, r3
 8006742:	71bb      	strb	r3, [r7, #6]

  return crc;
 8006744:	79bb      	ldrb	r3, [r7, #6]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <_Z9crc8_bytehh>:
/* Calculate the CRC for an individual byte using the method you have been chosen inside "crc8_inc.h"
 * data   :=    New byte use to calculate the crc
 * crc    :=    Previus CRC
 * return :=    CRC for the [oldCRC|data]
 */
uint8_t crc8_byte(uint8_t data, uint8_t crc) {
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	4603      	mov	r3, r0
 800675a:	460a      	mov	r2, r1
 800675c:	71fb      	strb	r3, [r7, #7]
 800675e:	4613      	mov	r3, r2
 8006760:	71bb      	strb	r3, [r7, #6]
#ifdef CRC_NIBBLES
  crc = crc_nibbles(data, crc);
#endif

#ifdef CRC_MATH
  crc = crc_math(data, crc);
 8006762:	79ba      	ldrb	r2, [r7, #6]
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	4611      	mov	r1, r2
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff ff92 	bl	8006692 <_Z8crc_mathhh>
 800676e:	4603      	mov	r3, r0
 8006770:	71bb      	strb	r3, [r7, #6]
#endif

  return crc;
 8006772:	79bb      	ldrb	r3, [r7, #6]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <_Z11crc8_streamPht>:

uint8_t crc8_stream(uint8_t *data, uint16_t length) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	807b      	strh	r3, [r7, #2]
  uint8_t crc = 0xff;
 8006788:	23ff      	movs	r3, #255	; 0xff
 800678a:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < length; i++) {
 800678c:	2300      	movs	r3, #0
 800678e:	81bb      	strh	r3, [r7, #12]
 8006790:	89ba      	ldrh	r2, [r7, #12]
 8006792:	887b      	ldrh	r3, [r7, #2]
 8006794:	429a      	cmp	r2, r3
 8006796:	d20e      	bcs.n	80067b6 <_Z11crc8_streamPht+0x3a>
    crc = crc8_byte(data[i], crc);
 8006798:	89bb      	ldrh	r3, [r7, #12]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	7bfa      	ldrb	r2, [r7, #15]
 80067a2:	4611      	mov	r1, r2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff ffd4 	bl	8006752 <_Z9crc8_bytehh>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < length; i++) {
 80067ae:	89bb      	ldrh	r3, [r7, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	81bb      	strh	r3, [r7, #12]
 80067b4:	e7ec      	b.n	8006790 <_Z11crc8_streamPht+0x14>
  }
  return crc;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80067d0:	f002 f96a 	bl	8008aa8 <USBD_static_malloc>
 80067d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80067e4:	2302      	movs	r3, #2
 80067e6:	e066      	b.n	80068b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	7c1b      	ldrb	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d119      	bne.n	800682c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067fc:	2202      	movs	r2, #2
 80067fe:	2181      	movs	r1, #129	; 0x81
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f002 f82e 	bl	8008862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800680c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006810:	2202      	movs	r2, #2
 8006812:	2101      	movs	r1, #1
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f002 f824 	bl	8008862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2210      	movs	r2, #16
 8006826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800682a:	e016      	b.n	800685a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800682c:	2340      	movs	r3, #64	; 0x40
 800682e:	2202      	movs	r2, #2
 8006830:	2181      	movs	r1, #129	; 0x81
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 f815 	bl	8008862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800683e:	2340      	movs	r3, #64	; 0x40
 8006840:	2202      	movs	r2, #2
 8006842:	2101      	movs	r1, #1
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f002 f80c 	bl	8008862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2210      	movs	r2, #16
 8006856:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800685a:	2308      	movs	r3, #8
 800685c:	2203      	movs	r2, #3
 800685e:	2182      	movs	r1, #130	; 0x82
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 fffe 	bl	8008862 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	7c1b      	ldrb	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800689a:	2101      	movs	r1, #1
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 f8cf 	bl	8008a40 <USBD_LL_PrepareReceive>
 80068a2:	e007      	b.n	80068b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068aa:	2340      	movs	r3, #64	; 0x40
 80068ac:	2101      	movs	r1, #1
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f002 f8c6 	bl	8008a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	460b      	mov	r3, r1
 80068c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068ca:	2181      	movs	r1, #129	; 0x81
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 ffee 	bl	80088ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068d8:	2101      	movs	r1, #1
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 ffe7 	bl	80088ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068e8:	2182      	movs	r1, #130	; 0x82
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 ffdf 	bl	80088ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00e      	beq.n	8006928 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800691a:	4618      	mov	r0, r3
 800691c:	f002 f8d2 	bl	8008ac4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006958:	2303      	movs	r3, #3
 800695a:	e0af      	b.n	8006abc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006964:	2b00      	cmp	r3, #0
 8006966:	d03f      	beq.n	80069e8 <USBD_CDC_Setup+0xb4>
 8006968:	2b20      	cmp	r3, #32
 800696a:	f040 809f 	bne.w	8006aac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	88db      	ldrh	r3, [r3, #6]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d02e      	beq.n	80069d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b25b      	sxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	da16      	bge.n	80069ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800698c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	88d2      	ldrh	r2, [r2, #6]
 8006992:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	88db      	ldrh	r3, [r3, #6]
 8006998:	2b07      	cmp	r3, #7
 800699a:	bf28      	it	cs
 800699c:	2307      	movcs	r3, #7
 800699e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	89fa      	ldrh	r2, [r7, #14]
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 fb19 	bl	8007fde <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80069ac:	e085      	b.n	8006aba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	785a      	ldrb	r2, [r3, #1]
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	88db      	ldrh	r3, [r3, #6]
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80069c4:	6939      	ldr	r1, [r7, #16]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	88db      	ldrh	r3, [r3, #6]
 80069ca:	461a      	mov	r2, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 fb32 	bl	8008036 <USBD_CtlPrepareRx>
      break;
 80069d2:	e072      	b.n	8006aba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	7850      	ldrb	r0, [r2, #1]
 80069e0:	2200      	movs	r2, #0
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	4798      	blx	r3
      break;
 80069e6:	e068      	b.n	8006aba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b0b      	cmp	r3, #11
 80069ee:	d852      	bhi.n	8006a96 <USBD_CDC_Setup+0x162>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <USBD_CDC_Setup+0xc4>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006aa5 	.word	0x08006aa5
 8006a00:	08006a97 	.word	0x08006a97
 8006a04:	08006a97 	.word	0x08006a97
 8006a08:	08006a97 	.word	0x08006a97
 8006a0c:	08006a97 	.word	0x08006a97
 8006a10:	08006a97 	.word	0x08006a97
 8006a14:	08006a97 	.word	0x08006a97
 8006a18:	08006a97 	.word	0x08006a97
 8006a1c:	08006a97 	.word	0x08006a97
 8006a20:	08006a53 	.word	0x08006a53
 8006a24:	08006a7d 	.word	0x08006a7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d107      	bne.n	8006a44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a34:	f107 030a 	add.w	r3, r7, #10
 8006a38:	2202      	movs	r2, #2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 face 	bl	8007fde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a42:	e032      	b.n	8006aaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fa58 	bl	8007efc <USBD_CtlError>
            ret = USBD_FAIL;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a50:	e02b      	b.n	8006aaa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d107      	bne.n	8006a6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a5e:	f107 030d 	add.w	r3, r7, #13
 8006a62:	2201      	movs	r2, #1
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fab9 	bl	8007fde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a6c:	e01d      	b.n	8006aaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fa43 	bl	8007efc <USBD_CtlError>
            ret = USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7a:	e016      	b.n	8006aaa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d00f      	beq.n	8006aa8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fa36 	bl	8007efc <USBD_CtlError>
            ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a94:	e008      	b.n	8006aa8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fa2f 	bl	8007efc <USBD_CtlError>
          ret = USBD_FAIL;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa2:	e002      	b.n	8006aaa <USBD_CDC_Setup+0x176>
          break;
 8006aa4:	bf00      	nop
 8006aa6:	e008      	b.n	8006aba <USBD_CDC_Setup+0x186>
          break;
 8006aa8:	bf00      	nop
      }
      break;
 8006aaa:	e006      	b.n	8006aba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fa24 	bl	8007efc <USBD_CtlError>
      ret = USBD_FAIL;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ad6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e04f      	b.n	8006b86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	3318      	adds	r3, #24
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d029      	beq.n	8006b58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b04:	78fa      	ldrb	r2, [r7, #3]
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	3318      	adds	r3, #24
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	78f9      	ldrb	r1, [r7, #3]
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	1a5b      	subs	r3, r3, r1
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4403      	add	r3, r0
 8006b24:	3344      	adds	r3, #68	; 0x44
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b2c:	fb03 f301 	mul.w	r3, r3, r1
 8006b30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d110      	bne.n	8006b58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	3318      	adds	r3, #24
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b4a:	78f9      	ldrb	r1, [r7, #3]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2200      	movs	r2, #0
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 ff54 	bl	80089fe <USBD_LL_Transmit>
 8006b56:	e015      	b.n	8006b84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ba0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e015      	b.n	8006bdc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 ff64 	bl	8008a82 <USBD_LL_GetRxDataSize>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e01b      	b.n	8006c36 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d015      	beq.n	8006c34 <USBD_CDC_EP0_RxReady+0x50>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c0e:	2bff      	cmp	r3, #255	; 0xff
 8006c10:	d010      	beq.n	8006c34 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c28:	b292      	uxth	r2, r2
 8006c2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	22ff      	movs	r2, #255	; 0xff
 8006c30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2243      	movs	r2, #67	; 0x43
 8006c4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006c4e:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	20000094 	.word	0x20000094

08006c60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2243      	movs	r2, #67	; 0x43
 8006c6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006c6e:	4b03      	ldr	r3, [pc, #12]	; (8006c7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20000050 	.word	0x20000050

08006c80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2243      	movs	r2, #67	; 0x43
 8006c8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006c8e:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	200000d8 	.word	0x200000d8

08006ca0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	220a      	movs	r2, #10
 8006cac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	2000000c 	.word	0x2000000c

08006cc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e004      	b.n	8006cde <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b087      	sub	sp, #28
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cfc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e008      	b.n	8006d1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e004      	b.n	8006d4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e01a      	b.n	8006db0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d114      	bne.n	8006dae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006da2:	2181      	movs	r1, #129	; 0x81
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fe2a 	bl	80089fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e016      	b.n	8006e04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7c1b      	ldrb	r3, [r3, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006de8:	2101      	movs	r1, #1
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 fe28 	bl	8008a40 <USBD_LL_PrepareReceive>
 8006df0:	e007      	b.n	8006e02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006df8:	2340      	movs	r3, #64	; 0x40
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fe1f 	bl	8008a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e01f      	b.n	8006e64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	79fa      	ldrb	r2, [r7, #7]
 8006e56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f001 fc9b 	bl	8008794 <USBD_LL_Init>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e016      	b.n	8006eb2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00b      	beq.n	8006eb0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	f107 020e 	add.w	r2, r7, #14
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fcb2 	bl	800882c <USBD_LL_Start>
 8006ec8:	4603      	mov	r3, r0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d007      	beq.n	8006f46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	4611      	mov	r1, r2
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
  }

  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 ff90 	bl	8007e88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d01a      	beq.n	8006fc2 <USBD_LL_SetupStage+0x72>
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d822      	bhi.n	8006fd6 <USBD_LL_SetupStage+0x86>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <USBD_LL_SetupStage+0x4a>
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d00a      	beq.n	8006fae <USBD_LL_SetupStage+0x5e>
 8006f98:	e01d      	b.n	8006fd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa62 	bl	800746c <USBD_StdDevReq>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]
      break;
 8006fac:	e020      	b.n	8006ff0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fac6 	bl	8007548 <USBD_StdItfReq>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc0:	e016      	b.n	8006ff0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fb05 	bl	80075da <USBD_StdEPReq>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd4:	e00c      	b.n	8006ff0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fc81 	bl	80088ec <USBD_LL_StallEP>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73fb      	strb	r3, [r7, #15]
      break;
 8006fee:	bf00      	nop
  }

  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	460b      	mov	r3, r1
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d138      	bne.n	8007080 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007014:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800701c:	2b03      	cmp	r3, #3
 800701e:	d14a      	bne.n	80070b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	429a      	cmp	r2, r3
 800702a:	d913      	bls.n	8007054 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	1ad2      	subs	r2, r2, r3
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4293      	cmp	r3, r2
 8007044:	bf28      	it	cs
 8007046:	4613      	movcs	r3, r2
 8007048:	461a      	mov	r2, r3
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f001 f80f 	bl	8008070 <USBD_CtlContinueRx>
 8007052:	e030      	b.n	80070b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d10b      	bne.n	8007078 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f001 f80a 	bl	8008092 <USBD_CtlSendStatus>
 800707e:	e01a      	b.n	80070b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b03      	cmp	r3, #3
 800708a:	d114      	bne.n	80070b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00e      	beq.n	80070b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	7afa      	ldrb	r2, [r7, #11]
 80070a2:	4611      	mov	r1, r2
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	4798      	blx	r3
 80070a8:	4603      	mov	r3, r0
 80070aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	e000      	b.n	80070b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	460b      	mov	r3, r1
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070ce:	7afb      	ldrb	r3, [r7, #11]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d16b      	bne.n	80071ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3314      	adds	r3, #20
 80070d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d156      	bne.n	8007192 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d914      	bls.n	800711a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	461a      	mov	r2, r3
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 ff84 	bl	8008014 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f001 fc94 	bl	8008a40 <USBD_LL_PrepareReceive>
 8007118:	e03b      	b.n	8007192 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d11c      	bne.n	8007160 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800712e:	429a      	cmp	r2, r3
 8007130:	d316      	bcc.n	8007160 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800713c:	429a      	cmp	r2, r3
 800713e:	d20f      	bcs.n	8007160 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007140:	2200      	movs	r2, #0
 8007142:	2100      	movs	r1, #0
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 ff65 	bl	8008014 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007152:	2300      	movs	r3, #0
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f001 fc71 	bl	8008a40 <USBD_LL_PrepareReceive>
 800715e:	e018      	b.n	8007192 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b03      	cmp	r3, #3
 800716a:	d10b      	bne.n	8007184 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007184:	2180      	movs	r1, #128	; 0x80
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f001 fbb0 	bl	80088ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 ff93 	bl	80080b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007198:	2b01      	cmp	r3, #1
 800719a:	d122      	bne.n	80071e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff fe98 	bl	8006ed2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071aa:	e01a      	b.n	80071e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d114      	bne.n	80071e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	7afa      	ldrb	r2, [r7, #11]
 80071ce:	4611      	mov	r1, r2
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	4798      	blx	r3
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	e000      	b.n	80071e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e02f      	b.n	8007280 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00f      	beq.n	800724a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6852      	ldr	r2, [r2, #4]
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	4611      	mov	r1, r2
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800724a:	2340      	movs	r3, #64	; 0x40
 800724c:	2200      	movs	r2, #0
 800724e:	2100      	movs	r1, #0
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fb06 	bl	8008862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2240      	movs	r2, #64	; 0x40
 8007262:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007266:	2340      	movs	r3, #64	; 0x40
 8007268:	2200      	movs	r2, #0
 800726a:	2180      	movs	r1, #128	; 0x80
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 faf8 	bl	8008862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2240      	movs	r2, #64	; 0x40
 800727c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2204      	movs	r2, #4
 80072c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d106      	bne.n	80072f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007316:	2303      	movs	r3, #3
 8007318:	e012      	b.n	8007340 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b03      	cmp	r3, #3
 8007324:	d10b      	bne.n	800733e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800735e:	2303      	movs	r3, #3
 8007360:	e014      	b.n	800738c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b03      	cmp	r3, #3
 800736c:	d10d      	bne.n	800738a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	4611      	mov	r1, r2
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e014      	b.n	80073d8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d10d      	bne.n	80073d6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	4611      	mov	r1, r2
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6852      	ldr	r2, [r2, #4]
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	4611      	mov	r1, r2
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
  }

  return USBD_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800742e:	b480      	push	{r7}
 8007430:	b087      	sub	sp, #28
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	3301      	adds	r3, #1
 8007444:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800744c:	8a3b      	ldrh	r3, [r7, #16]
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	b21a      	sxth	r2, r3
 8007452:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007456:	4313      	orrs	r3, r2
 8007458:	b21b      	sxth	r3, r3
 800745a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800745c:	89fb      	ldrh	r3, [r7, #14]
}
 800745e:	4618      	mov	r0, r3
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d005      	beq.n	8007492 <USBD_StdDevReq+0x26>
 8007486:	2b40      	cmp	r3, #64	; 0x40
 8007488:	d853      	bhi.n	8007532 <USBD_StdDevReq+0xc6>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00b      	beq.n	80074a6 <USBD_StdDevReq+0x3a>
 800748e:	2b20      	cmp	r3, #32
 8007490:	d14f      	bne.n	8007532 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]
      break;
 80074a4:	e04a      	b.n	800753c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	785b      	ldrb	r3, [r3, #1]
 80074aa:	2b09      	cmp	r3, #9
 80074ac:	d83b      	bhi.n	8007526 <USBD_StdDevReq+0xba>
 80074ae:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <USBD_StdDevReq+0x48>)
 80074b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b4:	08007509 	.word	0x08007509
 80074b8:	0800751d 	.word	0x0800751d
 80074bc:	08007527 	.word	0x08007527
 80074c0:	08007513 	.word	0x08007513
 80074c4:	08007527 	.word	0x08007527
 80074c8:	080074e7 	.word	0x080074e7
 80074cc:	080074dd 	.word	0x080074dd
 80074d0:	08007527 	.word	0x08007527
 80074d4:	080074ff 	.word	0x080074ff
 80074d8:	080074f1 	.word	0x080074f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f9de 	bl	80078a0 <USBD_GetDescriptor>
          break;
 80074e4:	e024      	b.n	8007530 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fb43 	bl	8007b74 <USBD_SetAddress>
          break;
 80074ee:	e01f      	b.n	8007530 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fb82 	bl	8007bfc <USBD_SetConfig>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
          break;
 80074fc:	e018      	b.n	8007530 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fc21 	bl	8007d48 <USBD_GetConfig>
          break;
 8007506:	e013      	b.n	8007530 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fc52 	bl	8007db4 <USBD_GetStatus>
          break;
 8007510:	e00e      	b.n	8007530 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fc81 	bl	8007e1c <USBD_SetFeature>
          break;
 800751a:	e009      	b.n	8007530 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fc90 	bl	8007e44 <USBD_ClrFeature>
          break;
 8007524:	e004      	b.n	8007530 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fce7 	bl	8007efc <USBD_CtlError>
          break;
 800752e:	bf00      	nop
      }
      break;
 8007530:	e004      	b.n	800753c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fce1 	bl	8007efc <USBD_CtlError>
      break;
 800753a:	bf00      	nop
  }

  return ret;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop

08007548 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d005      	beq.n	800756e <USBD_StdItfReq+0x26>
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d82f      	bhi.n	80075c6 <USBD_StdItfReq+0x7e>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <USBD_StdItfReq+0x26>
 800756a:	2b20      	cmp	r3, #32
 800756c:	d12b      	bne.n	80075c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007574:	b2db      	uxtb	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	2b02      	cmp	r3, #2
 800757a:	d81d      	bhi.n	80075b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	889b      	ldrh	r3, [r3, #4]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	d813      	bhi.n	80075ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	88db      	ldrh	r3, [r3, #6]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d110      	bne.n	80075c2 <USBD_StdItfReq+0x7a>
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10d      	bne.n	80075c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fd73 	bl	8008092 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ac:	e009      	b.n	80075c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fca3 	bl	8007efc <USBD_CtlError>
          break;
 80075b6:	e004      	b.n	80075c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fc9e 	bl	8007efc <USBD_CtlError>
          break;
 80075c0:	e000      	b.n	80075c4 <USBD_StdItfReq+0x7c>
          break;
 80075c2:	bf00      	nop
      }
      break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc97 	bl	8007efc <USBD_CtlError>
      break;
 80075ce:	bf00      	nop
  }

  return ret;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	889b      	ldrh	r3, [r3, #4]
 80075ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d007      	beq.n	800760a <USBD_StdEPReq+0x30>
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	f200 8145 	bhi.w	800788a <USBD_StdEPReq+0x2b0>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00c      	beq.n	800761e <USBD_StdEPReq+0x44>
 8007604:	2b20      	cmp	r3, #32
 8007606:	f040 8140 	bne.w	800788a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	4798      	blx	r3
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
      break;
 800761c:	e13a      	b.n	8007894 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	2b03      	cmp	r3, #3
 8007624:	d007      	beq.n	8007636 <USBD_StdEPReq+0x5c>
 8007626:	2b03      	cmp	r3, #3
 8007628:	f300 8129 	bgt.w	800787e <USBD_StdEPReq+0x2a4>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d07f      	beq.n	8007730 <USBD_StdEPReq+0x156>
 8007630:	2b01      	cmp	r3, #1
 8007632:	d03c      	beq.n	80076ae <USBD_StdEPReq+0xd4>
 8007634:	e123      	b.n	800787e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d002      	beq.n	8007648 <USBD_StdEPReq+0x6e>
 8007642:	2b03      	cmp	r3, #3
 8007644:	d016      	beq.n	8007674 <USBD_StdEPReq+0x9a>
 8007646:	e02c      	b.n	80076a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <USBD_StdEPReq+0x90>
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	2b80      	cmp	r3, #128	; 0x80
 8007652:	d00a      	beq.n	800766a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f947 	bl	80088ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800765e:	2180      	movs	r1, #128	; 0x80
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 f943 	bl	80088ec <USBD_LL_StallEP>
 8007666:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007668:	e020      	b.n	80076ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fc45 	bl	8007efc <USBD_CtlError>
              break;
 8007672:	e01b      	b.n	80076ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	885b      	ldrh	r3, [r3, #2]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10e      	bne.n	800769a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <USBD_StdEPReq+0xc0>
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d008      	beq.n	800769a <USBD_StdEPReq+0xc0>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	88db      	ldrh	r3, [r3, #6]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 f929 	bl	80088ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fcf9 	bl	8008092 <USBD_CtlSendStatus>

              break;
 80076a0:	e004      	b.n	80076ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fc29 	bl	8007efc <USBD_CtlError>
              break;
 80076aa:	bf00      	nop
          }
          break;
 80076ac:	e0ec      	b.n	8007888 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d002      	beq.n	80076c0 <USBD_StdEPReq+0xe6>
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d016      	beq.n	80076ec <USBD_StdEPReq+0x112>
 80076be:	e030      	b.n	8007722 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00d      	beq.n	80076e2 <USBD_StdEPReq+0x108>
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b80      	cmp	r3, #128	; 0x80
 80076ca:	d00a      	beq.n	80076e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f90b 	bl	80088ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076d6:	2180      	movs	r1, #128	; 0x80
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 f907 	bl	80088ec <USBD_LL_StallEP>
 80076de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076e0:	e025      	b.n	800772e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fc09 	bl	8007efc <USBD_CtlError>
              break;
 80076ea:	e020      	b.n	800772e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	885b      	ldrh	r3, [r3, #2]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d11b      	bne.n	800772c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d004      	beq.n	8007708 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 f911 	bl	800892a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fcc2 	bl	8008092 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4798      	blx	r3
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007720:	e004      	b.n	800772c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fbe9 	bl	8007efc <USBD_CtlError>
              break;
 800772a:	e000      	b.n	800772e <USBD_StdEPReq+0x154>
              break;
 800772c:	bf00      	nop
          }
          break;
 800772e:	e0ab      	b.n	8007888 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d002      	beq.n	8007742 <USBD_StdEPReq+0x168>
 800773c:	2b03      	cmp	r3, #3
 800773e:	d032      	beq.n	80077a6 <USBD_StdEPReq+0x1cc>
 8007740:	e097      	b.n	8007872 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <USBD_StdEPReq+0x17e>
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	2b80      	cmp	r3, #128	; 0x80
 800774c:	d004      	beq.n	8007758 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fbd3 	bl	8007efc <USBD_CtlError>
                break;
 8007756:	e091      	b.n	800787c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0b      	bge.n	8007778 <USBD_StdEPReq+0x19e>
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	3310      	adds	r3, #16
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	3304      	adds	r3, #4
 8007776:	e00b      	b.n	8007790 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	3304      	adds	r3, #4
 8007790:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2202      	movs	r2, #2
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fc1d 	bl	8007fde <USBD_CtlSendData>
              break;
 80077a4:	e06a      	b.n	800787c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	da11      	bge.n	80077d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	f003 020f 	and.w	r2, r3, #15
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	440b      	add	r3, r1
 80077c0:	3324      	adds	r3, #36	; 0x24
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d117      	bne.n	80077f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fb96 	bl	8007efc <USBD_CtlError>
                  break;
 80077d0:	e054      	b.n	800787c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	f003 020f 	and.w	r2, r3, #15
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb83 	bl	8007efc <USBD_CtlError>
                  break;
 80077f6:	e041      	b.n	800787c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	da0b      	bge.n	8007818 <USBD_StdEPReq+0x23e>
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	3310      	adds	r3, #16
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	3304      	adds	r3, #4
 8007816:	e00b      	b.n	8007830 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	3304      	adds	r3, #4
 8007830:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <USBD_StdEPReq+0x264>
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d103      	bne.n	8007846 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e00e      	b.n	8007864 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 f88c 	bl	8008968 <USBD_LL_IsStallEP>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2201      	movs	r2, #1
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e002      	b.n	8007864 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2202      	movs	r2, #2
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fbb7 	bl	8007fde <USBD_CtlSendData>
              break;
 8007870:	e004      	b.n	800787c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fb41 	bl	8007efc <USBD_CtlError>
              break;
 800787a:	bf00      	nop
          }
          break;
 800787c:	e004      	b.n	8007888 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fb3b 	bl	8007efc <USBD_CtlError>
          break;
 8007886:	bf00      	nop
      }
      break;
 8007888:	e004      	b.n	8007894 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fb35 	bl	8007efc <USBD_CtlError>
      break;
 8007892:	bf00      	nop
  }

  return ret;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	885b      	ldrh	r3, [r3, #2]
 80078ba:	0a1b      	lsrs	r3, r3, #8
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	2b06      	cmp	r3, #6
 80078c2:	f200 8128 	bhi.w	8007b16 <USBD_GetDescriptor+0x276>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <USBD_GetDescriptor+0x2c>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078e9 	.word	0x080078e9
 80078d0:	08007901 	.word	0x08007901
 80078d4:	08007941 	.word	0x08007941
 80078d8:	08007b17 	.word	0x08007b17
 80078dc:	08007b17 	.word	0x08007b17
 80078e0:	08007ab7 	.word	0x08007ab7
 80078e4:	08007ae3 	.word	0x08007ae3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7c12      	ldrb	r2, [r2, #16]
 80078f4:	f107 0108 	add.w	r1, r7, #8
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	60f8      	str	r0, [r7, #12]
      break;
 80078fe:	e112      	b.n	8007b26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	7c1b      	ldrb	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10d      	bne.n	8007924 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	f107 0208 	add.w	r2, r7, #8
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3301      	adds	r3, #1
 800791e:	2202      	movs	r2, #2
 8007920:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007922:	e100      	b.n	8007b26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	f107 0208 	add.w	r2, r7, #8
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	2202      	movs	r2, #2
 800793c:	701a      	strb	r2, [r3, #0]
      break;
 800793e:	e0f2      	b.n	8007b26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	885b      	ldrh	r3, [r3, #2]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b05      	cmp	r3, #5
 8007948:	f200 80ac 	bhi.w	8007aa4 <USBD_GetDescriptor+0x204>
 800794c:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <USBD_GetDescriptor+0xb4>)
 800794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007952:	bf00      	nop
 8007954:	0800796d 	.word	0x0800796d
 8007958:	080079a1 	.word	0x080079a1
 800795c:	080079d5 	.word	0x080079d5
 8007960:	08007a09 	.word	0x08007a09
 8007964:	08007a3d 	.word	0x08007a3d
 8007968:	08007a71 	.word	0x08007a71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7c12      	ldrb	r2, [r2, #16]
 8007984:	f107 0108 	add.w	r1, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798e:	e091      	b.n	8007ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fab2 	bl	8007efc <USBD_CtlError>
            err++;
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	3301      	adds	r3, #1
 800799c:	72fb      	strb	r3, [r7, #11]
          break;
 800799e:	e089      	b.n	8007ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c2:	e077      	b.n	8007ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa98 	bl	8007efc <USBD_CtlError>
            err++;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	3301      	adds	r3, #1
 80079d0:	72fb      	strb	r3, [r7, #11]
          break;
 80079d2:	e06f      	b.n	8007ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7c12      	ldrb	r2, [r2, #16]
 80079ec:	f107 0108 	add.w	r1, r7, #8
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f6:	e05d      	b.n	8007ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa7e 	bl	8007efc <USBD_CtlError>
            err++;
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	3301      	adds	r3, #1
 8007a04:	72fb      	strb	r3, [r7, #11]
          break;
 8007a06:	e055      	b.n	8007ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	7c12      	ldrb	r2, [r2, #16]
 8007a20:	f107 0108 	add.w	r1, r7, #8
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
 8007a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2a:	e043      	b.n	8007ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa64 	bl	8007efc <USBD_CtlError>
            err++;
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	3301      	adds	r3, #1
 8007a38:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3a:	e03b      	b.n	8007ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a5e:	e029      	b.n	8007ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa4a 	bl	8007efc <USBD_CtlError>
            err++;
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a6e:	e021      	b.n	8007ab4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	7c12      	ldrb	r2, [r2, #16]
 8007a88:	f107 0108 	add.w	r1, r7, #8
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
 8007a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a92:	e00f      	b.n	8007ab4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa30 	bl	8007efc <USBD_CtlError>
            err++;
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa2:	e007      	b.n	8007ab4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fa28 	bl	8007efc <USBD_CtlError>
          err++;
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007ab2:	bf00      	nop
      }
      break;
 8007ab4:	e037      	b.n	8007b26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7c1b      	ldrb	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac6:	f107 0208 	add.w	r2, r7, #8
 8007aca:	4610      	mov	r0, r2
 8007acc:	4798      	blx	r3
 8007ace:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ad0:	e029      	b.n	8007b26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fa11 	bl	8007efc <USBD_CtlError>
        err++;
 8007ada:	7afb      	ldrb	r3, [r7, #11]
 8007adc:	3301      	adds	r3, #1
 8007ade:	72fb      	strb	r3, [r7, #11]
      break;
 8007ae0:	e021      	b.n	8007b26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	7c1b      	ldrb	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10d      	bne.n	8007b06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	f107 0208 	add.w	r2, r7, #8
 8007af6:	4610      	mov	r0, r2
 8007af8:	4798      	blx	r3
 8007afa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	2207      	movs	r2, #7
 8007b02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b04:	e00f      	b.n	8007b26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f9f7 	bl	8007efc <USBD_CtlError>
        err++;
 8007b0e:	7afb      	ldrb	r3, [r7, #11]
 8007b10:	3301      	adds	r3, #1
 8007b12:	72fb      	strb	r3, [r7, #11]
      break;
 8007b14:	e007      	b.n	8007b26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9ef 	bl	8007efc <USBD_CtlError>
      err++;
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
 8007b20:	3301      	adds	r3, #1
 8007b22:	72fb      	strb	r3, [r7, #11]
      break;
 8007b24:	bf00      	nop
  }

  if (err != 0U)
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11e      	bne.n	8007b6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	88db      	ldrh	r3, [r3, #6]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d016      	beq.n	8007b62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b34:	893b      	ldrh	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00e      	beq.n	8007b58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	88da      	ldrh	r2, [r3, #6]
 8007b3e:	893b      	ldrh	r3, [r7, #8]
 8007b40:	4293      	cmp	r3, r2
 8007b42:	bf28      	it	cs
 8007b44:	4613      	movcs	r3, r2
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b4a:	893b      	ldrh	r3, [r7, #8]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	68f9      	ldr	r1, [r7, #12]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fa44 	bl	8007fde <USBD_CtlSendData>
 8007b56:	e009      	b.n	8007b6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f9ce 	bl	8007efc <USBD_CtlError>
 8007b60:	e004      	b.n	8007b6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa95 	bl	8008092 <USBD_CtlSendStatus>
 8007b68:	e000      	b.n	8007b6c <USBD_GetDescriptor+0x2cc>
    return;
 8007b6a:	bf00      	nop
  }
}
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop

08007b74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	889b      	ldrh	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d131      	bne.n	8007bea <USBD_SetAddress+0x76>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	88db      	ldrh	r3, [r3, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d12d      	bne.n	8007bea <USBD_SetAddress+0x76>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	885b      	ldrh	r3, [r3, #2]
 8007b92:	2b7f      	cmp	r3, #127	; 0x7f
 8007b94:	d829      	bhi.n	8007bea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d104      	bne.n	8007bb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f9a3 	bl	8007efc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	e01d      	b.n	8007bf4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7bfa      	ldrb	r2, [r7, #15]
 8007bbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fefb 	bl	80089c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa61 	bl	8008092 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bde:	e009      	b.n	8007bf4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be8:	e004      	b.n	8007bf4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f985 	bl	8007efc <USBD_CtlError>
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	885b      	ldrh	r3, [r3, #2]
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	4b4c      	ldr	r3, [pc, #304]	; (8007d44 <USBD_SetConfig+0x148>)
 8007c12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c14:	4b4b      	ldr	r3, [pc, #300]	; (8007d44 <USBD_SetConfig+0x148>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d905      	bls.n	8007c28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f96c 	bl	8007efc <USBD_CtlError>
    return USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e088      	b.n	8007d3a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d002      	beq.n	8007c3a <USBD_SetConfig+0x3e>
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d025      	beq.n	8007c84 <USBD_SetConfig+0x88>
 8007c38:	e071      	b.n	8007d1e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c3a:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <USBD_SetConfig+0x148>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d01c      	beq.n	8007c7c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007c42:	4b40      	ldr	r3, [pc, #256]	; (8007d44 <USBD_SetConfig+0x148>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c4c:	4b3d      	ldr	r3, [pc, #244]	; (8007d44 <USBD_SetConfig+0x148>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff f948 	bl	8006ee8 <USBD_SetClassConfig>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d004      	beq.n	8007c6c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f949 	bl	8007efc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c6a:	e065      	b.n	8007d38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fa10 	bl	8008092 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2203      	movs	r2, #3
 8007c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c7a:	e05d      	b.n	8007d38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fa08 	bl	8008092 <USBD_CtlSendStatus>
      break;
 8007c82:	e059      	b.n	8007d38 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c84:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <USBD_SetConfig+0x148>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d112      	bne.n	8007cb2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c94:	4b2b      	ldr	r3, [pc, #172]	; (8007d44 <USBD_SetConfig+0x148>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c9e:	4b29      	ldr	r3, [pc, #164]	; (8007d44 <USBD_SetConfig+0x148>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff f93b 	bl	8006f20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9f1 	bl	8008092 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cb0:	e042      	b.n	8007d38 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <USBD_SetConfig+0x148>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d02a      	beq.n	8007d16 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff f929 	bl	8006f20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007cce:	4b1d      	ldr	r3, [pc, #116]	; (8007d44 <USBD_SetConfig+0x148>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <USBD_SetConfig+0x148>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff f902 	bl	8006ee8 <USBD_SetClassConfig>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00f      	beq.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f903 	bl	8007efc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff f90e 	bl	8006f20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d0c:	e014      	b.n	8007d38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9bf 	bl	8008092 <USBD_CtlSendStatus>
      break;
 8007d14:	e010      	b.n	8007d38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f9bb 	bl	8008092 <USBD_CtlSendStatus>
      break;
 8007d1c:	e00c      	b.n	8007d38 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f8eb 	bl	8007efc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d26:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <USBD_SetConfig+0x148>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff f8f7 	bl	8006f20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d32:	2303      	movs	r3, #3
 8007d34:	73fb      	strb	r3, [r7, #15]
      break;
 8007d36:	bf00      	nop
  }

  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000668 	.word	0x20000668

08007d48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	88db      	ldrh	r3, [r3, #6]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d004      	beq.n	8007d64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8cd 	bl	8007efc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d62:	e023      	b.n	8007dac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	dc02      	bgt.n	8007d76 <USBD_GetConfig+0x2e>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dc03      	bgt.n	8007d7c <USBD_GetConfig+0x34>
 8007d74:	e015      	b.n	8007da2 <USBD_GetConfig+0x5a>
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d00b      	beq.n	8007d92 <USBD_GetConfig+0x4a>
 8007d7a:	e012      	b.n	8007da2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3308      	adds	r3, #8
 8007d86:	2201      	movs	r2, #1
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f927 	bl	8007fde <USBD_CtlSendData>
        break;
 8007d90:	e00c      	b.n	8007dac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3304      	adds	r3, #4
 8007d96:	2201      	movs	r2, #1
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f91f 	bl	8007fde <USBD_CtlSendData>
        break;
 8007da0:	e004      	b.n	8007dac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f8a9 	bl	8007efc <USBD_CtlError>
        break;
 8007daa:	bf00      	nop
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d81e      	bhi.n	8007e0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	88db      	ldrh	r3, [r3, #6]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d004      	beq.n	8007dde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f890 	bl	8007efc <USBD_CtlError>
        break;
 8007ddc:	e01a      	b.n	8007e14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f043 0202 	orr.w	r2, r3, #2
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	2202      	movs	r2, #2
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f8eb 	bl	8007fde <USBD_CtlSendData>
      break;
 8007e08:	e004      	b.n	8007e14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f875 	bl	8007efc <USBD_CtlError>
      break;
 8007e12:	bf00      	nop
  }
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	885b      	ldrh	r3, [r3, #2]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d106      	bne.n	8007e3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f92b 	bl	8008092 <USBD_CtlSendStatus>
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	3b01      	subs	r3, #1
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d80b      	bhi.n	8007e74 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	885b      	ldrh	r3, [r3, #2]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d10c      	bne.n	8007e7e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f910 	bl	8008092 <USBD_CtlSendStatus>
      }
      break;
 8007e72:	e004      	b.n	8007e7e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f840 	bl	8007efc <USBD_CtlError>
      break;
 8007e7c:	e000      	b.n	8007e80 <USBD_ClrFeature+0x3c>
      break;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	781a      	ldrb	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff fabb 	bl	800742e <SWAPBYTE>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff faae 	bl	800742e <SWAPBYTE>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3301      	adds	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7ff faa1 	bl	800742e <SWAPBYTE>
 8007eec:	4603      	mov	r3, r0
 8007eee:	461a      	mov	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	80da      	strh	r2, [r3, #6]
}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f06:	2180      	movs	r1, #128	; 0x80
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fcef 	bl	80088ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fceb 	bl	80088ec <USBD_LL_StallEP>
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d036      	beq.n	8007fa2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f38:	6938      	ldr	r0, [r7, #16]
 8007f3a:	f000 f836 	bl	8007faa <USBD_GetLen>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	3301      	adds	r3, #1
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	4413      	add	r3, r2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	7812      	ldrb	r2, [r2, #0]
 8007f56:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	4413      	add	r3, r2
 8007f64:	2203      	movs	r2, #3
 8007f66:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f6e:	e013      	b.n	8007f98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	4413      	add	r3, r2
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	7812      	ldrb	r2, [r2, #0]
 8007f7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	613b      	str	r3, [r7, #16]
    idx++;
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	3301      	adds	r3, #1
 8007f86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	3301      	adds	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e7      	bne.n	8007f70 <USBD_GetString+0x52>
 8007fa0:	e000      	b.n	8007fa4 <USBD_GetString+0x86>
    return;
 8007fa2:	bf00      	nop
  }
}
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007fba:	e005      	b.n	8007fc8 <USBD_GetLen+0x1e>
  {
    len++;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1f5      	bne.n	8007fbc <USBD_GetLen+0x12>
  }

  return len;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	2100      	movs	r1, #0
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 fcfa 	bl	80089fe <USBD_LL_Transmit>

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	2100      	movs	r1, #0
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fce9 	bl	80089fe <USBD_LL_Transmit>

  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2203      	movs	r2, #3
 8008046:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	2100      	movs	r1, #0
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 fced 	bl	8008a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	2100      	movs	r1, #0
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fcdc 	bl	8008a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2204      	movs	r2, #4
 800809e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080a2:	2300      	movs	r3, #0
 80080a4:	2200      	movs	r2, #0
 80080a6:	2100      	movs	r1, #0
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fca8 	bl	80089fe <USBD_LL_Transmit>

  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2205      	movs	r2, #5
 80080c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080c8:	2300      	movs	r3, #0
 80080ca:	2200      	movs	r2, #0
 80080cc:	2100      	movs	r1, #0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fcb6 	bl	8008a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080e4:	2200      	movs	r2, #0
 80080e6:	4912      	ldr	r1, [pc, #72]	; (8008130 <MX_USB_DEVICE_Init+0x50>)
 80080e8:	4812      	ldr	r0, [pc, #72]	; (8008134 <MX_USB_DEVICE_Init+0x54>)
 80080ea:	f7fe fe8f 	bl	8006e0c <USBD_Init>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080f4:	f7f8 fc4a 	bl	800098c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080f8:	490f      	ldr	r1, [pc, #60]	; (8008138 <MX_USB_DEVICE_Init+0x58>)
 80080fa:	480e      	ldr	r0, [pc, #56]	; (8008134 <MX_USB_DEVICE_Init+0x54>)
 80080fc:	f7fe feb6 	bl	8006e6c <USBD_RegisterClass>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008106:	f7f8 fc41 	bl	800098c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800810a:	490c      	ldr	r1, [pc, #48]	; (800813c <MX_USB_DEVICE_Init+0x5c>)
 800810c:	4809      	ldr	r0, [pc, #36]	; (8008134 <MX_USB_DEVICE_Init+0x54>)
 800810e:	f7fe fdd7 	bl	8006cc0 <USBD_CDC_RegisterInterface>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008118:	f7f8 fc38 	bl	800098c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800811c:	4805      	ldr	r0, [pc, #20]	; (8008134 <MX_USB_DEVICE_Init+0x54>)
 800811e:	f7fe fecc 	bl	8006eba <USBD_Start>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008128:	f7f8 fc30 	bl	800098c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800812c:	bf00      	nop
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000130 	.word	0x20000130
 8008134:	20000890 	.word	0x20000890
 8008138:	20000018 	.word	0x20000018
 800813c:	2000011c 	.word	0x2000011c

08008140 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008144:	2200      	movs	r2, #0
 8008146:	4905      	ldr	r1, [pc, #20]	; (800815c <CDC_Init_FS+0x1c>)
 8008148:	4805      	ldr	r0, [pc, #20]	; (8008160 <CDC_Init_FS+0x20>)
 800814a:	f7fe fdce 	bl	8006cea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800814e:	4905      	ldr	r1, [pc, #20]	; (8008164 <CDC_Init_FS+0x24>)
 8008150:	4803      	ldr	r0, [pc, #12]	; (8008160 <CDC_Init_FS+0x20>)
 8008152:	f7fe fde8 	bl	8006d26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008156:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008158:	4618      	mov	r0, r3
 800815a:	bd80      	pop	{r7, pc}
 800815c:	20001360 	.word	0x20001360
 8008160:	20000890 	.word	0x20000890
 8008164:	20000b60 	.word	0x20000b60

08008168 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800816c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800816e:	4618      	mov	r0, r3
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	6039      	str	r1, [r7, #0]
 8008182:	71fb      	strb	r3, [r7, #7]
 8008184:	4613      	mov	r3, r2
 8008186:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	2b23      	cmp	r3, #35	; 0x23
 800818c:	d84a      	bhi.n	8008224 <CDC_Control_FS+0xac>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <CDC_Control_FS+0x1c>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	08008225 	.word	0x08008225
 8008198:	08008225 	.word	0x08008225
 800819c:	08008225 	.word	0x08008225
 80081a0:	08008225 	.word	0x08008225
 80081a4:	08008225 	.word	0x08008225
 80081a8:	08008225 	.word	0x08008225
 80081ac:	08008225 	.word	0x08008225
 80081b0:	08008225 	.word	0x08008225
 80081b4:	08008225 	.word	0x08008225
 80081b8:	08008225 	.word	0x08008225
 80081bc:	08008225 	.word	0x08008225
 80081c0:	08008225 	.word	0x08008225
 80081c4:	08008225 	.word	0x08008225
 80081c8:	08008225 	.word	0x08008225
 80081cc:	08008225 	.word	0x08008225
 80081d0:	08008225 	.word	0x08008225
 80081d4:	08008225 	.word	0x08008225
 80081d8:	08008225 	.word	0x08008225
 80081dc:	08008225 	.word	0x08008225
 80081e0:	08008225 	.word	0x08008225
 80081e4:	08008225 	.word	0x08008225
 80081e8:	08008225 	.word	0x08008225
 80081ec:	08008225 	.word	0x08008225
 80081f0:	08008225 	.word	0x08008225
 80081f4:	08008225 	.word	0x08008225
 80081f8:	08008225 	.word	0x08008225
 80081fc:	08008225 	.word	0x08008225
 8008200:	08008225 	.word	0x08008225
 8008204:	08008225 	.word	0x08008225
 8008208:	08008225 	.word	0x08008225
 800820c:	08008225 	.word	0x08008225
 8008210:	08008225 	.word	0x08008225
 8008214:	08008225 	.word	0x08008225
 8008218:	08008225 	.word	0x08008225
 800821c:	08008225 	.word	0x08008225
 8008220:	08008225 	.word	0x08008225
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008224:	bf00      	nop
  }

  return (USBD_OK);
 8008226:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	4805      	ldr	r0, [pc, #20]	; (8008258 <CDC_Receive_FS+0x24>)
 8008242:	f7fe fd70 	bl	8006d26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008246:	4804      	ldr	r0, [pc, #16]	; (8008258 <CDC_Receive_FS+0x24>)
 8008248:	f7fe fdb6 	bl	8006db8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800824c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000890 	.word	0x20000890

0800825c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <CDC_Transmit_FS+0x48>)
 800826e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008272:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800827e:	2301      	movs	r3, #1
 8008280:	e00b      	b.n	800829a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008282:	887b      	ldrh	r3, [r7, #2]
 8008284:	461a      	mov	r2, r3
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4806      	ldr	r0, [pc, #24]	; (80082a4 <CDC_Transmit_FS+0x48>)
 800828a:	f7fe fd2e 	bl	8006cea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800828e:	4805      	ldr	r0, [pc, #20]	; (80082a4 <CDC_Transmit_FS+0x48>)
 8008290:	f7fe fd62 	bl	8006d58 <USBD_CDC_TransmitPacket>
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000890 	.word	0x20000890

080082a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80082ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
	...

080082cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2212      	movs	r2, #18
 80082dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082de:	4b03      	ldr	r3, [pc, #12]	; (80082ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	2000014c 	.word	0x2000014c

080082f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2204      	movs	r2, #4
 8008300:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008302:	4b03      	ldr	r3, [pc, #12]	; (8008310 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20000160 	.word	0x20000160

08008314 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	6039      	str	r1, [r7, #0]
 800831e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d105      	bne.n	8008332 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4907      	ldr	r1, [pc, #28]	; (8008348 <USBD_FS_ProductStrDescriptor+0x34>)
 800832a:	4808      	ldr	r0, [pc, #32]	; (800834c <USBD_FS_ProductStrDescriptor+0x38>)
 800832c:	f7ff fdf7 	bl	8007f1e <USBD_GetString>
 8008330:	e004      	b.n	800833c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4904      	ldr	r1, [pc, #16]	; (8008348 <USBD_FS_ProductStrDescriptor+0x34>)
 8008336:	4805      	ldr	r0, [pc, #20]	; (800834c <USBD_FS_ProductStrDescriptor+0x38>)
 8008338:	f7ff fdf1 	bl	8007f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800833c:	4b02      	ldr	r3, [pc, #8]	; (8008348 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20001b60 	.word	0x20001b60
 800834c:	08008c94 	.word	0x08008c94

08008350 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	6039      	str	r1, [r7, #0]
 800835a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	4904      	ldr	r1, [pc, #16]	; (8008370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008360:	4804      	ldr	r0, [pc, #16]	; (8008374 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008362:	f7ff fddc 	bl	8007f1e <USBD_GetString>
  return USBD_StrDesc;
 8008366:	4b02      	ldr	r3, [pc, #8]	; (8008370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20001b60 	.word	0x20001b60
 8008374:	08008cac 	.word	0x08008cac

08008378 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	6039      	str	r1, [r7, #0]
 8008382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	221a      	movs	r2, #26
 8008388:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800838a:	f000 f843 	bl	8008414 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800838e:	4b02      	ldr	r3, [pc, #8]	; (8008398 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000164 	.word	0x20000164

0800839c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d105      	bne.n	80083ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	4907      	ldr	r1, [pc, #28]	; (80083d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083b2:	4808      	ldr	r0, [pc, #32]	; (80083d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083b4:	f7ff fdb3 	bl	8007f1e <USBD_GetString>
 80083b8:	e004      	b.n	80083c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4904      	ldr	r1, [pc, #16]	; (80083d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083be:	4805      	ldr	r0, [pc, #20]	; (80083d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083c0:	f7ff fdad 	bl	8007f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80083c4:	4b02      	ldr	r3, [pc, #8]	; (80083d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20001b60 	.word	0x20001b60
 80083d4:	08008cc0 	.word	0x08008cc0

080083d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	4907      	ldr	r1, [pc, #28]	; (800840c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ee:	4808      	ldr	r0, [pc, #32]	; (8008410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083f0:	f7ff fd95 	bl	8007f1e <USBD_GetString>
 80083f4:	e004      	b.n	8008400 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4904      	ldr	r1, [pc, #16]	; (800840c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083fa:	4805      	ldr	r0, [pc, #20]	; (8008410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083fc:	f7ff fd8f 	bl	8007f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20001b60 	.word	0x20001b60
 8008410:	08008ccc 	.word	0x08008ccc

08008414 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800841a:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <Get_SerialNum+0x44>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008420:	4b0e      	ldr	r3, [pc, #56]	; (800845c <Get_SerialNum+0x48>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008426:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <Get_SerialNum+0x4c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d009      	beq.n	800844e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800843a:	2208      	movs	r2, #8
 800843c:	4909      	ldr	r1, [pc, #36]	; (8008464 <Get_SerialNum+0x50>)
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 f814 	bl	800846c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008444:	2204      	movs	r2, #4
 8008446:	4908      	ldr	r1, [pc, #32]	; (8008468 <Get_SerialNum+0x54>)
 8008448:	68b8      	ldr	r0, [r7, #8]
 800844a:	f000 f80f 	bl	800846c <IntToUnicode>
  }
}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	1fff7a10 	.word	0x1fff7a10
 800845c:	1fff7a14 	.word	0x1fff7a14
 8008460:	1fff7a18 	.word	0x1fff7a18
 8008464:	20000166 	.word	0x20000166
 8008468:	20000176 	.word	0x20000176

0800846c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800847e:	2300      	movs	r3, #0
 8008480:	75fb      	strb	r3, [r7, #23]
 8008482:	e027      	b.n	80084d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	0f1b      	lsrs	r3, r3, #28
 8008488:	2b09      	cmp	r3, #9
 800848a:	d80b      	bhi.n	80084a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	0f1b      	lsrs	r3, r3, #28
 8008490:	b2da      	uxtb	r2, r3
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	4619      	mov	r1, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	440b      	add	r3, r1
 800849c:	3230      	adds	r2, #48	; 0x30
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	e00a      	b.n	80084ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	0f1b      	lsrs	r3, r3, #28
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	4619      	mov	r1, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	440b      	add	r3, r1
 80084b4:	3237      	adds	r2, #55	; 0x37
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	3301      	adds	r3, #1
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	4413      	add	r3, r2
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	3301      	adds	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
 80084d4:	7dfa      	ldrb	r2, [r7, #23]
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d3d3      	bcc.n	8008484 <IntToUnicode+0x18>
  }
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
	...

080084ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	; 0x28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084f4:	f107 0314 	add.w	r3, r7, #20
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	60da      	str	r2, [r3, #12]
 8008502:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800850c:	d147      	bne.n	800859e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800850e:	2300      	movs	r3, #0
 8008510:	613b      	str	r3, [r7, #16]
 8008512:	4b25      	ldr	r3, [pc, #148]	; (80085a8 <HAL_PCD_MspInit+0xbc>)
 8008514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008516:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <HAL_PCD_MspInit+0xbc>)
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	6313      	str	r3, [r2, #48]	; 0x30
 800851e:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <HAL_PCD_MspInit+0xbc>)
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	613b      	str	r3, [r7, #16]
 8008528:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800852a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800852e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008534:	2300      	movs	r3, #0
 8008536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008538:	f107 0314 	add.w	r3, r7, #20
 800853c:	4619      	mov	r1, r3
 800853e:	481b      	ldr	r0, [pc, #108]	; (80085ac <HAL_PCD_MspInit+0xc0>)
 8008540:	f7f9 fcf4 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008544:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800854a:	2302      	movs	r3, #2
 800854c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008552:	2300      	movs	r3, #0
 8008554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008556:	230a      	movs	r3, #10
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800855a:	f107 0314 	add.w	r3, r7, #20
 800855e:	4619      	mov	r1, r3
 8008560:	4812      	ldr	r0, [pc, #72]	; (80085ac <HAL_PCD_MspInit+0xc0>)
 8008562:	f7f9 fce3 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008566:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <HAL_PCD_MspInit+0xbc>)
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	4a0f      	ldr	r2, [pc, #60]	; (80085a8 <HAL_PCD_MspInit+0xbc>)
 800856c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008570:	6353      	str	r3, [r2, #52]	; 0x34
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <HAL_PCD_MspInit+0xbc>)
 8008578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857a:	4a0b      	ldr	r2, [pc, #44]	; (80085a8 <HAL_PCD_MspInit+0xbc>)
 800857c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008580:	6453      	str	r3, [r2, #68]	; 0x44
 8008582:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <HAL_PCD_MspInit+0xbc>)
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	2043      	movs	r0, #67	; 0x43
 8008594:	f7f9 fc93 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008598:	2043      	movs	r0, #67	; 0x43
 800859a:	f7f9 fcac 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800859e:	bf00      	nop
 80085a0:	3728      	adds	r7, #40	; 0x28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	40023800 	.word	0x40023800
 80085ac:	40020000 	.word	0x40020000

080085b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f7fe fcc2 	bl	8006f50 <USBD_LL_SetupStage>
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085e6:	78fa      	ldrb	r2, [r7, #3]
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	4613      	mov	r3, r2
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	1a9b      	subs	r3, r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	440b      	add	r3, r1
 80085f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f7fe fcfc 	bl	8006ffa <USBD_LL_DataOutStage>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800861c:	78fa      	ldrb	r2, [r7, #3]
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	4613      	mov	r3, r2
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	440b      	add	r3, r1
 800862a:	3348      	adds	r3, #72	; 0x48
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	4619      	mov	r1, r3
 8008632:	f7fe fd45 	bl	80070c0 <USBD_LL_DataInStage>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800864c:	4618      	mov	r0, r3
 800864e:	f7fe fe59 	bl	8007304 <USBD_LL_SOF>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008662:	2301      	movs	r3, #1
 8008664:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d102      	bne.n	8008674 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
 8008672:	e008      	b.n	8008686 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d102      	bne.n	8008682 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800867c:	2301      	movs	r3, #1
 800867e:	73fb      	strb	r3, [r7, #15]
 8008680:	e001      	b.n	8008686 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008682:	f7f8 f983 	bl	800098c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800868c:	7bfa      	ldrb	r2, [r7, #15]
 800868e:	4611      	mov	r1, r2
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe fdf9 	bl	8007288 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800869c:	4618      	mov	r0, r3
 800869e:	f7fe fda5 	bl	80071ec <USBD_LL_Reset>
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fdf4 	bl	80072a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086e0:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <HAL_PCD_SuspendCallback+0x48>)
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	4a03      	ldr	r2, [pc, #12]	; (80086f4 <HAL_PCD_SuspendCallback+0x48>)
 80086e6:	f043 0306 	orr.w	r3, r3, #6
 80086ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086ec:	bf00      	nop
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	e000ed00 	.word	0xe000ed00

080086f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fde4 	bl	80072d4 <USBD_LL_Resume>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fe32 	bl	8007394 <USBD_LL_IsoOUTIncomplete>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800874a:	78fa      	ldrb	r2, [r7, #3]
 800874c:	4611      	mov	r1, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fdfa 	bl	8007348 <USBD_LL_IsoINIncomplete>
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe fe38 	bl	80073e0 <USBD_LL_DevConnected>
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fe35 	bl	80073f6 <USBD_LL_DevDisconnected>
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d13c      	bne.n	800881e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80087a4:	4a20      	ldr	r2, [pc, #128]	; (8008828 <USBD_LL_Init+0x94>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a1e      	ldr	r2, [pc, #120]	; (8008828 <USBD_LL_Init+0x94>)
 80087b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087b4:	4b1c      	ldr	r3, [pc, #112]	; (8008828 <USBD_LL_Init+0x94>)
 80087b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80087bc:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <USBD_LL_Init+0x94>)
 80087be:	2204      	movs	r2, #4
 80087c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80087c2:	4b19      	ldr	r3, [pc, #100]	; (8008828 <USBD_LL_Init+0x94>)
 80087c4:	2202      	movs	r2, #2
 80087c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087c8:	4b17      	ldr	r3, [pc, #92]	; (8008828 <USBD_LL_Init+0x94>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087ce:	4b16      	ldr	r3, [pc, #88]	; (8008828 <USBD_LL_Init+0x94>)
 80087d0:	2202      	movs	r2, #2
 80087d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087d4:	4b14      	ldr	r3, [pc, #80]	; (8008828 <USBD_LL_Init+0x94>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087da:	4b13      	ldr	r3, [pc, #76]	; (8008828 <USBD_LL_Init+0x94>)
 80087dc:	2200      	movs	r2, #0
 80087de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087e0:	4b11      	ldr	r3, [pc, #68]	; (8008828 <USBD_LL_Init+0x94>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80087e6:	4b10      	ldr	r3, [pc, #64]	; (8008828 <USBD_LL_Init+0x94>)
 80087e8:	2201      	movs	r2, #1
 80087ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087ec:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <USBD_LL_Init+0x94>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087f2:	480d      	ldr	r0, [pc, #52]	; (8008828 <USBD_LL_Init+0x94>)
 80087f4:	f7fa fb34 	bl	8002e60 <HAL_PCD_Init>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087fe:	f7f8 f8c5 	bl	800098c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008802:	2180      	movs	r1, #128	; 0x80
 8008804:	4808      	ldr	r0, [pc, #32]	; (8008828 <USBD_LL_Init+0x94>)
 8008806:	f7fb fc92 	bl	800412e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800880a:	2240      	movs	r2, #64	; 0x40
 800880c:	2100      	movs	r1, #0
 800880e:	4806      	ldr	r0, [pc, #24]	; (8008828 <USBD_LL_Init+0x94>)
 8008810:	f7fb fc46 	bl	80040a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008814:	2280      	movs	r2, #128	; 0x80
 8008816:	2101      	movs	r1, #1
 8008818:	4803      	ldr	r0, [pc, #12]	; (8008828 <USBD_LL_Init+0x94>)
 800881a:	f7fb fc41 	bl	80040a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20001d60 	.word	0x20001d60

0800882c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008842:	4618      	mov	r0, r3
 8008844:	f7fa fc29 	bl	800309a <HAL_PCD_Start>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	4618      	mov	r0, r3
 8008850:	f000 f942 	bl	8008ad8 <USBD_Get_USB_Status>
 8008854:	4603      	mov	r3, r0
 8008856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008858:	7bbb      	ldrb	r3, [r7, #14]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	4608      	mov	r0, r1
 800886c:	4611      	mov	r1, r2
 800886e:	461a      	mov	r2, r3
 8008870:	4603      	mov	r3, r0
 8008872:	70fb      	strb	r3, [r7, #3]
 8008874:	460b      	mov	r3, r1
 8008876:	70bb      	strb	r3, [r7, #2]
 8008878:	4613      	mov	r3, r2
 800887a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800888a:	78bb      	ldrb	r3, [r7, #2]
 800888c:	883a      	ldrh	r2, [r7, #0]
 800888e:	78f9      	ldrb	r1, [r7, #3]
 8008890:	f7fb f80d 	bl	80038ae <HAL_PCD_EP_Open>
 8008894:	4603      	mov	r3, r0
 8008896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 f91c 	bl	8008ad8 <USBD_Get_USB_Status>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	460b      	mov	r3, r1
 80088b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088c8:	78fa      	ldrb	r2, [r7, #3]
 80088ca:	4611      	mov	r1, r2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fb f856 	bl	800397e <HAL_PCD_EP_Close>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 f8fd 	bl	8008ad8 <USBD_Get_USB_Status>
 80088de:	4603      	mov	r3, r0
 80088e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7fb f92e 	bl	8003b6c <HAL_PCD_EP_SetStall>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 f8de 	bl	8008ad8 <USBD_Get_USB_Status>
 800891c:	4603      	mov	r3, r0
 800891e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008920:	7bbb      	ldrb	r3, [r7, #14]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008944:	78fa      	ldrb	r2, [r7, #3]
 8008946:	4611      	mov	r1, r2
 8008948:	4618      	mov	r0, r3
 800894a:	f7fb f973 	bl	8003c34 <HAL_PCD_EP_ClrStall>
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f8bf 	bl	8008ad8 <USBD_Get_USB_Status>
 800895a:	4603      	mov	r3, r0
 800895c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800895e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800897a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800897c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008980:	2b00      	cmp	r3, #0
 8008982:	da0b      	bge.n	800899c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800898a:	68f9      	ldr	r1, [r7, #12]
 800898c:	4613      	mov	r3, r2
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	1a9b      	subs	r3, r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	333e      	adds	r3, #62	; 0x3e
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	e00b      	b.n	80089b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089a2:	68f9      	ldr	r1, [r7, #12]
 80089a4:	4613      	mov	r3, r2
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	1a9b      	subs	r3, r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	440b      	add	r3, r1
 80089ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fa ff40 	bl	8003864 <HAL_PCD_SetAddress>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f874 	bl	8008ad8 <USBD_Get_USB_Status>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b086      	sub	sp, #24
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	603b      	str	r3, [r7, #0]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a1c:	7af9      	ldrb	r1, [r7, #11]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	f7fb f859 	bl	8003ad8 <HAL_PCD_EP_Transmit>
 8008a26:	4603      	mov	r3, r0
 8008a28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f853 	bl	8008ad8 <USBD_Get_USB_Status>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a36:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a5e:	7af9      	ldrb	r1, [r7, #11]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	f7fa ffd5 	bl	8003a12 <HAL_PCD_EP_Receive>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f832 	bl	8008ad8 <USBD_Get_USB_Status>
 8008a74:	4603      	mov	r3, r0
 8008a76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a78:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fb f805 	bl	8003aa8 <HAL_PCD_EP_GetRxCount>
 8008a9e:	4603      	mov	r3, r0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ab0:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <USBD_static_malloc+0x18>)
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	2000066c 	.word	0x2000066c

08008ac4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]

}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d817      	bhi.n	8008b1c <USBD_Get_USB_Status+0x44>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <USBD_Get_USB_Status+0x1c>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b05 	.word	0x08008b05
 8008af8:	08008b0b 	.word	0x08008b0b
 8008afc:	08008b11 	.word	0x08008b11
 8008b00:	08008b17 	.word	0x08008b17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
    break;
 8008b08:	e00b      	b.n	8008b22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0e:	e008      	b.n	8008b22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
    break;
 8008b14:	e005      	b.n	8008b22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1a:	e002      	b.n	8008b22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b20:	bf00      	nop
  }
  return usb_status;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <__cxa_pure_virtual>:
 8008b30:	b508      	push	{r3, lr}
 8008b32:	f000 f80d 	bl	8008b50 <_ZSt9terminatev>

08008b36 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008b36:	b508      	push	{r3, lr}
 8008b38:	4780      	blx	r0
 8008b3a:	f000 f80e 	bl	8008b5a <abort>
	...

08008b40 <_ZSt13get_terminatev>:
 8008b40:	4b02      	ldr	r3, [pc, #8]	; (8008b4c <_ZSt13get_terminatev+0xc>)
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	f3bf 8f5b 	dmb	ish
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000180 	.word	0x20000180

08008b50 <_ZSt9terminatev>:
 8008b50:	b508      	push	{r3, lr}
 8008b52:	f7ff fff5 	bl	8008b40 <_ZSt13get_terminatev>
 8008b56:	f7ff ffee 	bl	8008b36 <_ZN10__cxxabiv111__terminateEPFvvE>

08008b5a <abort>:
 8008b5a:	b508      	push	{r3, lr}
 8008b5c:	2006      	movs	r0, #6
 8008b5e:	f000 f86b 	bl	8008c38 <raise>
 8008b62:	2001      	movs	r0, #1
 8008b64:	f7f8 fff4 	bl	8001b50 <_exit>

08008b68 <__errno>:
 8008b68:	4b01      	ldr	r3, [pc, #4]	; (8008b70 <__errno+0x8>)
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000184 	.word	0x20000184

08008b74 <__libc_init_array>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	4d0d      	ldr	r5, [pc, #52]	; (8008bac <__libc_init_array+0x38>)
 8008b78:	4c0d      	ldr	r4, [pc, #52]	; (8008bb0 <__libc_init_array+0x3c>)
 8008b7a:	1b64      	subs	r4, r4, r5
 8008b7c:	10a4      	asrs	r4, r4, #2
 8008b7e:	2600      	movs	r6, #0
 8008b80:	42a6      	cmp	r6, r4
 8008b82:	d109      	bne.n	8008b98 <__libc_init_array+0x24>
 8008b84:	4d0b      	ldr	r5, [pc, #44]	; (8008bb4 <__libc_init_array+0x40>)
 8008b86:	4c0c      	ldr	r4, [pc, #48]	; (8008bb8 <__libc_init_array+0x44>)
 8008b88:	f000 f872 	bl	8008c70 <_init>
 8008b8c:	1b64      	subs	r4, r4, r5
 8008b8e:	10a4      	asrs	r4, r4, #2
 8008b90:	2600      	movs	r6, #0
 8008b92:	42a6      	cmp	r6, r4
 8008b94:	d105      	bne.n	8008ba2 <__libc_init_array+0x2e>
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9c:	4798      	blx	r3
 8008b9e:	3601      	adds	r6, #1
 8008ba0:	e7ee      	b.n	8008b80 <__libc_init_array+0xc>
 8008ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba6:	4798      	blx	r3
 8008ba8:	3601      	adds	r6, #1
 8008baa:	e7f2      	b.n	8008b92 <__libc_init_array+0x1e>
 8008bac:	08008d34 	.word	0x08008d34
 8008bb0:	08008d34 	.word	0x08008d34
 8008bb4:	08008d34 	.word	0x08008d34
 8008bb8:	08008d3c 	.word	0x08008d3c

08008bbc <memcpy>:
 8008bbc:	440a      	add	r2, r1
 8008bbe:	4291      	cmp	r1, r2
 8008bc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008bc4:	d100      	bne.n	8008bc8 <memcpy+0xc>
 8008bc6:	4770      	bx	lr
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd2:	4291      	cmp	r1, r2
 8008bd4:	d1f9      	bne.n	8008bca <memcpy+0xe>
 8008bd6:	bd10      	pop	{r4, pc}

08008bd8 <memset>:
 8008bd8:	4402      	add	r2, r0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d100      	bne.n	8008be2 <memset+0xa>
 8008be0:	4770      	bx	lr
 8008be2:	f803 1b01 	strb.w	r1, [r3], #1
 8008be6:	e7f9      	b.n	8008bdc <memset+0x4>

08008be8 <_raise_r>:
 8008be8:	291f      	cmp	r1, #31
 8008bea:	b538      	push	{r3, r4, r5, lr}
 8008bec:	4604      	mov	r4, r0
 8008bee:	460d      	mov	r5, r1
 8008bf0:	d904      	bls.n	8008bfc <_raise_r+0x14>
 8008bf2:	2316      	movs	r3, #22
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bfe:	b112      	cbz	r2, 8008c06 <_raise_r+0x1e>
 8008c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c04:	b94b      	cbnz	r3, 8008c1a <_raise_r+0x32>
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f830 	bl	8008c6c <_getpid_r>
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4601      	mov	r1, r0
 8008c10:	4620      	mov	r0, r4
 8008c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c16:	f000 b817 	b.w	8008c48 <_kill_r>
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d00a      	beq.n	8008c34 <_raise_r+0x4c>
 8008c1e:	1c59      	adds	r1, r3, #1
 8008c20:	d103      	bne.n	8008c2a <_raise_r+0x42>
 8008c22:	2316      	movs	r3, #22
 8008c24:	6003      	str	r3, [r0, #0]
 8008c26:	2001      	movs	r0, #1
 8008c28:	e7e7      	b.n	8008bfa <_raise_r+0x12>
 8008c2a:	2400      	movs	r4, #0
 8008c2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c30:	4628      	mov	r0, r5
 8008c32:	4798      	blx	r3
 8008c34:	2000      	movs	r0, #0
 8008c36:	e7e0      	b.n	8008bfa <_raise_r+0x12>

08008c38 <raise>:
 8008c38:	4b02      	ldr	r3, [pc, #8]	; (8008c44 <raise+0xc>)
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	6818      	ldr	r0, [r3, #0]
 8008c3e:	f7ff bfd3 	b.w	8008be8 <_raise_r>
 8008c42:	bf00      	nop
 8008c44:	20000184 	.word	0x20000184

08008c48 <_kill_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d07      	ldr	r5, [pc, #28]	; (8008c68 <_kill_r+0x20>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	f7f8 ff6b 	bl	8001b30 <_kill>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	d102      	bne.n	8008c64 <_kill_r+0x1c>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	b103      	cbz	r3, 8008c64 <_kill_r+0x1c>
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	bd38      	pop	{r3, r4, r5, pc}
 8008c66:	bf00      	nop
 8008c68:	20002168 	.word	0x20002168

08008c6c <_getpid_r>:
 8008c6c:	f7f8 bf58 	b.w	8001b20 <_getpid>

08008c70 <_init>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr

08008c7c <_fini>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr
