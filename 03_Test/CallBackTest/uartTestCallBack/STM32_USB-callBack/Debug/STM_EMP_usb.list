
STM_EMP_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc8  08008cc8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc8  08008cc8  00018cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd0  08008cd0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f80  200001e8  08008ec8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002168  08008ec8  00022168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e16c  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042cb  00000000  00000000  0003e384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00042650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  00043a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d89  00000000  00000000  00044d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196bb  00000000  00000000  0006cae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf858  00000000  00000000  0008619c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001559f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c4  00000000  00000000  00155a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e8 	.word	0x200001e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c0c 	.word	0x08008c0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ec 	.word	0x200001ec
 80001c4:	08008c0c 	.word	0x08008c0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
 * @retval int
 */

MP_ST_usb<packLinux2Ard, packArd2Linux, STM32MP_templateDefault()> MP_St;

int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f001 fb57 	bl	8001b78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f82d 	bl	8000528 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 f95f 	bl	8000790 <_ZL12MX_GPIO_Initv>
	MX_I2C1_Init();
 80004d2:	f000 f8b9 	bl	8000648 <_ZL12MX_I2C1_Initv>
	MX_I2S3_Init();
 80004d6:	f000 f8eb 	bl	80006b0 <_ZL12MX_I2S3_Initv>
	MX_SPI1_Init();
 80004da:	f000 f91d 	bl	8000718 <_ZL12MX_SPI1_Initv>
	MX_USB_DEVICE_Init();
 80004de:	f007 fdcd 	bl	800807c <MX_USB_DEVICE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */

	packArd2Linux pWrite { 0, "Hi sys" };
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <main+0x60>)
 80004e4:	f107 0318 	add.w	r3, r7, #24
 80004e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packLinux2Ard pRead;
	HAL_Delay(1000);
 80004ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f2:	f001 fbb3 	bl	8001c5c <HAL_Delay>

	while (1) {
		MP_St.getData_wait(&pRead);
 80004f6:	463b      	mov	r3, r7
 80004f8:	4619      	mov	r1, r3
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <main+0x64>)
 80004fc:	f000 fa7c 	bl	80009f8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_>
		pWrite.num = pRead.num+1;
 8000500:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000504:	b29b      	uxth	r3, r3
 8000506:	3301      	adds	r3, #1
 8000508:	b29b      	uxth	r3, r3
 800050a:	b21b      	sxth	r3, r3
 800050c:	833b      	strh	r3, [r7, #24]
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
/// Data Send & Get
/*    On success return 0
 *    On fail return -1
 */

templatePar() int MP<templateParCall()>::packSend(pOut *pack) { return packSend(pack, sizeof(pOut)); }
 8000514:	220c      	movs	r2, #12
 8000516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <main+0x64>)
 800051a:	f000 fb8a 	bl	8000c32 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t>
		MP_St.getData_wait(&pRead);
 800051e:	e7ea      	b.n	80004f6 <main+0x36>
 8000520:	08008c24 	.word	0x08008c24
 8000524:	200002f8 	.word	0x200002f8

08000528 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b098      	sub	sp, #96	; 0x60
 800052c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800052e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f008 fb1c 	bl	8008b74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b38      	ldr	r3, [pc, #224]	; (8000640 <_Z18SystemClock_Configv+0x118>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <_Z18SystemClock_Configv+0x118>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6413      	str	r3, [r2, #64]	; 0x40
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <_Z18SystemClock_Configv+0x118>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <_Z18SystemClock_Configv+0x11c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <_Z18SystemClock_Configv+0x11c>)
 8000580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <_Z18SystemClock_Configv+0x11c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005a6:	2308      	movs	r3, #8
 80005a8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ae:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fda1 	bl	8004104 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf14      	ite	ne
 80005c8:	2301      	movne	r3, #1
 80005ca:	2300      	moveq	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <_Z18SystemClock_Configv+0xae>
		Error_Handler();
 80005d2:	f000 f9db 	bl	800098c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fffd 	bl	80045f4 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <_Z18SystemClock_Configv+0xe6>
		Error_Handler();
 800060a:	f000 f9bf 	bl	800098c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000612:	23c0      	movs	r3, #192	; 0xc0
 8000614:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4618      	mov	r0, r3
 8000620:	f004 f9d0 	bl	80049c4 <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf14      	ite	ne
 800062a:	2301      	movne	r3, #1
 800062c:	2300      	moveq	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <_Z18SystemClock_Configv+0x110>
		Error_Handler();
 8000634:	f000 f9aa 	bl	800098c <Error_Handler>
	}
}
 8000638:	bf00      	nop
 800063a:	3760      	adds	r7, #96	; 0x60
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <_ZL12MX_I2C1_Initv+0x60>)
 8000650:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000654:	4a15      	ldr	r2, [pc, #84]	; (80006ac <_ZL12MX_I2C1_Initv+0x64>)
 8000656:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8000686:	f001 fdd5 	bl	8002234 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 800069a:	f000 f977 	bl	800098c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000204 	.word	0x20000204
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <_ZL12MX_I2S3_Initv>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <_ZL12MX_I2S3_Initv+0x60>)
 80006b8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <_ZL12MX_I2S3_Initv+0x64>)
 80006da:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <_ZL12MX_I2S3_Initv+0x5c>)
 80006f0:	f001 fee4 	bl	80024bc <HAL_I2S_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <_ZL12MX_I2S3_Initv+0x58>
		Error_Handler();
 8000704:	f000 f942 	bl	800098c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000258 	.word	0x20000258
 8000710:	40003c00 	.word	0x40003c00
 8000714:	00017700 	.word	0x00017700

08000718 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800071e:	4a1b      	ldr	r2, [pc, #108]	; (800078c <_ZL12MX_SPI1_Initv+0x74>)
 8000720:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 8000764:	220a      	movs	r2, #10
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <_ZL12MX_SPI1_Initv+0x70>)
 800076a:	f004 fa6b 	bl	8004c44 <HAL_SPI_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800077e:	f000 f905 	bl	800098c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200002a0 	.word	0x200002a0
 800078c:	40013000 	.word	0x40013000

08000790 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b71      	ldr	r3, [pc, #452]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a70      	ldr	r2, [pc, #448]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b6e      	ldr	r3, [pc, #440]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b6a      	ldr	r3, [pc, #424]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a69      	ldr	r2, [pc, #420]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b67      	ldr	r3, [pc, #412]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b63      	ldr	r3, [pc, #396]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a62      	ldr	r2, [pc, #392]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b60      	ldr	r3, [pc, #384]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b5c      	ldr	r3, [pc, #368]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a5b      	ldr	r2, [pc, #364]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b59      	ldr	r3, [pc, #356]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a54      	ldr	r2, [pc, #336]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b52      	ldr	r3, [pc, #328]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b4e      	ldr	r3, [pc, #312]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a4d      	ldr	r2, [pc, #308]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b4b      	ldr	r3, [pc, #300]	; (8000970 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4848      	ldr	r0, [pc, #288]	; (8000974 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000854:	f001 fcd4 	bl	8002200 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4846      	ldr	r0, [pc, #280]	; (8000978 <_ZL12MX_GPIO_Initv+0x1e8>)
 800085e:	f001 fccf 	bl	8002200 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000868:	4844      	ldr	r0, [pc, #272]	; (800097c <_ZL12MX_GPIO_Initv+0x1ec>)
 800086a:	f001 fcc9 	bl	8002200 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	483b      	ldr	r0, [pc, #236]	; (8000974 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000886:	f001 fb1f 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4835      	ldr	r0, [pc, #212]	; (8000978 <_ZL12MX_GPIO_Initv+0x1e8>)
 80008a2:	f001 fb11 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	482d      	ldr	r0, [pc, #180]	; (8000978 <_ZL12MX_GPIO_Initv+0x1e8>)
 80008c2:	f001 fb01 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <_ZL12MX_GPIO_Initv+0x1f0>)
 80008cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	482a      	ldr	r0, [pc, #168]	; (8000984 <_ZL12MX_GPIO_Initv+0x1f4>)
 80008da:	f001 faf5 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80008de:	2304      	movs	r3, #4
 80008e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4825      	ldr	r0, [pc, #148]	; (8000988 <_ZL12MX_GPIO_Initv+0x1f8>)
 80008f2:	f001 fae9 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000908:	2305      	movs	r3, #5
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	481d      	ldr	r0, [pc, #116]	; (8000988 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000914:	f001 fad8 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000918:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <_ZL12MX_GPIO_Initv+0x1ec>)
 8000932:	f001 fac9 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000936:	2320      	movs	r3, #32
 8000938:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <_ZL12MX_GPIO_Initv+0x1ec>)
 800094a:	f001 fabd 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000954:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000962:	f001 fab1 	bl	8001ec8 <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	10120000 	.word	0x10120000
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400

0800098c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev>:

templatePar() MP_ST_usb<templateParCall()> * MP_ST_usb<templateParCall()>::instance = nullptr;	//Istanza statica dinamica in base alla classe compilata


templatePar()
MP_ST_usb<templateParCall()>::MP_ST_usb() : MP<templateParCall()>() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f846 	bl	8000a34 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev>
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev+0x4c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f85d 	bl	8000a74 <_ZN14CircularBufferIhLt368EEC1Ev>
	byteSend.memClean();
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f86b 	bl	8000a9c <_ZN14CircularBufferIhLt368EE8memCleanEv>
	instance = this;
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev+0x50>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6013      	str	r3, [r2, #0]
	USBD_Interface_fops_FS.Receive = MP_ST_usb<templateParCall()>::isrRead;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev+0x54>)
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev+0x58>)
 80009d0:	60da      	str	r2, [r3, #12]
	USBD_Interface_fops_FS.TransmitCplt =
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev+0x54>)
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev+0x5c>)
 80009d6:	611a      	str	r2, [r3, #16]
			MP_ST_usb<templateParCall()>::isrSendNotify;
}
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	08008c80 	.word	0x08008c80
 80009e8:	20000660 	.word	0x20000660
 80009ec:	2000011c 	.word	0x2000011c
 80009f0:	08000ad9 	.word	0x08000ad9
 80009f4:	08000b1d 	.word	0x08000b1d

080009f8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_>:

templatePar() MP_ST_usb<templateParCall()>::~MP_ST_usb() {
}

templatePar()int16_t MP_ST_usb<templateParCall()>::getData_wait(pIn *pack) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
	while (this->dataAvailable() < 1) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f8df 	bl	8000bc8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf0c      	ite	eq
 8000a10:	2301      	moveq	r3, #1
 8000a12:	2300      	movne	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d000      	beq.n	8000a1c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_+0x24>
 8000a1a:	e7f2      	b.n	8000a02 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE12getData_waitEPS1_+0xa>
	}
	return this->getData_try(pack);
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6839      	ldr	r1, [r7, #0]
 8000a26:	4610      	mov	r0, r2
 8000a28:	4798      	blx	r3
 8000a2a:	4603      	mov	r3, r0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev>:
templatePar() MP<templateParCall()>::MP() { bufClear(); }
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev+0x3c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	809a      	strh	r2, [r3, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3306      	adds	r3, #6
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f811 	bl	8000a74 <_ZN14CircularBufferIhLt368EEC1Ev>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f988 	bl	8000d6e <_ZN14CircularBufferI14_packLinux2ArdLt4EEC1Ev>
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f999 	bl	8000d96 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8bufClearEv>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	08008c9c 	.word	0x08008c9c

08000a74 <_ZN14CircularBufferIhLt368EEC1Ev>:
  uint16_t tailInc();
  uint16_t tailAdd(uint16_t len);
  uint16_t tailSet(uint16_t pos); // in case of error can go back
};

template <class T, uint16_t nElem> CircularBuffer<T, nElem>::CircularBuffer() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  this->head_ = 0;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
  this->tail_ = 0;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  memClean();
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f805 	bl	8000a9c <_ZN14CircularBufferIhLt368EE8memCleanEv>
}
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN14CircularBufferIhLt368EE8memCleanEv>:

template <class T, uint16_t nElem> void CircularBuffer<T, nElem>::memClean() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  for (uint16_t i = 0; i < real_nElem; i++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	81fb      	strh	r3, [r7, #14]
 8000aa8:	89fb      	ldrh	r3, [r7, #14]
 8000aaa:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000aae:	d80b      	bhi.n	8000ac8 <_ZN14CircularBufferIhLt368EE8memCleanEv+0x2c>
    memset(&this->buf_[i], 0, sizeof(T));
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f008 f85a 	bl	8008b74 <memset>
  for (uint16_t i = 0; i < real_nElem; i++)
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	81fb      	strh	r3, [r7, #14]
 8000ac6:	e7ef      	b.n	8000aa8 <_ZN14CircularBufferIhLt368EE8memCleanEv+0xc>
  reset();
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f97a 	bl	8000dc2 <_ZN14CircularBufferIhLt368EE5resetEv>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
templatePar() int8_t MP_ST_usb<templateParCall()>::isrRead(uint8_t *Buf,
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
		uint32_t *Len) {
	MP_ST_usb<templateParCall()> *inst = MP_ST_usb<templateParCall()>::instance;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm+0x3c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	60fb      	str	r3, [r7, #12]
	inst->byteRecive.putArray(Buf, *Len);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	1d98      	adds	r0, r3, #6
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	f000 f974 	bl	8000de2 <_ZN14CircularBufferIhLt368EE8putArrayEPht>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE7isrReadEPhPm+0x40>)
 8000afc:	f006 f92a 	bl	8006d54 <USBD_CDC_ReceivePacket>
	inst->byteParsing();
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f97f 	bl	8000e06 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv>
	return USBD_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000660 	.word	0x20000660
 8000b18:	2000088c 	.word	0x2000088c

08000b1c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh>:
templatePar()int8_t MP_ST_usb<templateParCall()>::isrSendNotify(uint8_t *Buf,
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	4613      	mov	r3, r2
 8000b28:	71fb      	strb	r3, [r7, #7]
	MP_ST_usb<templateParCall()> *inst = MP_ST_usb<templateParCall()>::instance;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0xa8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	61fb      	str	r3, [r7, #28]
	if (inst->byteSend.usedSpace()) {
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fa1c 	bl	8000f74 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d035      	beq.n	8000bb8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9c>
		len = inst->byteSend.usedSpaceLinear();
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fa32 	bl	8000fbc <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	837b      	strh	r3, [r7, #26]
		uint8_t* tailPtr = inst->byteSend.getTailPtr();
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fa4c 	bl	8001000 <_ZN14CircularBufferIhLt368EE10getTailPtrEv>
 8000b68:	6178      	str	r0, [r7, #20]
		uint16_t tailBackUp = 	inst->byteSend.getTail();
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fa55 	bl	8001020 <_ZNK14CircularBufferIhLt368EE7getTailEv>
 8000b76:	4603      	mov	r3, r0
 8000b78:	827b      	strh	r3, [r7, #18]
		inst->byteSend.tailAdd(len);
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8000b80:	8b7a      	ldrh	r2, [r7, #26]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fa59 	bl	800103c <_ZN14CircularBufferIhLt368EE7tailAddEt>
		if (CDC_Transmit_FS(tailPtr, len) == USBD_BUSY) {
 8000b8a:	8b7b      	ldrh	r3, [r7, #26]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f007 fb32 	bl	80081f8 <CDC_Transmit_FS>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d009      	beq.n	8000bb8 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9c>
			inst->byteSend.tailSet(tailBackUp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8000baa:	8a7a      	ldrh	r2, [r7, #18]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fa7a 	bl	80010a8 <_ZN14CircularBufferIhLt368EE7tailSetEt>
			return USBD_FAIL;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e000      	b.n	8000bba <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh+0x9e>
	return USBD_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000660 	.word	0x20000660

08000bc8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>:
    return ret;

  return 0;
}

templatePar() uint16_t MP<templateParCall()>::dataAvailable() { return this->packRecive.usedSpace(); }
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fa7b 	bl	80010d2 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_>:

// On success: copy pack Logic, inside *pack are saved the tail data if possible,
// On fail: return -1 and *pack aren't touch
templatePar() int16_t MP<templateParCall()>::getData_try(pIn *pack) {
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
  if (packRecive.isEmpty())
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fa8e 	bl	8001118 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_+0x22>
    return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c06:	e010      	b.n	8000c2a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11getData_tryEPS1_+0x44>
  // If data are dataAvailable
  memcpy(pack, packRecive.getPtr(), sizeof(pIn));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fa97 	bl	8001142 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2216      	movs	r2, #22
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6838      	ldr	r0, [r7, #0]
 8000c1c:	f007 ff9c 	bl	8008b58 <memcpy>
  return dataAvailable();
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffd1 	bl	8000bc8 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13dataAvailableEv>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b21b      	sxth	r3, r3
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t>:
templatePar() int MP<templateParCall()>::packSend(pOut *pack, uint16_t bSize) {
 8000c32:	b5b0      	push	{r4, r5, r7, lr}
 8000c34:	b090      	sub	sp, #64	; 0x40
 8000c36:	af02      	add	r7, sp, #8
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000c40:	466b      	mov	r3, sp
 8000c42:	461d      	mov	r5, r3
  int ret = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t packSize = bSize + CRC8_enable();
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	867b      	strh	r3, [r7, #50]	; 0x32
  uint8_t packBuf[packSize]; // CRC8 may add 1 byte
 8000c4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000c50:	1e5c      	subs	r4, r3, #1
 8000c52:	637c      	str	r4, [r7, #52]	; 0x34
 8000c54:	4623      	mov	r3, r4
 8000c56:	3301      	adds	r3, #1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f04f 0100 	mov.w	r1, #0
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	00cb      	lsls	r3, r1, #3
 8000c68:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c6c:	00c2      	lsls	r2, r0, #3
 8000c6e:	4623      	mov	r3, r4
 8000c70:	3301      	adds	r3, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f04f 0100 	mov.w	r1, #0
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	00cb      	lsls	r3, r1, #3
 8000c82:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c86:	00c2      	lsls	r2, r0, #3
 8000c88:	4623      	mov	r3, r4
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	3307      	adds	r3, #7
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	ebad 0d03 	sub.w	sp, sp, r3
 8000c96:	ab02      	add	r3, sp, #8
 8000c98:	3300      	adds	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  memcpy(packBuf, pack, bSize);
 8000c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9e:	88fa      	ldrh	r2, [r7, #6]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f007 ff58 	bl	8008b58 <memcpy>
    packBuf[packSize - 1] = crc8_stream((uint8_t *)pack, bSize);
 8000ca8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000caa:	1e5c      	subs	r4, r3, #1
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	68b8      	ldr	r0, [r7, #8]
 8000cb2:	f005 fd31 	bl	8006718 <_Z11crc8_streamPht>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbc:	551a      	strb	r2, [r3, r4]
  uint16_t sendSize = packSize + 1; // Cobs add 1 byte
 8000cbe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t sendBuf[sendSize + 1]; // +1 for the final 0
 8000cc4:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8000cc6:	623c      	str	r4, [r7, #32]
 8000cc8:	4623      	mov	r3, r4
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f04f 0100 	mov.w	r1, #0
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	00cb      	lsls	r3, r1, #3
 8000cdc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ce0:	00c2      	lsls	r2, r0, #3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f04f 0100 	mov.w	r1, #0
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	00cb      	lsls	r3, r1, #3
 8000cf6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000cfa:	00c2      	lsls	r2, r0, #3
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	3301      	adds	r3, #1
 8000d00:	3307      	adds	r3, #7
 8000d02:	08db      	lsrs	r3, r3, #3
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	ebad 0d03 	sub.w	sp, sp, r3
 8000d0a:	ab02      	add	r3, sp, #8
 8000d0c:	3300      	adds	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  cobs_encode_result res = cobs_encode(sendBuf, sendSize, packBuf, packSize);
 8000d10:	69f9      	ldr	r1, [r7, #28]
 8000d12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d14:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000d16:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d18:	f107 0014 	add.w	r0, r7, #20
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	4623      	mov	r3, r4
 8000d20:	f005 fb3e 	bl	80063a0 <cobs_encode>
  if (res.status != COBS_ENCODE_OK)
 8000d24:	7e3b      	ldrb	r3, [r7, #24]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0xfe>
    return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2e:	e019      	b.n	8000d64 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x132>
  sendBuf[sendSize] = '\0';
 8000d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	2100      	movs	r1, #0
 8000d36:	54d1      	strb	r1, [r2, r3]
  if ((ret = packSend_Concrete(sendBuf, sendSize + 1)) != 0)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	69f9      	ldr	r1, [r7, #28]
 8000d42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d44:	3201      	adds	r2, #1
 8000d46:	b292      	uxth	r2, r2
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	4798      	blx	r3
 8000d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf14      	ite	ne
 8000d54:	2301      	movne	r3, #1
 8000d56:	2300      	moveq	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x130>
    return ret;
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	e000      	b.n	8000d64 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8packSendEPS2_t+0x132>
  return 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	46ad      	mov	sp, r5
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3738      	adds	r7, #56	; 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bdb0      	pop	{r4, r5, r7, pc}

08000d6e <_ZN14CircularBufferI14_packLinux2ArdLt4EEC1Ev>:
template <class T, uint16_t nElem> CircularBuffer<T, nElem>::CircularBuffer() {
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  this->head_ = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  this->tail_ = 0;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  memClean();
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f9f3 	bl	8001172 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>
}
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE8bufClearEv>:
templatePar() void MP<templateParCall()>::bufClear() {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  byteRecive.memClean();
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3306      	adds	r3, #6
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fe7a 	bl	8000a9c <_ZN14CircularBufferIhLt368EE8memCleanEv>
  packRecive.memClean();
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f9df 	bl	8001172 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>
  lastStartIndex = 0;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	809a      	strh	r2, [r3, #4]
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_ZN14CircularBufferIhLt368EE5resetEv>:

template <class T, uint16_t nElem> inline void CircularBuffer<T, nElem>::reset() { head_ = tail_; }
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8b3 2174 	ldrh.w	r2, [r3, #372]	; 0x174
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_ZN14CircularBufferIhLt368EE8putArrayEPht>:
    return -2;
  memcpy((void *)&buf_[head_], item, bSize);
  return headInc(); // old head
}

template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::putArray(T *item, uint16_t nItem) {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	4613      	mov	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]

  return putArray(item, nItem, sizeof(T));
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	2301      	movs	r3, #1
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f000 f9da 	bl	80011b0 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt>
 8000dfc:	4603      	mov	r3, r0
    memcpy((void *)&buf_[head_], &item[linLen + 1], (nItem - linLen) * sizeof(T));
    headAdd(nItem - linLen);
  }

  return ret;
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv>:

templatePar() int MP<templateParCall()>::packSend_Concrete(uint8_t byteSend) { return packSend_Concrete(&byteSend, 1); }

/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// Byte parsing using CRC8 and COBS to
templatePar() uint16_t MP<templateParCall()>::byteParsing() {
 8000e06:	b5b0      	push	{r4, r5, r7, lr}
 8000e08:	b092      	sub	sp, #72	; 0x48
 8000e0a:	af02      	add	r7, sp, #8
 8000e0c:	6078      	str	r0, [r7, #4]
  uint8_t dato;
  uint16_t datoId;
  uint16_t packFound = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	87fb      	strh	r3, [r7, #62]	; 0x3e
  while (!byteRecive.isEmpty()) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3306      	adds	r3, #6
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fa56 	bl	80012c8 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f083 0301 	eor.w	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a0 	beq.w	8000f6a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x164>
 8000e2a:	466b      	mov	r3, sp
 8000e2c:	461d      	mov	r5, r3
    // Get the byte and his position (if is a 0, need to be saved)
    dato = byteRecive.get(&datoId);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3306      	adds	r3, #6
 8000e32:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fa5a 	bl	80012f2 <_ZN14CircularBufferIhLt368EE3getEPt>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if (dato != 0)
 8000e44:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f040 8087 	bne.w	8000f5c <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x156>
      continue;

    /// ########################## COBS DECODE ##########################
    // NB:COBS protocol add 1 byte at the pack, At the start
    uint16_t COBSsrcSize = byteRecive.countSlotBetween(lastStartIndex, datoId);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	1d98      	adds	r0, r3, #6
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	889b      	ldrh	r3, [r3, #4]
 8000e56:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f000 fa5f 	bl	800131c <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (COBSsrcSize - 1 > MAXPackINsize || COBSsrcSize < 2) {
 8000e62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e64:	2b18      	cmp	r3, #24
 8000e66:	d802      	bhi.n	8000e6e <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x68>
 8000e68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d805      	bhi.n	8000e7a <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x74>
      // Someting wrong, no 0 was recived in time, or too many zero are received
      // Anyway the pack are lost
      lastStartIndex = datoId + 1; // restart the logic from the next byte
 8000e6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e70:	3301      	adds	r3, #1
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	809a      	strh	r2, [r3, #4]
      continue;
 8000e78:	e075      	b.n	8000f66 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x160>
    }
    // Fill the buffer for the decoding
    uint8_t COBSEncoded[COBSsrcSize];
 8000e7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e7c:	1e5c      	subs	r4, r3, #1
 8000e7e:	637c      	str	r4, [r7, #52]	; 0x34
 8000e80:	4623      	mov	r3, r4
 8000e82:	3301      	adds	r3, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f04f 0100 	mov.w	r1, #0
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	00cb      	lsls	r3, r1, #3
 8000e94:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e98:	00c2      	lsls	r2, r0, #3
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f04f 0100 	mov.w	r1, #0
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	00cb      	lsls	r3, r1, #3
 8000eae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000eb2:	00c2      	lsls	r2, r0, #3
 8000eb4:	4623      	mov	r3, r4
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	3307      	adds	r3, #7
 8000eba:	08db      	lsrs	r3, r3, #3
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	ebad 0d03 	sub.w	sp, sp, r3
 8000ec2:	ab02      	add	r3, sp, #8
 8000ec4:	3300      	adds	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
    byteRecive.memcpyCb(COBSEncoded, lastStartIndex, COBSsrcSize);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1d98      	adds	r0, r3, #6
 8000ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	889a      	ldrh	r2, [r3, #4]
 8000ed2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ed4:	f000 fa44 	bl	8001360 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt>
    uint8_t COBSDecode[MAXPackINsize];

    cobs_decode_result res = cobs_decode(COBSDecode, MAXPackINsize, COBSEncoded, COBSsrcSize);
 8000ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000edc:	f107 000c 	add.w	r0, r7, #12
 8000ee0:	f107 0114 	add.w	r1, r7, #20
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	2217      	movs	r2, #23
 8000eea:	f005 faf1 	bl	80064d0 <cobs_decode>
    lastStartIndex = datoId + 1; // From now, in any case, datoId are the new lastStartIndex
 8000eee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	809a      	strh	r2, [r3, #4]

    if (res.status != COBS_DECODE_OK) {
 8000ef8:	7c3b      	ldrb	r3, [r7, #16]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d130      	bne.n	8000f60 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x15a>
      continue;
    }
    /// ######################## CRC8 VALIDATION ########################
    if (CRC8_enable()) {
      uint8_t calcCRC = crc8_stream(COBSDecode, res.out_len - 1); // Last byte are the CRC
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f005 fc03 	bl	8006718 <_Z11crc8_streamPht>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (calcCRC != COBSDecode[res.out_len - 1])
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f20:	4413      	add	r3, r2
 8000f22:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000f26:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d11a      	bne.n	8000f64 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x15e>
        continue; // CRC8 Fail!!!
    }
    packRecive.put((pIn *)COBSDecode, res.out_len - 1);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f503 70be 	add.w	r0, r3, #380	; 0x17c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	f000 fa3f 	bl	80013c4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t>
    packTimeRefresh(); // from now, the pack are available to the system
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	330c      	adds	r3, #12
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	4798      	blx	r3
    packFound++;
 8000f52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000f54:	3301      	adds	r3, #1
 8000f56:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000f58:	46ad      	mov	sp, r5
 8000f5a:	e75a      	b.n	8000e12 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0xc>
      continue;
 8000f5c:	bf00      	nop
 8000f5e:	e002      	b.n	8000f66 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x160>
      continue;
 8000f60:	bf00      	nop
 8000f62:	e000      	b.n	8000f66 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0x160>
        continue; // CRC8 Fail!!!
 8000f64:	bf00      	nop
 8000f66:	46ad      	mov	sp, r5
  while (!byteRecive.isEmpty()) {
 8000f68:	e753      	b.n	8000e12 <_ZN3EMP2MPI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE11byteParsingEv+0xc>
  } //  while (!byteRecive->isEmpty())
  return packFound;
 8000f6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3740      	adds	r7, #64	; 0x40
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bdb0      	pop	{r4, r5, r7, pc}

08000f74 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>:
template <class T, uint16_t nElem>
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
}

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpace() const {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  // This 2 block are only to speed-up, formula always function
  if (isFull())
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fa4d 	bl	800141c <_ZNK14CircularBufferIhLt368EE6isFullEv>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x1a>
    return nElem;
 8000f88:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000f8c:	e012      	b.n	8000fb4 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x40>
  if (isEmpty())
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f99a 	bl	80012c8 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x2a>
    return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e00a      	b.n	8000fb4 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv+0x40>

  return countSlotBetween(tail_, head_);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f8b3 1174 	ldrh.w	r1, [r3, #372]	; 0x174
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8000faa:	461a      	mov	r2, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f9b5 	bl	800131c <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>
 8000fb2:	4603      	mov	r3, r0
  // return modSub(head_, tail_, real_nElem); // One Free Slot Logic
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv>:

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpaceLinear() const {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	if(tail_ <= head_)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8b3 2174 	ldrh.w	r2, [r3, #372]	; 0x174
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d808      	bhi.n	8000fe6 <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv+0x2a>
	    return head_ - tail_; // include empty case
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8b3 2172 	ldrh.w	r2, [r3, #370]	; 0x172
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	e006      	b.n	8000ff4 <_ZNK14CircularBufferIhLt368EE15usedSpaceLinearEv+0x38>

    return real_nElem - tail_; // the end of the array are reach before the end of buffered
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8000fec:	f5c3 73b8 	rsb	r3, r3, #368	; 0x170
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b29b      	uxth	r3, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_ZN14CircularBufferIhLt368EE10getTailPtrEv>:
template <class T, uint16_t nElem> inline T *CircularBuffer<T, nElem>::getTailPtr() { return &buf_[tail_]; }
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800100e:	461a      	mov	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_ZNK14CircularBufferIhLt368EE7getTailEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::getTail() const { return tail_; }
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <_ZN14CircularBufferIhLt368EE7tailAddEt>:
  return posOld;
}

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailAdd(uint16_t len) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
  if (usedSpace() < len)
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff93 	bl	8000f74 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	4293      	cmp	r3, r2
 8001056:	bf8c      	ite	hi
 8001058:	2301      	movhi	r3, #1
 800105a:	2300      	movls	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <_ZN14CircularBufferIhLt368EE7tailAddEt+0x2c>
    return -1;
 8001062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001066:	e018      	b.n	800109a <_ZN14CircularBufferIhLt368EE7tailAddEt+0x5e>
  tail_ = (tail_ + len) % real_nElem;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800106e:	461a      	mov	r2, r3
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4413      	add	r3, r2
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <_ZN14CircularBufferIhLt368EE7tailAddEt+0x68>)
 8001076:	fb82 1203 	smull	r1, r2, r2, r3
 800107a:	441a      	add	r2, r3
 800107c:	1211      	asrs	r1, r2, #8
 800107e:	17da      	asrs	r2, r3, #31
 8001080:	1a8a      	subs	r2, r1, r2
 8001082:	f240 1171 	movw	r1, #369	; 0x171
 8001086:	fb01 f202 	mul.w	r2, r1, r2
 800108a:	1a9a      	subs	r2, r3, r2
 800108c:	b292      	uxth	r2, r2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  return tail_;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	b19ab5c5 	.word	0xb19ab5c5

080010a8 <_ZN14CircularBufferIhLt368EE7tailSetEt>:

template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailSet(uint16_t pos) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
  uint16_t posOld = tail_;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 80010ba:	81fb      	strh	r3, [r7, #14]
  tail_ = pos;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
  return posOld;
 80010c4:	89fb      	ldrh	r3, [r7, #14]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::usedSpace() const {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  if (isFull())
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f9c4 	bl	8001468 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x18>
    return nElem;
 80010e6:	2304      	movs	r3, #4
 80010e8:	e012      	b.n	8001110 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x3e>
  if (isEmpty())
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f814 	bl	8001118 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x28>
    return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e00a      	b.n	8001110 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv+0x3e>
  return countSlotBetween(tail_, head_);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001106:	461a      	mov	r2, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f9d1 	bl	80014b0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt>
 800110e:	4603      	mov	r3, r0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isEmpty() const { return head_ == tail_; }
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800112c:	429a      	cmp	r2, r3
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv>:
template <class T, uint16_t nElem> T *CircularBuffer<T, nElem>::getPtr() {
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  if (isEmpty()) {
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffe4 	bl	8001118 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE7isEmptyEv>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv+0x18>
    return nullptr;
 8001156:	2300      	movs	r3, #0
 8001158:	e007      	b.n	800116a <_ZN14CircularBufferI14_packLinux2ArdLt4EE6getPtrEv+0x28>
  auto val = getTailPtr();
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f9c8 	bl	80014f0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE10getTailPtrEv>
 8001160:	60f8      	str	r0, [r7, #12]
  this->tailInc();
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f9d7 	bl	8001516 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailIncEv>
  return val;
 8001168:	68fb      	ldr	r3, [r7, #12]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv>:
template <class T, uint16_t nElem> void CircularBuffer<T, nElem>::memClean() {
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  for (uint16_t i = 0; i < real_nElem; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	81fb      	strh	r3, [r7, #14]
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d80e      	bhi.n	80011a2 <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv+0x30>
    memset(&this->buf_[i], 0, sizeof(T));
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	2216      	movs	r2, #22
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	2216      	movs	r2, #22
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f007 fced 	bl	8008b74 <memset>
  for (uint16_t i = 0; i < real_nElem; i++)
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	81fb      	strh	r3, [r7, #14]
 80011a0:	e7ed      	b.n	800117e <_ZN14CircularBufferI14_packLinux2ArdLt4EE8memCleanEv+0xc>
  reset();
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f9c4 	bl	8001530 <_ZN14CircularBufferI14_packLinux2ArdLt4EE5resetEv>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt>:
uint16_t CircularBuffer<T, nElem>::putArray(T *item, uint16_t nItem, uint16_t bSize) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	460b      	mov	r3, r1
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	80bb      	strh	r3, [r7, #4]
  if (availableSpace() < nItem)
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f837 	bl	800123a <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	bf8c      	ite	hi
 80011d6:	2301      	movhi	r3, #1
 80011d8:	2300      	movls	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x36>
    return -1;
 80011e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e4:	e025      	b.n	8001232 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x82>
  if (bSize > sizeof(T))
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d902      	bls.n	80011f2 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x42>
    return -2;
 80011ec:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80011f0:	e01f      	b.n	8001232 <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x82>
  int ret = head_; // old head
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 80011f8:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < nItem; i++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	429a      	cmp	r2, r3
 8001204:	da13      	bge.n	800122e <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x7e>
    memcpy((void *)&buf_[head_], &item[i], bSize);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1898      	adds	r0, r3, r2
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	4413      	add	r3, r2
 8001218:	88ba      	ldrh	r2, [r7, #4]
 800121a:	4619      	mov	r1, r3
 800121c:	f007 fc9c 	bl	8008b58 <memcpy>
    headInc();
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 f995 	bl	8001550 <_ZN14CircularBufferIhLt368EE7headIncEv>
  for (int i = 0; i < nItem; i++) {
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e7e7      	b.n	80011fe <_ZN14CircularBufferIhLt368EE8putArrayEPhtt+0x4e>
  return ret; // old head
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	b29b      	uxth	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::availableSpace() const {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return nElem - usedSpace();
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fe96 	bl	8000f74 <_ZNK14CircularBufferIhLt368EE9usedSpaceEv>
 8001248:	4603      	mov	r3, r0
 800124a:	f5c3 73b8 	rsb	r3, r3, #368	; 0x170
 800124e:	b29b      	uxth	r3, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZN14CircularBufferIhLt368EE7headAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headAdd(uint16_t len) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
  if (availableSpace() < len)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffe8 	bl	800123a <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	4293      	cmp	r3, r2
 8001272:	bf8c      	ite	hi
 8001274:	2301      	movhi	r3, #1
 8001276:	2300      	movls	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <_ZN14CircularBufferIhLt368EE7headAddEt+0x2c>
    return -1;
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	e01a      	b.n	80012ba <_ZN14CircularBufferIhLt368EE7headAddEt+0x62>
  uint16_t oldHead = head_;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800128a:	81fb      	strh	r3, [r7, #14]
  head_ = (head_ + len) % real_nElem;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 8001292:	461a      	mov	r2, r3
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	4413      	add	r3, r2
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <_ZN14CircularBufferIhLt368EE7headAddEt+0x6c>)
 800129a:	fb82 1203 	smull	r1, r2, r2, r3
 800129e:	441a      	add	r2, r3
 80012a0:	1211      	asrs	r1, r2, #8
 80012a2:	17da      	asrs	r2, r3, #31
 80012a4:	1a8a      	subs	r2, r1, r2
 80012a6:	f240 1171 	movw	r1, #369	; 0x171
 80012aa:	fb01 f202 	mul.w	r2, r1, r2
 80012ae:	1a9a      	subs	r2, r3, r2
 80012b0:	b292      	uxth	r2, r2
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
  return oldHead; // old head
 80012b8:	89fb      	ldrh	r3, [r7, #14]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	b19ab5c5 	.word	0xb19ab5c5

080012c8 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isEmpty() const { return head_ == tail_; }
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8b3 2172 	ldrh.w	r2, [r3, #370]	; 0x172
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 80012dc:	429a      	cmp	r2, r3
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_ZN14CircularBufferIhLt368EE3getEPt>:
template <class T, uint16_t nElem> T CircularBuffer<T, nElem>::get(uint16_t *indexRet) {
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  *indexRet = getTail();
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fe8f 	bl	8001020 <_ZNK14CircularBufferIhLt368EE7getTailEv>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	801a      	strh	r2, [r3, #0]
  return get();
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f92d 	bl	800156a <_ZN14CircularBufferIhLt368EE3getEv>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt>:
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	803b      	strh	r3, [r7, #0]
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
 800132c:	883a      	ldrh	r2, [r7, #0]
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f203 1371 	addw	r3, r3, #369	; 0x171
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <_ZNK14CircularBufferIhLt368EE16countSlotBetweenEtt+0x40>)
 8001338:	fb82 1203 	smull	r1, r2, r2, r3
 800133c:	441a      	add	r2, r3
 800133e:	1211      	asrs	r1, r2, #8
 8001340:	17da      	asrs	r2, r3, #31
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	f240 1171 	movw	r1, #369	; 0x171
 8001348:	fb01 f202 	mul.w	r2, r1, r2
 800134c:	1a9a      	subs	r2, r3, r2
 800134e:	b293      	uxth	r3, r2
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	b19ab5c5 	.word	0xb19ab5c5

08001360 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt>:
void CircularBuffer<T, nElem>::memcpyCb(T *memDestArray, uint16_t localTail, uint16_t len) {
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	460b      	mov	r3, r1
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4613      	mov	r3, r2
 8001374:	80bb      	strh	r3, [r7, #4]
  for (uint16_t i = 0; i < len; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	82fb      	strh	r3, [r7, #22]
 800137a:	8afa      	ldrh	r2, [r7, #22]
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d218      	bcs.n	80013b4 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x54>
    memDestArray[i] = buf_[(localTail + i) % real_nElem];
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	8afb      	ldrh	r3, [r7, #22]
 8001386:	4413      	add	r3, r2
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x60>)
 800138a:	fb82 1203 	smull	r1, r2, r2, r3
 800138e:	441a      	add	r2, r3
 8001390:	1211      	asrs	r1, r2, #8
 8001392:	17da      	asrs	r2, r3, #31
 8001394:	1a8a      	subs	r2, r1, r2
 8001396:	f240 1171 	movw	r1, #369	; 0x171
 800139a:	fb01 f202 	mul.w	r2, r1, r2
 800139e:	1a9a      	subs	r2, r3, r2
 80013a0:	8afb      	ldrh	r3, [r7, #22]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	440b      	add	r3, r1
 80013a6:	68f9      	ldr	r1, [r7, #12]
 80013a8:	5c8a      	ldrb	r2, [r1, r2]
 80013aa:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < len; i++) {
 80013ac:	8afb      	ldrh	r3, [r7, #22]
 80013ae:	3301      	adds	r3, #1
 80013b0:	82fb      	strh	r3, [r7, #22]
 80013b2:	e7e2      	b.n	800137a <_ZN14CircularBufferIhLt368EE8memcpyCbEPhtt+0x1a>
}
 80013b4:	bf00      	nop
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	b19ab5c5 	.word	0xb19ab5c5

080013c4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::put(T *item, uint16_t bSize) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4613      	mov	r3, r2
 80013d0:	80fb      	strh	r3, [r7, #6]
  if (isFull())
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f848 	bl	8001468 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x20>
    return -1;
 80013de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e2:	e017      	b.n	8001414 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x50>
  if (bSize > sizeof(T))
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2b16      	cmp	r3, #22
 80013e8:	d902      	bls.n	80013f0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x2c>
    return -2;
 80013ea:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80013ee:	e011      	b.n	8001414 <_ZN14CircularBufferI14_packLinux2ArdLt4EE3putEPS0_t+0x50>
  memcpy((void *)&buf_[head_], item, bSize);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80013f6:	461a      	mov	r2, r3
 80013f8:	2316      	movs	r3, #22
 80013fa:	fb03 f302 	mul.w	r3, r3, r2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	88fa      	ldrh	r2, [r7, #6]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	4618      	mov	r0, r3
 8001408:	f007 fba6 	bl	8008b58 <memcpy>
  return headInc(); // old head
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f8c5 	bl	800159c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headIncEv>
 8001412:	4603      	mov	r3, r0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZNK14CircularBufferIhLt368EE6isFullEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isFull() const {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return head_ == modSub(tail_, 1, real_nElem);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800142a:	4618      	mov	r0, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8001432:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <_ZNK14CircularBufferIhLt368EE6isFullEv+0x48>)
 8001438:	fb82 1203 	smull	r1, r2, r2, r3
 800143c:	441a      	add	r2, r3
 800143e:	1211      	asrs	r1, r2, #8
 8001440:	17da      	asrs	r2, r3, #31
 8001442:	1a8a      	subs	r2, r1, r2
 8001444:	f240 1171 	movw	r1, #369	; 0x171
 8001448:	fb01 f202 	mul.w	r2, r1, r2
 800144c:	1a9a      	subs	r2, r3, r2
 800144e:	4290      	cmp	r0, r2
 8001450:	bf0c      	ite	eq
 8001452:	2301      	moveq	r3, #1
 8001454:	2300      	movne	r3, #0
 8001456:	b2db      	uxtb	r3, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	b19ab5c5 	.word	0xb19ab5c5

08001468 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv>:
template <class T, uint16_t nElem> inline bool CircularBuffer<T, nElem>::isFull() const {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return head_ == modSub(tail_, 1, real_nElem);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001476:	4618      	mov	r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800147e:	1d19      	adds	r1, r3, #4
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <_ZNK14CircularBufferI14_packLinux2ArdLt4EE6isFullEv+0x44>)
 8001482:	fb83 2301 	smull	r2, r3, r3, r1
 8001486:	105a      	asrs	r2, r3, #1
 8001488:	17cb      	asrs	r3, r1, #31
 800148a:	1ad2      	subs	r2, r2, r3
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	1aca      	subs	r2, r1, r3
 8001494:	4290      	cmp	r0, r2
 8001496:	bf0c      	ite	eq
 8001498:	2301      	moveq	r3, #1
 800149a:	2300      	movne	r3, #0
 800149c:	b2db      	uxtb	r3, r3
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	66666667 	.word	0x66666667

080014b0 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt>:
inline uint16_t CircularBuffer<T, nElem>::countSlotBetween(uint16_t localTail, uint16_t localHead) const {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	803b      	strh	r3, [r7, #0]
  return modSub(localHead, localTail, real_nElem); // One Free Slot Logic
 80014c0:	883a      	ldrh	r2, [r7, #0]
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	1d5a      	adds	r2, r3, #5
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_ZNK14CircularBufferI14_packLinux2ArdLt4EE16countSlotBetweenEtt+0x3c>)
 80014ca:	fb83 1302 	smull	r1, r3, r3, r2
 80014ce:	1059      	asrs	r1, r3, #1
 80014d0:	17d3      	asrs	r3, r2, #31
 80014d2:	1ac9      	subs	r1, r1, r3
 80014d4:	460b      	mov	r3, r1
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	1ad1      	subs	r1, r2, r3
 80014dc:	b28b      	uxth	r3, r1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	66666667 	.word	0x66666667

080014f0 <_ZN14CircularBufferI14_packLinux2ArdLt4EE10getTailPtrEv>:
template <class T, uint16_t nElem> inline T *CircularBuffer<T, nElem>::getTailPtr() { return &buf_[tail_]; }
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80014fe:	461a      	mov	r2, r3
 8001500:	2316      	movs	r3, #22
 8001502:	fb03 f302 	mul.w	r3, r3, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	2101      	movs	r1, #1
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f849 	bl	80015b8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt>
 8001526:	4603      	mov	r3, r0
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_ZN14CircularBufferI14_packLinux2ArdLt4EE5resetEv>:
template <class T, uint16_t nElem> inline void CircularBuffer<T, nElem>::reset() { head_ = tail_; }
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_ZN14CircularBufferIhLt368EE7headIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headInc() {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return headAdd(1); // old head
 8001558:	2101      	movs	r1, #1
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fe7c 	bl	8001258 <_ZN14CircularBufferIhLt368EE7headAddEt>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_ZN14CircularBufferIhLt368EE3getEv>:
template <class T, uint16_t nElem> T CircularBuffer<T, nElem>::get() {
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  if (isEmpty()) {
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fea8 	bl	80012c8 <_ZNK14CircularBufferIhLt368EE7isEmptyEv>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <_ZN14CircularBufferIhLt368EE3getEv+0x18>
    return T();
 800157e:	2300      	movs	r3, #0
 8001580:	e008      	b.n	8001594 <_ZN14CircularBufferIhLt368EE3getEv+0x2a>
  auto val = readTail();
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f84c 	bl	8001620 <_ZNK14CircularBufferIhLt368EE8readTailEv>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
  this->tailInc();
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f857 	bl	8001640 <_ZN14CircularBufferIhLt368EE7tailIncEv>
  return val;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headInc() {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return headAdd(1); // old head
 80015a4:	2101      	movs	r1, #1
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f858 	bl	800165c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailAdd(uint16_t len) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  if (usedSpace() < len)
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fd84 	bl	80010d2 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	4293      	cmp	r3, r2
 80015d2:	bf8c      	ite	hi
 80015d4:	2301      	movhi	r3, #1
 80015d6:	2300      	movls	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x2c>
    return -1;
 80015de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e2:	e016      	b.n	8001612 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x5a>
  tail_ = (tail_ + len) % real_nElem;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80015ea:	461a      	mov	r2, r3
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	441a      	add	r2, r3
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7tailAddEt+0x64>)
 80015f2:	fb83 1302 	smull	r1, r3, r3, r2
 80015f6:	1059      	asrs	r1, r3, #1
 80015f8:	17d3      	asrs	r3, r2, #31
 80015fa:	1ac9      	subs	r1, r1, r3
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	1ad1      	subs	r1, r2, r3
 8001604:	b28a      	uxth	r2, r1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  return tail_;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	66666667 	.word	0x66666667

08001620 <_ZNK14CircularBufferIhLt368EE8readTailEv>:
template <class T, uint16_t nElem> inline T CircularBuffer<T, nElem>::readTail() const { return this->buf_[tail_]; }
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	5c9b      	ldrb	r3, [r3, r2]
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_ZN14CircularBufferIhLt368EE7tailIncEv>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::tailInc() { return tailAdd(1); }
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	2101      	movs	r1, #1
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fcf6 	bl	800103c <_ZN14CircularBufferIhLt368EE7tailAddEt>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt>:
template <class T, uint16_t nElem> inline uint16_t CircularBuffer<T, nElem>::headAdd(uint16_t len) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
  if (availableSpace() < len)
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f82d 	bl	80016c8 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE14availableSpaceEv>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	4293      	cmp	r3, r2
 8001676:	bf8c      	ite	hi
 8001678:	2301      	movhi	r3, #1
 800167a:	2300      	movls	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x2c>
    return -1;
 8001682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001686:	e018      	b.n	80016ba <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x5e>
  uint16_t oldHead = head_;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800168e:	81fb      	strh	r3, [r7, #14]
  head_ = (head_ + len) % real_nElem;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001696:	461a      	mov	r2, r3
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	441a      	add	r2, r3
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <_ZN14CircularBufferI14_packLinux2ArdLt4EE7headAddEt+0x68>)
 800169e:	fb83 1302 	smull	r1, r3, r3, r2
 80016a2:	1059      	asrs	r1, r3, #1
 80016a4:	17d3      	asrs	r3, r2, #31
 80016a6:	1ac9      	subs	r1, r1, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	1ad1      	subs	r1, r2, r3
 80016b0:	b28a      	uxth	r2, r1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  return oldHead; // old head
 80016b8:	89fb      	ldrh	r3, [r7, #14]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	66666667 	.word	0x66666667

080016c8 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE14availableSpaceEv>:
template <class T, uint16_t nElem> uint16_t CircularBuffer<T, nElem>::availableSpace() const {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  return nElem - usedSpace();
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fcfe 	bl	80010d2 <_ZNK14CircularBufferI14_packLinux2ArdLt4EE9usedSpaceEv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f1c3 0304 	rsb	r3, r3, #4
 80016dc:	b29b      	uxth	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fe:	4293      	cmp	r3, r2
 8001700:	d102      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x20>
MP_ST_usb<packLinux2Ard, packArd2Linux, STM32MP_templateDefault()> MP_St;
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001704:	f7ff f948 	bl	8000998 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EEC1Ev>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d107      	bne.n	800171e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800171a:	f000 f85b 	bl	80017d4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EED1Ev>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200002f8 	.word	0x200002f8

0800172c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht>:

templatePar()int MP_ST_usb<templateParCall()>::packSend_Concrete(
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
		uint8_t *stream, uint16_t len) {
	//return 0;
	if (byteSend.availableSpace() < len){
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fd7a 	bl	800123a <_ZNK14CircularBufferIhLt368EE14availableSpaceEv>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4293      	cmp	r3, r2
 800174e:	bf8c      	ite	hi
 8001750:	2301      	movhi	r3, #1
 8001752:	2300      	movls	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x34>
		return -2;
 800175a:	f06f 0301 	mvn.w	r3, #1
 800175e:	e018      	b.n	8001792 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x66>
	}
	byteSend.putArray(stream, len);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8001766:	88fa      	ldrh	r2, [r7, #6]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fb39 	bl	8000de2 <_ZN14CircularBufferIhLt368EE8putArrayEPht>
	if (isrSendNotify(nullptr, nullptr, 0) == USBD_FAIL)
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff f9d1 	bl	8000b1c <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE13isrSendNotifyEPhPmh>
 800177a:	4603      	mov	r3, r0
 800177c:	2b03      	cmp	r3, #3
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x64>
		return -3;
 800178a:	f06f 0302 	mvn.w	r3, #2
 800178e:	e000      	b.n	8001792 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE17packSend_ConcreteEPht+0x66>
	return 0;
 8001790:	2300      	movs	r3, #0
		return -3;
	}

	return 0;

}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE15packTimeRefreshEv>:

templatePar()void MP_ST_usb<templateParCall()>::packTimeRefresh() {
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
	lastDecodeTime = HAL_GetTick();
 80017a2:	f000 fa4f 	bl	8001c44 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EE15lastPackElapsedEv>:

templatePar()unsigned long MP_ST_usb<templateParCall()>::lastPackElapsed() {
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - lastDecodeTime;
 80017be:	f000 fa41 	bl	8001c44 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80017ca:	1ad3      	subs	r3, r2, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EED1Ev>:
templatePar() MP_ST_usb<templateParCall()>::~MP_ST_usb() {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
}
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <_ZN3EMP9MP_ST_usbI14_packLinux2Ard14_packArd2LinuxLb1ELt16ELt4EED1Ev+0x1c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	08008c80 	.word	0x08008c80

080017f4 <_GLOBAL__sub_I_hi2c1>:
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff ff73 	bl	80016e8 <_Z41__static_initialization_and_destruction_0ii>
 8001802:	bd80      	pop	{r7, pc}

08001804 <_GLOBAL__sub_D_hi2c1>:
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
 8001808:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff ff6b 	bl	80016e8 <_Z41__static_initialization_and_destruction_0ii>
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_MspInit+0x4c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x4c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001852:	2007      	movs	r0, #7
 8001854:	f000 faf6 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_I2C_MspInit+0x84>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d12c      	bne.n	80018e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_I2C_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_I2C_MspInit+0x88>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_I2C_MspInit+0x88>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b4:	2304      	movs	r3, #4
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	480c      	ldr	r0, [pc, #48]	; (80018f0 <HAL_I2C_MspInit+0x8c>)
 80018c0:	f000 fb02 	bl	8001ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_I2C_MspInit+0x88>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_I2C_MspInit+0x88>)
 80018ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_I2C_MspInit+0x88>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40005400 	.word	0x40005400
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020400 	.word	0x40020400

080018f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <HAL_I2S_MspInit+0xc0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d14a      	bne.n	80019ac <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 8001920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_I2S_MspInit+0xc4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800196a:	2310      	movs	r3, #16
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800197a:	2306      	movs	r3, #6
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <HAL_I2S_MspInit+0xc8>)
 8001986:	f000 fa9f 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800198a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800199c:	2306      	movs	r3, #6
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <HAL_I2S_MspInit+0xcc>)
 80019a8:	f000 fa8e 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40003c00 	.word	0x40003c00
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020800 	.word	0x40020800

080019c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_SPI_MspInit+0x84>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12b      	bne.n	8001a3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a1e:	23e0      	movs	r3, #224	; 0xe0
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_SPI_MspInit+0x8c>)
 8001a3a:	f000 fa45 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40013000 	.word	0x40013000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa0:	f000 f8bc 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <OTG_FS_IRQHandler+0x10>)
 8001aae:	f001 faf5 	bl	800309c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20001d5c 	.word	0x20001d5c

08001abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
	return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_kill>:

int _kill(int pid, int sig)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ad6:	f007 f815 	bl	8008b04 <__errno>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2216      	movs	r2, #22
 8001ade:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_exit>:

void _exit (int status)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffe7 	bl	8001acc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001afe:	e7fe      	b.n	8001afe <_exit+0x12>

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b4e:	f7ff ffd7 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f006 ffdd 	bl	8008b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7fe fcb3 	bl	80004c0 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b68:	08008ce0 	.word	0x08008ce0
  ldr r2, =_sbss
 8001b6c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001b70:	20002168 	.word	0x20002168

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f94f 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fe32 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f967 	bl	8001eae <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf8:	f000 f92f 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000888 	.word	0x20000888

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000888 	.word	0x20000888

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e16b      	b.n	80021bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f040 815a 	bne.w	80021b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d005      	beq.n	8001f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d130      	bne.n	8001f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 0201 	and.w	r2, r3, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d017      	beq.n	8001fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d123      	bne.n	800200c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80b4 	beq.w	80021b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b60      	ldr	r3, [pc, #384]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206a:	4a5b      	ldr	r2, [pc, #364]	; (80021d8 <HAL_GPIO_Init+0x310>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_GPIO_Init+0x314>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <HAL_GPIO_Init+0x226>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a51      	ldr	r2, [pc, #324]	; (80021e0 <HAL_GPIO_Init+0x318>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d025      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_GPIO_Init+0x31c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01f      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4f      	ldr	r2, [pc, #316]	; (80021e8 <HAL_GPIO_Init+0x320>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4e      	ldr	r2, [pc, #312]	; (80021ec <HAL_GPIO_Init+0x324>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x216>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4d      	ldr	r2, [pc, #308]	; (80021f0 <HAL_GPIO_Init+0x328>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00d      	beq.n	80020da <HAL_GPIO_Init+0x212>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <HAL_GPIO_Init+0x32c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <HAL_GPIO_Init+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_GPIO_Init+0x330>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_GPIO_Init+0x20a>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00e      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d2:	2308      	movs	r3, #8
 80020d4:	e00c      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00a      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020da:	2305      	movs	r3, #5
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020de:	2304      	movs	r3, #4
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	; (80021d8 <HAL_GPIO_Init+0x310>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002132:	4a32      	ldr	r2, [pc, #200]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_GPIO_Init+0x334>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_GPIO_Init+0x334>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_GPIO_Init+0x334>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_GPIO_Init+0x334>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f ae90 	bls.w	8001ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12b      	b.n	800249e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fb02 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002298:	f002 fb80 	bl	800499c <HAL_RCC_GetPCLK1Freq>
 800229c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a81      	ldr	r2, [pc, #516]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d807      	bhi.n	80022b8 <HAL_I2C_Init+0x84>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a80      	ldr	r2, [pc, #512]	; (80024ac <HAL_I2C_Init+0x278>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e006      	b.n	80022c6 <HAL_I2C_Init+0x92>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a7d      	ldr	r2, [pc, #500]	; (80024b0 <HAL_I2C_Init+0x27c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e7      	b.n	800249e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a78      	ldr	r2, [pc, #480]	; (80024b4 <HAL_I2C_Init+0x280>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d802      	bhi.n	8002308 <HAL_I2C_Init+0xd4>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	e009      	b.n	800231c <HAL_I2C_Init+0xe8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_I2C_Init+0x284>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	3301      	adds	r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	495c      	ldr	r1, [pc, #368]	; (80024a8 <HAL_I2C_Init+0x274>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d819      	bhi.n	8002370 <HAL_I2C_Init+0x13c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fbb1 f3f3 	udiv	r3, r1, r3
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_I2C_Init+0x138>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e59      	subs	r1, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	e051      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 800236c:	2304      	movs	r3, #4
 800236e:	e04f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <HAL_I2C_Init+0x168>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e012      	b.n	80023c2 <HAL_I2C_Init+0x18e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x196>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e022      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <HAL_I2C_Init+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e58      	subs	r0, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6911      	ldr	r1, [r2, #16]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000186a0 	.word	0x000186a0
 80024ac:	001e847f 	.word	0x001e847f
 80024b0:	003d08ff 	.word	0x003d08ff
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e128      	b.n	8002720 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a90      	ldr	r2, [pc, #576]	; (8002728 <HAL_I2S_Init+0x26c>)
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fa03 	bl	80018f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002504:	f023 030f 	bic.w	r3, r3, #15
 8002508:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2202      	movs	r2, #2
 8002510:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d060      	beq.n	80025dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002522:	2310      	movs	r3, #16
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e001      	b.n	800252c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b20      	cmp	r3, #32
 8002532:	d802      	bhi.n	800253a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800253a:	2001      	movs	r0, #1
 800253c:	f002 fb24 	bl	8004b88 <HAL_RCCEx_GetPeriphCLKFreq>
 8002540:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254a:	d125      	bne.n	8002598 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	fbb2 f2f3 	udiv	r2, r2, r3
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	3305      	adds	r3, #5
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e01f      	b.n	80025b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	3305      	adds	r3, #5
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e00e      	b.n	80025b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	3305      	adds	r3, #5
 80025b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4a5c      	ldr	r2, [pc, #368]	; (800272c <HAL_I2S_Init+0x270>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	e003      	b.n	80025e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025dc:	2302      	movs	r3, #2
 80025de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d902      	bls.n	80025f0 <HAL_I2S_Init+0x134>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	2bff      	cmp	r3, #255	; 0xff
 80025ee:	d907      	bls.n	8002600 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	f043 0210 	orr.w	r2, r3, #16
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e08f      	b.n	8002720 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	ea42 0103 	orr.w	r1, r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	430a      	orrs	r2, r1
 8002612:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800261e:	f023 030f 	bic.w	r3, r3, #15
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6851      	ldr	r1, [r2, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	4311      	orrs	r1, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68d2      	ldr	r2, [r2, #12]
 8002630:	4311      	orrs	r1, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6992      	ldr	r2, [r2, #24]
 8002636:	430a      	orrs	r2, r1
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002642:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d161      	bne.n	8002710 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_I2S_Init+0x274>)
 8002650:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a37      	ldr	r2, [pc, #220]	; (8002734 <HAL_I2S_Init+0x278>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_I2S_Init+0x1a4>
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_I2S_Init+0x27c>)
 800265e:	e001      	b.n	8002664 <HAL_I2S_Init+0x1a8>
 8002660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4932      	ldr	r1, [pc, #200]	; (8002734 <HAL_I2S_Init+0x278>)
 800266c:	428a      	cmp	r2, r1
 800266e:	d101      	bne.n	8002674 <HAL_I2S_Init+0x1b8>
 8002670:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_I2S_Init+0x27c>)
 8002672:	e001      	b.n	8002678 <HAL_I2S_Init+0x1bc>
 8002674:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002678:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800267c:	f023 030f 	bic.w	r3, r3, #15
 8002680:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <HAL_I2S_Init+0x278>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_I2S_Init+0x1d4>
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <HAL_I2S_Init+0x27c>)
 800268e:	e001      	b.n	8002694 <HAL_I2S_Init+0x1d8>
 8002690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002694:	2202      	movs	r2, #2
 8002696:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_I2S_Init+0x278>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_I2S_Init+0x1ea>
 80026a2:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_I2S_Init+0x27c>)
 80026a4:	e001      	b.n	80026aa <HAL_I2S_Init+0x1ee>
 80026a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b6:	d003      	beq.n	80026c0 <HAL_I2S_Init+0x204>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	e001      	b.n	80026cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026ea:	4313      	orrs	r3, r2
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <HAL_I2S_Init+0x278>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_I2S_Init+0x24c>
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_I2S_Init+0x27c>)
 8002706:	e001      	b.n	800270c <HAL_I2S_Init+0x250>
 8002708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800270c:	897a      	ldrh	r2, [r7, #10]
 800270e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	08002833 	.word	0x08002833
 800272c:	cccccccd 	.word	0xcccccccd
 8002730:	08002949 	.word	0x08002949
 8002734:	40003800 	.word	0x40003800
 8002738:	40003400 	.word	0x40003400

0800273c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10e      	bne.n	80027cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffb8 	bl	800273c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	b292      	uxth	r2, r2
 80027e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800281a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff93 	bl	8002750 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b04      	cmp	r3, #4
 800284c:	d13a      	bne.n	80028c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d109      	bne.n	800286c <I2S_IRQHandler+0x3a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d102      	bne.n	800286c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffb4 	bl	80027d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d126      	bne.n	80028c4 <I2S_IRQHandler+0x92>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d11f      	bne.n	80028c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002892:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff50 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d136      	bne.n	800293e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d109      	bne.n	80028ee <I2S_IRQHandler+0xbc>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d102      	bne.n	80028ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff45 	bl	8002778 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d122      	bne.n	800293e <I2S_IRQHandler+0x10c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d11b      	bne.n	800293e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002914:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff13 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4aa2      	ldr	r2, [pc, #648]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002962:	4ba2      	ldr	r3, [pc, #648]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002964:	e001      	b.n	800296a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002966:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a9b      	ldr	r2, [pc, #620]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002980:	4b9a      	ldr	r3, [pc, #616]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002982:	e001      	b.n	8002988 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002994:	d004      	beq.n	80029a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 8099 	bne.w	8002ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f925 	bl	8002c04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9c8 	bl	8002d64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d13a      	bne.n	8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d035      	beq.n	8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7e      	ldr	r2, [pc, #504]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80029f2:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029f4:	e001      	b.n	80029fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80029f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4979      	ldr	r1, [pc, #484]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a02:	428b      	cmp	r3, r1
 8002a04:	d101      	bne.n	8002a0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a06:	4b79      	ldr	r3, [pc, #484]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a08:	e001      	b.n	8002a0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fe88 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	f040 80be 	bne.w	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80b8 	beq.w	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a59      	ldr	r2, [pc, #356]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a86:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a88:	e001      	b.n	8002a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4954      	ldr	r1, [pc, #336]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a96:	428b      	cmp	r3, r1
 8002a98:	d101      	bne.n	8002a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a9c:	e001      	b.n	8002aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aa6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fe4a 	bl	8002764 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ad0:	e084      	b.n	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d107      	bne.n	8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8be 	bl	8002c68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f8fd 	bl	8002d00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d12f      	bne.n	8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02a      	beq.n	8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b36:	e001      	b.n	8002b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4929      	ldr	r1, [pc, #164]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d101      	bne.n	8002b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b48:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b4a:	e001      	b.n	8002b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f043 0202 	orr.w	r2, r3, #2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fdfa 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d131      	bne.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02c      	beq.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b90:	e001      	b.n	8002b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4912      	ldr	r1, [pc, #72]	; (8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b9e:	428b      	cmp	r3, r1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ba4:	e001      	b.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002baa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bbe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fdc5 	bl	8002764 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bda:	e000      	b.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bdc:	bf00      	nop
}
 8002bde:	bf00      	nop
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40003800 	.word	0x40003800
 8002bec:	40003400 	.word	0x40003400

08002bf0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c99      	adds	r1, r3, #2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6251      	str	r1, [r2, #36]	; 0x24
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d113      	bne.n	8002c5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffc9 	bl	8002bf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c99      	adds	r1, r3, #2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6251      	str	r1, [r2, #36]	; 0x24
 8002c7a:	8819      	ldrh	r1, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <I2SEx_TxISR_I2SExt+0x22>
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <I2SEx_TxISR_I2SExt+0x94>)
 8002c88:	e001      	b.n	8002c8e <I2SEx_TxISR_I2SExt+0x26>
 8002c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c8e:	460a      	mov	r2, r1
 8002c90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d121      	bne.n	8002cee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <I2SEx_TxISR_I2SExt+0x50>
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <I2SEx_TxISR_I2SExt+0x94>)
 8002cb6:	e001      	b.n	8002cbc <I2SEx_TxISR_I2SExt+0x54>
 8002cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	490d      	ldr	r1, [pc, #52]	; (8002cf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	d101      	bne.n	8002ccc <I2SEx_TxISR_I2SExt+0x64>
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <I2SEx_TxISR_I2SExt+0x94>)
 8002cca:	e001      	b.n	8002cd0 <I2SEx_TxISR_I2SExt+0x68>
 8002ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff81 	bl	8002bf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40003800 	.word	0x40003800
 8002cfc:	40003400 	.word	0x40003400

08002d00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68d8      	ldr	r0, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	1c99      	adds	r1, r3, #2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d18:	b282      	uxth	r2, r0
 8002d1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d113      	bne.n	8002d5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff4a 	bl	8002bf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <I2SEx_RxISR_I2SExt+0x90>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <I2SEx_RxISR_I2SExt+0x16>
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <I2SEx_RxISR_I2SExt+0x94>)
 8002d78:	e001      	b.n	8002d7e <I2SEx_RxISR_I2SExt+0x1a>
 8002d7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7e:	68d8      	ldr	r0, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	1c99      	adds	r1, r3, #2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d8a:	b282      	uxth	r2, r0
 8002d8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d121      	bne.n	8002dea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <I2SEx_RxISR_I2SExt+0x90>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <I2SEx_RxISR_I2SExt+0x50>
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <I2SEx_RxISR_I2SExt+0x94>)
 8002db2:	e001      	b.n	8002db8 <I2SEx_RxISR_I2SExt+0x54>
 8002db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <I2SEx_RxISR_I2SExt+0x90>)
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	d101      	bne.n	8002dc8 <I2SEx_RxISR_I2SExt+0x64>
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <I2SEx_RxISR_I2SExt+0x94>)
 8002dc6:	e001      	b.n	8002dcc <I2SEx_RxISR_I2SExt+0x68>
 8002dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dd0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff03 	bl	8002bf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40003800 	.word	0x40003800
 8002df8:	40003400 	.word	0x40003400

08002dfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	b08f      	sub	sp, #60	; 0x3c
 8002e00:	af0a      	add	r7, sp, #40	; 0x28
 8002e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e10f      	b.n	800302e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f005 fb2d 	bl	8008488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 f896 	bl	8004f7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	687e      	ldr	r6, [r7, #4]
 8002e5a:	466d      	mov	r5, sp
 8002e5c:	f106 0410 	add.w	r4, r6, #16
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e70:	1d33      	adds	r3, r6, #4
 8002e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e74:	6838      	ldr	r0, [r7, #0]
 8002e76:	f001 ff6e 	bl	8004d56 <USB_CoreInit>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0d0      	b.n	800302e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 f884 	bl	8004fa0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e04a      	b.n	8002f34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	333d      	adds	r3, #61	; 0x3d
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	333c      	adds	r3, #60	; 0x3c
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	b298      	uxth	r0, r3
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3342      	adds	r3, #66	; 0x42
 8002eda:	4602      	mov	r2, r0
 8002edc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	333f      	adds	r3, #63	; 0x3f
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3344      	adds	r3, #68	; 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3348      	adds	r3, #72	; 0x48
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3350      	adds	r3, #80	; 0x50
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	3301      	adds	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3af      	bcc.n	8002e9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e044      	b.n	8002fce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3b5      	bcc.n	8002f44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	687e      	ldr	r6, [r7, #4]
 8002fe0:	466d      	mov	r5, sp
 8002fe2:	f106 0410 	add.w	r4, r6, #16
 8002fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ff6:	1d33      	adds	r3, r6, #4
 8002ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffa:	6838      	ldr	r0, [r7, #0]
 8002ffc:	f001 fffa 	bl	8004ff4 <USB_DevInit>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e00d      	b.n	800302e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f003 f842 	bl	80060b0 <USB_DevDisconnect>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003036 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_PCD_Start+0x1c>
 800304e:	2302      	movs	r3, #2
 8003050:	e020      	b.n	8003094 <HAL_PCD_Start+0x5e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	2b01      	cmp	r3, #1
 8003060:	d109      	bne.n	8003076 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003066:	2b01      	cmp	r3, #1
 8003068:	d005      	beq.n	8003076 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f001 ff6e 	bl	8004f5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fff2 	bl	800606e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b08d      	sub	sp, #52	; 0x34
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 f8b0 	bl	8006218 <USB_GetMode>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 839d 	bne.w	80037fa <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 f814 	bl	80060f2 <USB_ReadInterrupts>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8393 	beq.w	80037f8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 f80b 	bl	80060f2 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d107      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f002 0202 	and.w	r2, r2, #2
 80030f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fff9 	bl	80060f2 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b10      	cmp	r3, #16
 8003108:	d161      	bne.n	80031ce <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0210 	bic.w	r2, r2, #16
 8003118:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	3304      	adds	r3, #4
 8003138:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	0c5b      	lsrs	r3, r3, #17
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	2b02      	cmp	r3, #2
 8003144:	d124      	bne.n	8003190 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d035      	beq.n	80031be <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800315c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003160:	b29b      	uxth	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	6a38      	ldr	r0, [r7, #32]
 8003166:	f002 fe5f 	bl	8005e28 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003176:	441a      	add	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003188:	441a      	add	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e016      	b.n	80031be <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	0c5b      	lsrs	r3, r3, #17
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	2b06      	cmp	r3, #6
 800319a:	d110      	bne.n	80031be <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031a2:	2208      	movs	r2, #8
 80031a4:	4619      	mov	r1, r3
 80031a6:	6a38      	ldr	r0, [r7, #32]
 80031a8:	f002 fe3e 	bl	8005e28 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b8:	441a      	add	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0210 	orr.w	r2, r2, #16
 80031cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 ff8d 	bl	80060f2 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e2:	d16e      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 ff93 	bl	8006118 <USB_ReadDevAllOutEpInterrupt>
 80031f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031f4:	e062      	b.n	80032bc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d057      	beq.n	80032b0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f002 ffb8 	bl	8006180 <USB_ReadDevOutEPInterrupt>
 8003210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00c      	beq.n	8003236 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800322e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fdb1 	bl	8003d98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324c:	461a      	mov	r2, r3
 800324e:	2308      	movs	r3, #8
 8003250:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 feab 	bl	8003fb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003270:	461a      	mov	r2, r3
 8003272:	2310      	movs	r3, #16
 8003274:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	2320      	movs	r3, #32
 8003290:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	3301      	adds	r3, #1
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d199      	bne.n	80031f6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 ff13 	bl	80060f2 <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032d6:	f040 80c0 	bne.w	800345a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 ff34 	bl	800614c <USB_ReadDevAllInEpInterrupt>
 80032e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032ea:	e0b2      	b.n	8003452 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a7 	beq.w	8003446 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f002 ff5a 	bl	80061bc <USB_ReadDevInEPInterrupt>
 8003308:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d057      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	2201      	movs	r2, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43db      	mvns	r3, r3
 800332e:	69f9      	ldr	r1, [r7, #28]
 8003330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003334:	4013      	ands	r3, r2
 8003336:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	461a      	mov	r2, r3
 8003346:	2301      	movs	r3, #1
 8003348:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d132      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3348      	adds	r3, #72	; 0x48
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4403      	add	r3, r0
 8003372:	3344      	adds	r3, #68	; 0x44
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4419      	add	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4403      	add	r3, r0
 8003386:	3348      	adds	r3, #72	; 0x48
 8003388:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x31c>
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3350      	adds	r3, #80	; 0x50
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033b0:	461a      	mov	r2, r3
 80033b2:	2101      	movs	r1, #1
 80033b4:	f002 ff62 	bl	800627c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f005 f8f1 	bl	80085a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	461a      	mov	r2, r3
 80033dc:	2308      	movs	r3, #8
 80033de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f6:	461a      	mov	r2, r3
 80033f8:	2310      	movs	r3, #16
 80033fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003412:	461a      	mov	r2, r3
 8003414:	2340      	movs	r3, #64	; 0x40
 8003416:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342e:	461a      	mov	r2, r3
 8003430:	2302      	movs	r3, #2
 8003432:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800343e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fc1b 	bl	8003c7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	3301      	adds	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	f47f af49 	bne.w	80032ec <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f002 fe47 	bl	80060f2 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800346a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346e:	d122      	bne.n	80034b6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800348a:	2b01      	cmp	r3, #1
 800348c:	d108      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003496:	2100      	movs	r1, #0
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fe27 	bl	80040ec <HAL_PCDEx_LPM_Callback>
 800349e:	e002      	b.n	80034a6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f005 f8f7 	bl	8008694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fe19 	bl	80060f2 <USB_ReadInterrupts>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ca:	d112      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f005 f8b3 	bl	8008648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034f0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 fdfb 	bl	80060f2 <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	f040 80c7 	bne.w	8003698 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2110      	movs	r1, #16
 8003524:	4618      	mov	r0, r3
 8003526:	f001 fec9 	bl	80052bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352e:	e056      	b.n	80035de <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	461a      	mov	r2, r3
 800353e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003542:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003554:	0151      	lsls	r1, r2, #5
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	440a      	add	r2, r1
 800355a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003562:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003582:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003596:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	3301      	adds	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d3a3      	bcc.n	8003530 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d016      	beq.n	8003632 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003614:	f043 030b 	orr.w	r3, r3, #11
 8003618:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800362a:	f043 030b 	orr.w	r3, r3, #11
 800362e:	6453      	str	r3, [r2, #68]	; 0x44
 8003630:	e015      	b.n	800365e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003644:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003648:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003658:	f043 030b 	orr.w	r3, r3, #11
 800365c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003670:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003682:	461a      	mov	r2, r3
 8003684:	f002 fdfa 	bl	800627c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fd28 	bl	80060f2 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ac:	d124      	bne.n	80036f8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f002 fdbe 	bl	8006234 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 fe5e 	bl	800537e <USB_GetDevSpeed>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681c      	ldr	r4, [r3, #0]
 80036ce:	f001 f959 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80036d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	4620      	mov	r0, r4
 80036de:	f001 fb9b 	bl	8004e18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f004 ff87 	bl	80085f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fcf8 	bl	80060f2 <USB_ReadInterrupts>
 8003702:	4603      	mov	r3, r0
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d10a      	bne.n	8003722 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f004 ff64 	bl	80085da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f002 0208 	and.w	r2, r2, #8
 8003720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f002 fce3 	bl	80060f2 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003736:	d10f      	bne.n	8003758 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	b2db      	uxtb	r3, r3
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f004 ffc6 	bl	80086d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f002 fcc8 	bl	80060f2 <USB_ReadInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800376c:	d10f      	bne.n	800378e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	b2db      	uxtb	r3, r3
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f004 ff99 	bl	80086b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800378c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f002 fcad 	bl	80060f2 <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f004 ffa7 	bl	80086f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 fc97 	bl	80060f2 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d115      	bne.n	80037fa <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f004 ff97 	bl	8008714 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	e000      	b.n	80037fa <HAL_PCD_IRQHandler+0x75e>
      return;
 80037f8:	bf00      	nop
    }
  }
}
 80037fa:	3734      	adds	r7, #52	; 0x34
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}

08003800 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_PCD_SetAddress+0x1a>
 8003816:	2302      	movs	r3, #2
 8003818:	e013      	b.n	8003842 <HAL_PCD_SetAddress+0x42>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f002 fbf5 	bl	8006022 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	4608      	mov	r0, r1
 8003854:	4611      	mov	r1, r2
 8003856:	461a      	mov	r2, r3
 8003858:	4603      	mov	r3, r0
 800385a:	70fb      	strb	r3, [r7, #3]
 800385c:	460b      	mov	r3, r1
 800385e:	803b      	strh	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da0f      	bge.n	8003890 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	3338      	adds	r3, #56	; 0x38
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	705a      	strb	r2, [r3, #1]
 800388e:	e00f      	b.n	80038b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038bc:	883a      	ldrh	r2, [r7, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	78ba      	ldrb	r2, [r7, #2]
 80038c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	785b      	ldrb	r3, [r3, #1]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038da:	78bb      	ldrb	r3, [r7, #2]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d102      	bne.n	80038e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_EP_Open+0xaa>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e00e      	b.n	8003912 <HAL_PCD_EP_Open+0xc8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fd60 	bl	80053c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003910:	7afb      	ldrb	r3, [r7, #11]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	da0f      	bge.n	800394e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	3338      	adds	r3, #56	; 0x38
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	705a      	strb	r2, [r3, #1]
 800394c:	e00f      	b.n	800396e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_PCD_EP_Close+0x6e>
 8003984:	2302      	movs	r3, #2
 8003986:	e00e      	b.n	80039a6 <HAL_PCD_EP_Close+0x8c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	4618      	mov	r0, r3
 8003998:	f001 fd9e 	bl	80054d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	460b      	mov	r3, r1
 80039bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	3304      	adds	r3, #4
 80039d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f0:	7afb      	ldrb	r3, [r7, #11]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	f002 f879 	bl	8005b18 <USB_EP0StartXfer>
 8003a26:	e008      	b.n	8003a3a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	f001 fe2b 	bl	8005690 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	460b      	mov	r3, r1
 8003a82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	f003 020f 	and.w	r2, r3, #15
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	3338      	adds	r3, #56	; 0x38
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6979      	ldr	r1, [r7, #20]
 8003ae6:	f002 f817 	bl	8005b18 <USB_EP0StartXfer>
 8003aea:	e008      	b.n	8003afe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	6979      	ldr	r1, [r7, #20]
 8003afa:	f001 fdc9 	bl	8005690 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 020f 	and.w	r2, r3, #15
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d901      	bls.n	8003b26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e050      	b.n	8003bc8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	da0f      	bge.n	8003b4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3338      	adds	r3, #56	; 0x38
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	705a      	strb	r2, [r3, #1]
 8003b4c:	e00d      	b.n	8003b6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_PCD_EP_SetStall+0x82>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e01e      	b.n	8003bc8 <HAL_PCD_EP_SetStall+0xc0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f002 f96e 	bl	8005e7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	b2d9      	uxtb	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f002 fb5f 	bl	800627c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 020f 	and.w	r2, r3, #15
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d901      	bls.n	8003bee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e042      	b.n	8003c74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da0f      	bge.n	8003c16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 020f 	and.w	r2, r3, #15
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3338      	adds	r3, #56	; 0x38
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	705a      	strb	r2, [r3, #1]
 8003c14:	e00f      	b.n	8003c36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_PCD_EP_ClrStall+0x86>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e00e      	b.n	8003c74 <HAL_PCD_EP_ClrStall+0xa4>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 f976 	bl	8005f56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	3338      	adds	r3, #56	; 0x38
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d901      	bls.n	8003cb4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e06c      	b.n	8003d8e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d902      	bls.n	8003cd0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3303      	adds	r3, #3
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd8:	e02b      	b.n	8003d32 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d902      	bls.n	8003cf6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3303      	adds	r3, #3
 8003cfa:	089b      	lsrs	r3, r3, #2
 8003cfc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68d9      	ldr	r1, [r3, #12]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	4603      	mov	r3, r0
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f002 f852 	bl	8005dbe <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	441a      	add	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d809      	bhi.n	8003d5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d203      	bcs.n	8003d5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1be      	bne.n	8003cda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d811      	bhi.n	8003d8c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	2201      	movs	r2, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	6939      	ldr	r1, [r7, #16]
 8003d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d88:	4013      	ands	r3, r2
 8003d8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	333c      	adds	r3, #60	; 0x3c
 8003db0:	3304      	adds	r3, #4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	f040 80a0 	bne.w	8003f10 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d015      	beq.n	8003e06 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a72      	ldr	r2, [pc, #456]	; (8003fa8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	f240 80dd 	bls.w	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80d7 	beq.w	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	6093      	str	r3, [r2, #8]
 8003e04:	e0cb      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2320      	movs	r3, #32
 8003e20:	6093      	str	r3, [r2, #8]
 8003e22:	e0bc      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 80b7 	bne.w	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d90f      	bls.n	8003e58 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e54:	6093      	str	r3, [r2, #8]
 8003e56:	e0a2      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e6a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	440b      	add	r3, r1
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003e7e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4403      	add	r3, r0
 8003e8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e92:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4403      	add	r3, r0
 8003eb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4419      	add	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4403      	add	r3, r0
 8003ecc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ed0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d114      	bne.n	8003f02 <PCD_EP_OutXfrComplete_int+0x16a>
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d108      	bne.n	8003f02 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003efa:	461a      	mov	r2, r3
 8003efc:	2101      	movs	r1, #1
 8003efe:	f002 f9bd 	bl	800627c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4619      	mov	r1, r3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f004 fb31 	bl	8008570 <HAL_PCD_DataOutStageCallback>
 8003f0e:	e046      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <PCD_EP_OutXfrComplete_int+0x214>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d124      	bne.n	8003f62 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f34:	6093      	str	r3, [r2, #8]
 8003f36:	e032      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2320      	movs	r3, #32
 8003f52:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f004 fb08 	bl	8008570 <HAL_PCD_DataOutStageCallback>
 8003f60:	e01d      	b.n	8003f9e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d114      	bne.n	8003f92 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f002 f975 	bl	800627c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f004 fae9 	bl	8008570 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	4f54300a 	.word	0x4f54300a
 8003fac:	4f54310a 	.word	0x4f54310a

08003fb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	333c      	adds	r3, #60	; 0x3c
 8003fc8:	3304      	adds	r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d90e      	bls.n	8004004 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004002:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f004 faa1 	bl	800854c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <PCD_EP_OutSetupPacket_int+0x88>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d90c      	bls.n	800402c <PCD_EP_OutSetupPacket_int+0x7c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d108      	bne.n	800402c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004024:	461a      	mov	r2, r3
 8004026:	2101      	movs	r1, #1
 8004028:	f002 f928 	bl	800627c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	4f54300a 	.word	0x4f54300a

0800403c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
 8004048:	4613      	mov	r3, r2
 800404a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800405a:	883b      	ldrh	r3, [r7, #0]
 800405c:	0419      	lsls	r1, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	430a      	orrs	r2, r1
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
 8004068:	e028      	b.n	80040bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4413      	add	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
 800407c:	e00d      	b.n	800409a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	3340      	adds	r3, #64	; 0x40
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4413      	add	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	3301      	adds	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	3b01      	subs	r3, #1
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3ec      	bcc.n	800407e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040a4:	883b      	ldrh	r3, [r7, #0]
 80040a6:	0418      	lsls	r0, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	4302      	orrs	r2, r0
 80040b4:	3340      	adds	r3, #64	; 0x40
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e264      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d075      	beq.n	800420e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004122:	4ba3      	ldr	r3, [pc, #652]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b04      	cmp	r3, #4
 800412c:	d00c      	beq.n	8004148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412e:	4ba0      	ldr	r3, [pc, #640]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004136:	2b08      	cmp	r3, #8
 8004138:	d112      	bne.n	8004160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413a:	4b9d      	ldr	r3, [pc, #628]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004146:	d10b      	bne.n	8004160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	4b99      	ldr	r3, [pc, #612]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d05b      	beq.n	800420c <HAL_RCC_OscConfig+0x108>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d157      	bne.n	800420c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e23f      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d106      	bne.n	8004178 <HAL_RCC_OscConfig+0x74>
 800416a:	4b91      	ldr	r3, [pc, #580]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a90      	ldr	r2, [pc, #576]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e01d      	b.n	80041b4 <HAL_RCC_OscConfig+0xb0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0x98>
 8004182:	4b8b      	ldr	r3, [pc, #556]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a8a      	ldr	r2, [pc, #552]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a87      	ldr	r2, [pc, #540]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e00b      	b.n	80041b4 <HAL_RCC_OscConfig+0xb0>
 800419c:	4b84      	ldr	r3, [pc, #528]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a83      	ldr	r2, [pc, #524]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b81      	ldr	r3, [pc, #516]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a80      	ldr	r2, [pc, #512]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d013      	beq.n	80041e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fd fd42 	bl	8001c44 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fd fd3e 	bl	8001c44 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e204      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b76      	ldr	r3, [pc, #472]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0xc0>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd fd2e 	bl	8001c44 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fd fd2a 	bl	8001c44 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1f0      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	4b6c      	ldr	r3, [pc, #432]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0xe8>
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d063      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004226:	4b62      	ldr	r3, [pc, #392]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422e:	2b08      	cmp	r3, #8
 8004230:	d11c      	bne.n	800426c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004232:	4b5f      	ldr	r3, [pc, #380]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423e:	4b5c      	ldr	r3, [pc, #368]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_RCC_OscConfig+0x152>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d001      	beq.n	8004256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e1c4      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004256:	4b56      	ldr	r3, [pc, #344]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4952      	ldr	r1, [pc, #328]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426a:	e03a      	b.n	80042e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d020      	beq.n	80042b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_OscConfig+0x2b0>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fd fce3 	bl	8001c44 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004282:	f7fd fcdf 	bl	8001c44 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e1a5      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	4b46      	ldr	r3, [pc, #280]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a0:	4b43      	ldr	r3, [pc, #268]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4940      	ldr	r1, [pc, #256]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]
 80042b4:	e015      	b.n	80042e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_OscConfig+0x2b0>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd fcc2 	bl	8001c44 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c4:	f7fd fcbe 	bl	8001c44 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e184      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d030      	beq.n	8004350 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <HAL_RCC_OscConfig+0x2b4>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7fd fca2 	bl	8001c44 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004304:	f7fd fc9e 	bl	8001c44 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e164      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x200>
 8004322:	e015      	b.n	8004350 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_OscConfig+0x2b4>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432a:	f7fd fc8b 	bl	8001c44 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004332:	f7fd fc87 	bl	8001c44 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e14d      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a0 	beq.w	800449e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10f      	bne.n	800438e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	4a0e      	ldr	r2, [pc, #56]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	; 0x40
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_OscConfig+0x2b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d121      	bne.n	80043de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_RCC_OscConfig+0x2b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a07      	ldr	r2, [pc, #28]	; (80043bc <HAL_RCC_OscConfig+0x2b8>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a6:	f7fd fc4d 	bl	8001c44 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ac:	e011      	b.n	80043d2 <HAL_RCC_OscConfig+0x2ce>
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	42470000 	.word	0x42470000
 80043b8:	42470e80 	.word	0x42470e80
 80043bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fd fc40 	bl	8001c44 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e106      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b85      	ldr	r3, [pc, #532]	; (80045e8 <HAL_RCC_OscConfig+0x4e4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d106      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2f0>
 80043e6:	4b81      	ldr	r3, [pc, #516]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a80      	ldr	r2, [pc, #512]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
 80043f2:	e01c      	b.n	800442e <HAL_RCC_OscConfig+0x32a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	d10c      	bne.n	8004416 <HAL_RCC_OscConfig+0x312>
 80043fc:	4b7b      	ldr	r3, [pc, #492]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a7a      	ldr	r2, [pc, #488]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004402:	f043 0304 	orr.w	r3, r3, #4
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	4b78      	ldr	r3, [pc, #480]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a77      	ldr	r2, [pc, #476]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
 8004414:	e00b      	b.n	800442e <HAL_RCC_OscConfig+0x32a>
 8004416:	4b75      	ldr	r3, [pc, #468]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a74      	ldr	r2, [pc, #464]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
 8004422:	4b72      	ldr	r3, [pc, #456]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a71      	ldr	r2, [pc, #452]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004428:	f023 0304 	bic.w	r3, r3, #4
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d015      	beq.n	8004462 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004436:	f7fd fc05 	bl	8001c44 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	e00a      	b.n	8004454 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443e:	f7fd fc01 	bl	8001c44 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f241 3288 	movw	r2, #5000	; 0x1388
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0c5      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ee      	beq.n	800443e <HAL_RCC_OscConfig+0x33a>
 8004460:	e014      	b.n	800448c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004462:	f7fd fbef 	bl	8001c44 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004468:	e00a      	b.n	8004480 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446a:	f7fd fbeb 	bl	8001c44 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f241 3288 	movw	r2, #5000	; 0x1388
 8004478:	4293      	cmp	r3, r2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e0af      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004480:	4b5a      	ldr	r3, [pc, #360]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ee      	bne.n	800446a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004492:	4b56      	ldr	r3, [pc, #344]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a55      	ldr	r2, [pc, #340]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 809b 	beq.w	80045de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d05c      	beq.n	800456e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d141      	bne.n	8004540 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044bc:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <HAL_RCC_OscConfig+0x4ec>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c2:	f7fd fbbf 	bl	8001c44 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fd fbbb 	bl	8001c44 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e081      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044dc:	4b43      	ldr	r3, [pc, #268]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	019b      	lsls	r3, r3, #6
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	3b01      	subs	r3, #1
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	4937      	ldr	r1, [pc, #220]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <HAL_RCC_OscConfig+0x4ec>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004518:	f7fd fb94 	bl	8001c44 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004520:	f7fd fb90 	bl	8001c44 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e056      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x41c>
 800453e:	e04e      	b.n	80045de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCC_OscConfig+0x4ec>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004546:	f7fd fb7d 	bl	8001c44 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454e:	f7fd fb79 	bl	8001c44 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e03f      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004560:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCC_OscConfig+0x44a>
 800456c:	e037      	b.n	80045de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e032      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800457a:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <HAL_RCC_OscConfig+0x4e8>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d028      	beq.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d121      	bne.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d11a      	bne.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d111      	bne.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d107      	bne.n	80045da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40007000 	.word	0x40007000
 80045ec:	40023800 	.word	0x40023800
 80045f0:	42470060 	.word	0x42470060

080045f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0cc      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b68      	ldr	r3, [pc, #416]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d90c      	bls.n	8004630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b65      	ldr	r3, [pc, #404]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b63      	ldr	r3, [pc, #396]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0b8      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d020      	beq.n	800467e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004648:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a58      	ldr	r2, [pc, #352]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004660:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a52      	ldr	r2, [pc, #328]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800466a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800466c:	4b50      	ldr	r3, [pc, #320]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	494d      	ldr	r1, [pc, #308]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d044      	beq.n	8004714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d119      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e07f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	4b3f      	ldr	r3, [pc, #252]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e067      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 0203 	bic.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4934      	ldr	r1, [pc, #208]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e4:	f7fd faae 	bl	8001c44 <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ec:	f7fd faaa 	bl	8001c44 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e04f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 020c 	and.w	r2, r3, #12
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	429a      	cmp	r2, r3
 8004712:	d1eb      	bne.n	80046ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d20c      	bcs.n	800473c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b22      	ldr	r3, [pc, #136]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e032      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4916      	ldr	r1, [pc, #88]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	490e      	ldr	r1, [pc, #56]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800477a:	f000 f821 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800477e:	4602      	mov	r2, r0
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	490a      	ldr	r1, [pc, #40]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	5ccb      	ldrb	r3, [r1, r3]
 800478e:	fa22 f303 	lsr.w	r3, r2, r3
 8004792:	4a09      	ldr	r2, [pc, #36]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <HAL_RCC_ClockConfig+0x1c8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fa0e 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023c00 	.word	0x40023c00
 80047b0:	40023800 	.word	0x40023800
 80047b4:	08008cb0 	.word	0x08008cb0
 80047b8:	20000000 	.word	0x20000000
 80047bc:	20000004 	.word	0x20000004

080047c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	607b      	str	r3, [r7, #4]
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	2300      	movs	r3, #0
 80047d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d8:	4b67      	ldr	r3, [pc, #412]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d00d      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0x40>
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	f200 80bd 	bhi.w	8004964 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x34>
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0x3a>
 80047f2:	e0b7      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047f6:	60bb      	str	r3, [r7, #8]
       break;
 80047f8:	e0b7      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047fa:	4b61      	ldr	r3, [pc, #388]	; (8004980 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047fc:	60bb      	str	r3, [r7, #8]
      break;
 80047fe:	e0b4      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004800:	4b5d      	ldr	r3, [pc, #372]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800480a:	4b5b      	ldr	r3, [pc, #364]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d04d      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004816:	4b58      	ldr	r3, [pc, #352]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	ea02 0800 	and.w	r8, r2, r0
 800482e:	ea03 0901 	and.w	r9, r3, r1
 8004832:	4640      	mov	r0, r8
 8004834:	4649      	mov	r1, r9
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	014b      	lsls	r3, r1, #5
 8004840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004844:	0142      	lsls	r2, r0, #5
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	ebb0 0008 	subs.w	r0, r0, r8
 800484e:	eb61 0109 	sbc.w	r1, r1, r9
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	018b      	lsls	r3, r1, #6
 800485c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004860:	0182      	lsls	r2, r0, #6
 8004862:	1a12      	subs	r2, r2, r0
 8004864:	eb63 0301 	sbc.w	r3, r3, r1
 8004868:	f04f 0000 	mov.w	r0, #0
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	00d9      	lsls	r1, r3, #3
 8004872:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004876:	00d0      	lsls	r0, r2, #3
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	eb12 0208 	adds.w	r2, r2, r8
 8004880:	eb43 0309 	adc.w	r3, r3, r9
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f04f 0100 	mov.w	r1, #0
 800488c:	0259      	lsls	r1, r3, #9
 800488e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004892:	0250      	lsls	r0, r2, #9
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	461a      	mov	r2, r3
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	f7fb fc90 	bl	80001c8 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4613      	mov	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e04a      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b2:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	461a      	mov	r2, r3
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	ea02 0400 	and.w	r4, r2, r0
 80048ca:	ea03 0501 	and.w	r5, r3, r1
 80048ce:	4620      	mov	r0, r4
 80048d0:	4629      	mov	r1, r5
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	014b      	lsls	r3, r1, #5
 80048dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048e0:	0142      	lsls	r2, r0, #5
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	1b00      	subs	r0, r0, r4
 80048e8:	eb61 0105 	sbc.w	r1, r1, r5
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	018b      	lsls	r3, r1, #6
 80048f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048fa:	0182      	lsls	r2, r0, #6
 80048fc:	1a12      	subs	r2, r2, r0
 80048fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	00d9      	lsls	r1, r3, #3
 800490c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004910:	00d0      	lsls	r0, r2, #3
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	1912      	adds	r2, r2, r4
 8004918:	eb45 0303 	adc.w	r3, r5, r3
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	0299      	lsls	r1, r3, #10
 8004926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800492a:	0290      	lsls	r0, r2, #10
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	461a      	mov	r2, r3
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	f7fb fc44 	bl	80001c8 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	3301      	adds	r3, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	60bb      	str	r3, [r7, #8]
      break;
 8004962:	e002      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004966:	60bb      	str	r3, [r7, #8]
      break;
 8004968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496a:	68bb      	ldr	r3, [r7, #8]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400
 8004980:	007a1200 	.word	0x007a1200

08004984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCC_GetHCLKFreq+0x14>)
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000000 	.word	0x20000000

0800499c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049a0:	f7ff fff0 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0a9b      	lsrs	r3, r3, #10
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4903      	ldr	r1, [pc, #12]	; (80049c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	08008cc0 	.word	0x08008cc0

080049c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d035      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049ec:	4b62      	ldr	r3, [pc, #392]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049f2:	f7fd f927 	bl	8001c44 <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049fa:	f7fd f923 	bl	8001c44 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e0b0      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a0c:	4b5b      	ldr	r3, [pc, #364]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	019a      	lsls	r2, r3, #6
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	071b      	lsls	r3, r3, #28
 8004a24:	4955      	ldr	r1, [pc, #340]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a2c:	4b52      	ldr	r3, [pc, #328]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a32:	f7fd f907 	bl	8001c44 <HAL_GetTick>
 8004a36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a3a:	f7fd f903 	bl	8001c44 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e090      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a4c:	4b4b      	ldr	r3, [pc, #300]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8083 	beq.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	4b44      	ldr	r3, [pc, #272]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a43      	ldr	r2, [pc, #268]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b41      	ldr	r3, [pc, #260]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a3e      	ldr	r2, [pc, #248]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8e:	f7fd f8d9 	bl	8001c44 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a96:	f7fd f8d5 	bl	8001c44 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e062      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004aa8:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ab4:	4b31      	ldr	r3, [pc, #196]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02f      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d028      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ad2:	4b2a      	ldr	r3, [pc, #168]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004adc:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae2:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ae8:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aee:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d114      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fd f8a3 	bl	8001c44 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fd f89f 	bl	8001c44 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e02a      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0ee      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b30:	d10d      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	490d      	ldr	r1, [pc, #52]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]
 8004b4c:	e005      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b58:	6093      	str	r3, [r2, #8]
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b66:	4905      	ldr	r1, [pc, #20]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	42470068 	.word	0x42470068
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	40007000 	.word	0x40007000
 8004b84:	42470e40 	.word	0x42470e40

08004b88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d13e      	bne.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d12f      	bne.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bbc:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bbe:	617b      	str	r3, [r7, #20]
          break;
 8004bc0:	e02f      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bce:	d108      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bd0:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd8:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	e007      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bea:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf8:	099b      	lsrs	r3, r3, #6
 8004bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	0f1b      	lsrs	r3, r3, #28
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	617b      	str	r3, [r7, #20]
          break;
 8004c1a:	e002      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
          break;
 8004c20:	bf00      	nop
        }
      }
      break;
 8004c22:	bf00      	nop
    }
  }
  return frequency;
 8004c24:	697b      	ldr	r3, [r7, #20]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800
 8004c38:	00bb8000 	.word	0x00bb8000
 8004c3c:	007a1200 	.word	0x007a1200
 8004c40:	00f42400 	.word	0x00f42400

08004c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07b      	b.n	8004d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d108      	bne.n	8004c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c66:	d009      	beq.n	8004c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61da      	str	r2, [r3, #28]
 8004c6e:	e005      	b.n	8004c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fe94 	bl	80019c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	ea42 0103 	orr.w	r1, r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	f003 0104 	and.w	r1, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	f003 0210 	and.w	r2, r3, #16
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d56:	b084      	sub	sp, #16
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	f107 001c 	add.w	r0, r7, #28
 8004d64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d122      	bne.n	8004db4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 fac5 	bl	8006338 <USB_CoreReset>
 8004dae:	4603      	mov	r3, r0
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e01a      	b.n	8004dea <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 fab9 	bl	8006338 <USB_CoreReset>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
 8004ddc:	e005      	b.n	8004dea <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10b      	bne.n	8004e08 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f043 0206 	orr.w	r2, r3, #6
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e14:	b004      	add	sp, #16
 8004e16:	4770      	bx	lr

08004e18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	4613      	mov	r3, r2
 8004e24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d165      	bne.n	8004ef8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4a41      	ldr	r2, [pc, #260]	; (8004f34 <USB_SetTurnaroundTime+0x11c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d906      	bls.n	8004e42 <USB_SetTurnaroundTime+0x2a>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a40      	ldr	r2, [pc, #256]	; (8004f38 <USB_SetTurnaroundTime+0x120>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d202      	bcs.n	8004e42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e062      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a3c      	ldr	r2, [pc, #240]	; (8004f38 <USB_SetTurnaroundTime+0x120>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d306      	bcc.n	8004e58 <USB_SetTurnaroundTime+0x40>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <USB_SetTurnaroundTime+0x124>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d202      	bcs.n	8004e58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e52:	230e      	movs	r3, #14
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e057      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4a38      	ldr	r2, [pc, #224]	; (8004f3c <USB_SetTurnaroundTime+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d306      	bcc.n	8004e6e <USB_SetTurnaroundTime+0x56>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a37      	ldr	r2, [pc, #220]	; (8004f40 <USB_SetTurnaroundTime+0x128>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d202      	bcs.n	8004e6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e68:	230d      	movs	r3, #13
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e04c      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a33      	ldr	r2, [pc, #204]	; (8004f40 <USB_SetTurnaroundTime+0x128>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d306      	bcc.n	8004e84 <USB_SetTurnaroundTime+0x6c>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a32      	ldr	r2, [pc, #200]	; (8004f44 <USB_SetTurnaroundTime+0x12c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d802      	bhi.n	8004e84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e7e:	230c      	movs	r3, #12
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e041      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a2f      	ldr	r2, [pc, #188]	; (8004f44 <USB_SetTurnaroundTime+0x12c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d906      	bls.n	8004e9a <USB_SetTurnaroundTime+0x82>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a2e      	ldr	r2, [pc, #184]	; (8004f48 <USB_SetTurnaroundTime+0x130>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d802      	bhi.n	8004e9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e94:	230b      	movs	r3, #11
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e036      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <USB_SetTurnaroundTime+0x130>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d906      	bls.n	8004eb0 <USB_SetTurnaroundTime+0x98>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a29      	ldr	r2, [pc, #164]	; (8004f4c <USB_SetTurnaroundTime+0x134>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d802      	bhi.n	8004eb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eaa:	230a      	movs	r3, #10
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e02b      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <USB_SetTurnaroundTime+0x134>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d906      	bls.n	8004ec6 <USB_SetTurnaroundTime+0xae>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a25      	ldr	r2, [pc, #148]	; (8004f50 <USB_SetTurnaroundTime+0x138>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d202      	bcs.n	8004ec6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ec0:	2309      	movs	r3, #9
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e020      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <USB_SetTurnaroundTime+0x138>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d306      	bcc.n	8004edc <USB_SetTurnaroundTime+0xc4>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <USB_SetTurnaroundTime+0x13c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d802      	bhi.n	8004edc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e015      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <USB_SetTurnaroundTime+0x13c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d906      	bls.n	8004ef2 <USB_SetTurnaroundTime+0xda>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <USB_SetTurnaroundTime+0x140>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d202      	bcs.n	8004ef2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004eec:	2307      	movs	r3, #7
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e00a      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e007      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004efe:	2309      	movs	r3, #9
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e001      	b.n	8004f08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f04:	2309      	movs	r3, #9
 8004f06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	00d8acbf 	.word	0x00d8acbf
 8004f38:	00e4e1c0 	.word	0x00e4e1c0
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	01067380 	.word	0x01067380
 8004f44:	011a499f 	.word	0x011a499f
 8004f48:	01312cff 	.word	0x01312cff
 8004f4c:	014ca43f 	.word	0x014ca43f
 8004f50:	016e3600 	.word	0x016e3600
 8004f54:	01a6ab1f 	.word	0x01a6ab1f
 8004f58:	01e84800 	.word	0x01e84800

08004f5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d106      	bne.n	8004fcc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	e00b      	b.n	8004fe4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	e001      	b.n	8004fe4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e003      	b.n	8004fec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fe4:	2032      	movs	r0, #50	; 0x32
 8004fe6:	f7fc fe39 	bl	8001c5c <HAL_Delay>

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	e009      	b.n	8005028 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	3340      	adds	r3, #64	; 0x40
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	2200      	movs	r2, #0
 8005020:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	3301      	adds	r3, #1
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b0e      	cmp	r3, #14
 800502c:	d9f2      	bls.n	8005014 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800502e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d11c      	bne.n	800506e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005042:	f043 0302 	orr.w	r3, r3, #2
 8005046:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
 800506c:	e00b      	b.n	8005086 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800508c:	461a      	mov	r2, r3
 800508e:	2300      	movs	r3, #0
 8005090:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005098:	4619      	mov	r1, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	461a      	mov	r2, r3
 80050a2:	680b      	ldr	r3, [r1, #0]
 80050a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10c      	bne.n	80050c6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050b2:	2100      	movs	r1, #0
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f949 	bl	800534c <USB_SetDevSpeed>
 80050ba:	e008      	b.n	80050ce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050bc:	2101      	movs	r1, #1
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f944 	bl	800534c <USB_SetDevSpeed>
 80050c4:	e003      	b.n	80050ce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050c6:	2103      	movs	r1, #3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f93f 	bl	800534c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050ce:	2110      	movs	r1, #16
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8f3 	bl	80052bc <USB_FlushTxFifo>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f911 	bl	8005308 <USB_FlushRxFifo>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f6:	461a      	mov	r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	461a      	mov	r2, r3
 8005104:	2300      	movs	r3, #0
 8005106:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	461a      	mov	r2, r3
 8005110:	2300      	movs	r3, #0
 8005112:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e043      	b.n	80051a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005130:	d118      	bne.n	8005164 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e013      	b.n	8005176 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	461a      	mov	r2, r3
 800515c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e008      	b.n	8005176 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	461a      	mov	r2, r3
 8005172:	2300      	movs	r3, #0
 8005174:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	461a      	mov	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	461a      	mov	r2, r3
 8005196:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800519a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	3301      	adds	r3, #1
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d3b7      	bcc.n	800511a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e043      	b.n	8005238 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c6:	d118      	bne.n	80051fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	461a      	mov	r2, r3
 80051dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e013      	b.n	800520c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	461a      	mov	r2, r3
 80051f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e008      	b.n	800520c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	461a      	mov	r2, r3
 800521a:	2300      	movs	r3, #0
 800521c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	461a      	mov	r2, r3
 800522c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005230:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3301      	adds	r3, #1
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	429a      	cmp	r2, r3
 800523e:	d3b7      	bcc.n	80051b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005252:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005260:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f043 0210 	orr.w	r2, r3, #16
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <USB_DevInit+0x2c4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f043 0208 	orr.w	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a0:	f043 0304 	orr.w	r3, r3, #4
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052b4:	b004      	add	sp, #16
 80052b6:	4770      	bx	lr
 80052b8:	803c3800 	.word	0x803c3800

080052bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	019b      	lsls	r3, r3, #6
 80052ce:	f043 0220 	orr.w	r2, r3, #32
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <USB_FlushTxFifo+0x48>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e006      	b.n	80052f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d0f0      	beq.n	80052d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	00030d40 	.word	0x00030d40

08005308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2210      	movs	r2, #16
 8005318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <USB_FlushRxFifo+0x40>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e006      	b.n	800533a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d0f0      	beq.n	800531a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	00030d40 	.word	0x00030d40

0800534c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	68f9      	ldr	r1, [r7, #12]
 8005368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800536c:	4313      	orrs	r3, r2
 800536e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800537e:	b480      	push	{r7}
 8005380:	b087      	sub	sp, #28
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0306 	and.w	r3, r3, #6
 8005396:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800539e:	2300      	movs	r3, #0
 80053a0:	75fb      	strb	r3, [r7, #23]
 80053a2:	e00a      	b.n	80053ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d002      	beq.n	80053b0 <USB_GetDevSpeed+0x32>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	d102      	bne.n	80053b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053b0:	2302      	movs	r3, #2
 80053b2:	75fb      	strb	r3, [r7, #23]
 80053b4:	e001      	b.n	80053ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053b6:	230f      	movs	r3, #15
 80053b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d13a      	bne.n	800545a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005402:	4313      	orrs	r3, r2
 8005404:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d155      	bne.n	80054c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	78db      	ldrb	r3, [r3, #3]
 8005436:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005438:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	059b      	lsls	r3, r3, #22
 800543e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005440:	4313      	orrs	r3, r2
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e036      	b.n	80054c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	2101      	movs	r1, #1
 800546c:	fa01 f303 	lsl.w	r3, r1, r3
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	68f9      	ldr	r1, [r7, #12]
 8005474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005478:	4313      	orrs	r3, r2
 800547a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d11a      	bne.n	80054c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	78db      	ldrb	r3, [r3, #3]
 80054ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ae:	430b      	orrs	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d161      	bne.n	80055b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800550a:	d11f      	bne.n	800554c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005526:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800552a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800554a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	2101      	movs	r1, #1
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	b29b      	uxth	r3, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800556c:	4013      	ands	r3, r2
 800556e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	b29b      	uxth	r3, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005590:	4013      	ands	r3, r2
 8005592:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	0159      	lsls	r1, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	440b      	add	r3, r1
 80055aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ae:	4619      	mov	r1, r3
 80055b0:	4b35      	ldr	r3, [pc, #212]	; (8005688 <USB_DeactivateEndpoint+0x1b0>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]
 80055b6:	e060      	b.n	800567a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ce:	d11f      	bne.n	8005610 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800560e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	43db      	mvns	r3, r3
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005630:	4013      	ands	r3, r2
 8005632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	43db      	mvns	r3, r3
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005654:	4013      	ands	r3, r2
 8005656:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	0159      	lsls	r1, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	440b      	add	r3, r1
 800566e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005672:	4619      	mov	r1, r3
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <USB_DeactivateEndpoint+0x1b4>)
 8005676:	4013      	ands	r3, r2
 8005678:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	ec337800 	.word	0xec337800
 800568c:	eff37800 	.word	0xeff37800

08005690 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	f040 815c 	bne.w	800596a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d132      	bne.n	8005720 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	0151      	lsls	r1, r2, #5
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	440a      	add	r2, r1
 80056d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005718:	0cdb      	lsrs	r3, r3, #19
 800571a:	04db      	lsls	r3, r3, #19
 800571c:	6113      	str	r3, [r2, #16]
 800571e:	e074      	b.n	800580a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	440a      	add	r2, r1
 8005736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573a:	0cdb      	lsrs	r3, r3, #19
 800573c:	04db      	lsls	r3, r3, #19
 800573e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800575e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6959      	ldr	r1, [r3, #20]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	440b      	add	r3, r1
 800577c:	1e59      	subs	r1, r3, #1
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	fbb1 f3f3 	udiv	r3, r1, r3
 8005786:	04d9      	lsls	r1, r3, #19
 8005788:	4b9d      	ldr	r3, [pc, #628]	; (8005a00 <USB_EPStartXfer+0x370>)
 800578a:	400b      	ands	r3, r1
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	0148      	lsls	r0, r1, #5
 8005790:	69f9      	ldr	r1, [r7, #28]
 8005792:	4401      	add	r1, r0
 8005794:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005798:	4313      	orrs	r3, r2
 800579a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b2:	69b9      	ldr	r1, [r7, #24]
 80057b4:	0148      	lsls	r0, r1, #5
 80057b6:	69f9      	ldr	r1, [r7, #28]
 80057b8:	4401      	add	r1, r0
 80057ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057be:	4313      	orrs	r3, r2
 80057c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	78db      	ldrb	r3, [r3, #3]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d11f      	bne.n	800580a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005808:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d14b      	bne.n	80058a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d009      	beq.n	800582c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	461a      	mov	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	78db      	ldrb	r3, [r3, #3]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d128      	bne.n	8005886 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d110      	bne.n	8005866 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	e00f      	b.n	8005886 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005884:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e12f      	b.n	8005b08 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	78db      	ldrb	r3, [r3, #3]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d015      	beq.n	80058fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8117 	beq.w	8005b08 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	69f9      	ldr	r1, [r7, #28]
 80058f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f6:	4313      	orrs	r3, r2
 80058f8:	634b      	str	r3, [r1, #52]	; 0x34
 80058fa:	e105      	b.n	8005b08 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d110      	bne.n	800592e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	e00f      	b.n	800594e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	68d9      	ldr	r1, [r3, #12]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	b298      	uxth	r0, r3
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4603      	mov	r3, r0
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fa2b 	bl	8005dbe <USB_WritePacket>
 8005968:	e0ce      	b.n	8005b08 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005984:	0cdb      	lsrs	r3, r3, #19
 8005986:	04db      	lsls	r3, r3, #19
 8005988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d126      	bne.n	8005a04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	0148      	lsls	r0, r1, #5
 80059d0:	69f9      	ldr	r1, [r7, #28]
 80059d2:	4401      	add	r1, r0
 80059d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059d8:	4313      	orrs	r3, r2
 80059da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059fa:	6113      	str	r3, [r2, #16]
 80059fc:	e036      	b.n	8005a6c <USB_EPStartXfer+0x3dc>
 80059fe:	bf00      	nop
 8005a00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	695a      	ldr	r2, [r3, #20]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	1e5a      	subs	r2, r3, #1
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	8afb      	ldrh	r3, [r7, #22]
 8005a2a:	04d9      	lsls	r1, r3, #19
 8005a2c:	4b39      	ldr	r3, [pc, #228]	; (8005b14 <USB_EPStartXfer+0x484>)
 8005a2e:	400b      	ands	r3, r1
 8005a30:	69b9      	ldr	r1, [r7, #24]
 8005a32:	0148      	lsls	r0, r1, #5
 8005a34:	69f9      	ldr	r1, [r7, #28]
 8005a36:	4401      	add	r1, r0
 8005a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	8af9      	ldrh	r1, [r7, #22]
 8005a54:	fb01 f303 	mul.w	r3, r1, r3
 8005a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	0148      	lsls	r0, r1, #5
 8005a60:	69f9      	ldr	r1, [r7, #28]
 8005a62:	4401      	add	r1, r0
 8005a64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d10d      	bne.n	8005a8e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68d9      	ldr	r1, [r3, #12]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	460a      	mov	r2, r1
 8005a8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	78db      	ldrb	r3, [r3, #3]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d128      	bne.n	8005ae8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d110      	bne.n	8005ac8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e00f      	b.n	8005ae8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3720      	adds	r7, #32
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	1ff80000 	.word	0x1ff80000

08005b18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	f040 80cd 	bne.w	8005cd4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d132      	bne.n	8005ba8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba0:	0cdb      	lsrs	r3, r3, #19
 8005ba2:	04db      	lsls	r3, r3, #19
 8005ba4:	6113      	str	r3, [r2, #16]
 8005ba6:	e04e      	b.n	8005c46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc2:	0cdb      	lsrs	r3, r3, #19
 8005bc4:	04db      	lsls	r3, r3, #19
 8005bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005be6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	695a      	ldr	r2, [r3, #20]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d903      	bls.n	8005c00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c36:	6939      	ldr	r1, [r7, #16]
 8005c38:	0148      	lsls	r0, r1, #5
 8005c3a:	6979      	ldr	r1, [r7, #20]
 8005c3c:	4401      	add	r1, r0
 8005c3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c42:	4313      	orrs	r3, r2
 8005c44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d11e      	bne.n	8005c8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e092      	b.n	8005db0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ca8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d07e      	beq.n	8005db0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	6979      	ldr	r1, [r7, #20]
 8005cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	634b      	str	r3, [r1, #52]	; 0x34
 8005cd2:	e06d      	b.n	8005db0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cee:	0cdb      	lsrs	r3, r3, #19
 8005cf0:	04db      	lsls	r3, r3, #19
 8005cf2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d16:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5e:	6939      	ldr	r1, [r7, #16]
 8005d60:	0148      	lsls	r0, r1, #5
 8005d62:	6979      	ldr	r1, [r7, #20]
 8005d64:	4401      	add	r1, r0
 8005d66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10d      	bne.n	8005d90 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	68d9      	ldr	r1, [r3, #12]
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	460a      	mov	r2, r1
 8005d8e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b089      	sub	sp, #36	; 0x24
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	461a      	mov	r2, r3
 8005dcc:	460b      	mov	r3, r1
 8005dce:	71fb      	strb	r3, [r7, #7]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11a      	bne.n	8005e1a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005de4:	88bb      	ldrh	r3, [r7, #4]
 8005de6:	3303      	adds	r3, #3
 8005de8:	089b      	lsrs	r3, r3, #2
 8005dea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e00f      	b.n	8005e12 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	031a      	lsls	r2, r3, #12
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	461a      	mov	r2, r3
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d3eb      	bcc.n	8005df2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3724      	adds	r7, #36	; 0x24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b089      	sub	sp, #36	; 0x24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	3303      	adds	r3, #3
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e00b      	b.n	8005e64 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d3ef      	bcc.n	8005e4c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e6c:	69fb      	ldr	r3, [r7, #28]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3724      	adds	r7, #36	; 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d12c      	bne.n	8005ef0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	db12      	blt.n	8005ece <USB_EPSetStall+0x54>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00f      	beq.n	8005ece <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ecc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e02b      	b.n	8005f48 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	db12      	blt.n	8005f28 <USB_EPSetStall+0xae>
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00f      	beq.n	8005f28 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f26:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d128      	bne.n	8005fc4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	78db      	ldrb	r3, [r3, #3]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d003      	beq.n	8005fa2 <USB_EPClearStall+0x4c>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	78db      	ldrb	r3, [r3, #3]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d138      	bne.n	8006014 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	e027      	b.n	8006014 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fe2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	78db      	ldrb	r3, [r3, #3]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d003      	beq.n	8005ff4 <USB_EPClearStall+0x9e>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d10f      	bne.n	8006014 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006012:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006040:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006044:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006056:	68f9      	ldr	r1, [r7, #12]
 8006058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006088:	f023 0303 	bic.w	r3, r3, #3
 800608c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800609c:	f023 0302 	bic.w	r3, r3, #2
 80060a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060de:	f043 0302 	orr.w	r3, r3, #2
 80060e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4013      	ands	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	0c1b      	lsrs	r3, r3, #16
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	b29b      	uxth	r3, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	4013      	ands	r3, r2
 80061ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061ae:	68bb      	ldr	r3, [r7, #8]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ec:	01db      	lsls	r3, r3, #7
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4013      	ands	r3, r2
 8006208:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800620a:	68bb      	ldr	r3, [r7, #8]
}
 800620c:	4618      	mov	r0, r3
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f003 0301 	and.w	r3, r3, #1
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006252:	f023 0307 	bic.w	r3, r3, #7
 8006256:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	460b      	mov	r3, r1
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	333c      	adds	r3, #60	; 0x3c
 8006292:	3304      	adds	r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4a26      	ldr	r2, [pc, #152]	; (8006334 <USB_EP0_OutStart+0xb8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d90a      	bls.n	80062b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b0:	d101      	bne.n	80062b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e037      	b.n	8006326 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e4:	f043 0318 	orr.w	r3, r3, #24
 80062e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d10f      	bne.n	8006324 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	4f54300a 	.word	0x4f54300a

08006338 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a13      	ldr	r2, [pc, #76]	; (800639c <USB_CoreReset+0x64>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e01b      	b.n	800638e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	daf2      	bge.n	8006344 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f043 0201 	orr.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a09      	ldr	r2, [pc, #36]	; (800639c <USB_CoreReset+0x64>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e006      	b.n	800638e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b01      	cmp	r3, #1
 800638a:	d0f0      	beq.n	800636e <USB_CoreReset+0x36>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	00030d40 	.word	0x00030d40

080063a0 <cobs_encode>:
 *
 * returns:        A struct containing the success status of the encoding
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result cobs_encode(void *dst_buf_ptr, size_t dst_buf_len, const void *src_ptr, size_t src_len) {
 80063a0:	b480      	push	{r7}
 80063a2:	b08f      	sub	sp, #60	; 0x3c
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  cobs_encode_result result = {0, COBS_ENCODE_OK};
 80063ae:	2300      	movs	r3, #0
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	2300      	movs	r3, #0
 80063b4:	753b      	strb	r3, [r7, #20]
  const uint8_t *src_read_ptr = src_ptr;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
  const uint8_t *src_end_ptr = src_read_ptr + src_len;
 80063ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063be:	4413      	add	r3, r2
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *dst_buf_start_ptr = dst_buf_ptr;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	623b      	str	r3, [r7, #32]
  uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 80063c6:	6a3a      	ldr	r2, [r7, #32]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4413      	add	r3, r2
 80063cc:	61fb      	str	r3, [r7, #28]
  uint8_t *dst_code_write_ptr = dst_buf_ptr;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t *dst_write_ptr = dst_code_write_ptr + 1;
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	3301      	adds	r3, #1
 80063d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t src_byte = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	76fb      	strb	r3, [r7, #27]
  uint8_t search_len = 1;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* First, do a NULL pointer check and return immediately if it fails. */
  if ((dst_buf_ptr == NULL) || (src_ptr == NULL)) {
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <cobs_encode+0x4e>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <cobs_encode+0x64>
    result.status = COBS_ENCODE_NULL_POINTER;
 80063ee:	2301      	movs	r3, #1
 80063f0:	753b      	strb	r3, [r7, #20]
    return result;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	461a      	mov	r2, r3
 80063f6:	f107 0310 	add.w	r3, r7, #16
 80063fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80063fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8006402:	e05f      	b.n	80064c4 <cobs_encode+0x124>
  }

  if (src_len != 0) {
 8006404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d040      	beq.n	800648c <cobs_encode+0xec>
    /* Iterate over the source bytes */
    for (;;) {
      /* Check for running out of output buffer space */
      if (dst_write_ptr >= dst_buf_end_ptr) {
 800640a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	429a      	cmp	r2, r3
 8006410:	d305      	bcc.n	800641e <cobs_encode+0x7e>
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8006412:	7d3b      	ldrb	r3, [r7, #20]
 8006414:	f043 0302 	orr.w	r3, r3, #2
 8006418:	b2db      	uxtb	r3, r3
 800641a:	753b      	strb	r3, [r7, #20]
        break;
 800641c:	e036      	b.n	800648c <cobs_encode+0xec>
      }

      src_byte = *src_read_ptr++;
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	637a      	str	r2, [r7, #52]	; 0x34
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	76fb      	strb	r3, [r7, #27]
      if (src_byte == 0) {
 8006428:	7efb      	ldrb	r3, [r7, #27]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10f      	bne.n	800644e <cobs_encode+0xae>
        /* We found a zero byte */
        *dst_code_write_ptr = search_len;
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006434:	701a      	strb	r2, [r3, #0]
        dst_code_write_ptr = dst_write_ptr++;
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800643c:	633b      	str	r3, [r7, #48]	; 0x30
        search_len = 1;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (src_read_ptr >= src_end_ptr) {
 8006444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	429a      	cmp	r2, r3
 800644a:	d3de      	bcc.n	800640a <cobs_encode+0x6a>
          break;
 800644c:	e01e      	b.n	800648c <cobs_encode+0xec>
        }
      } else {
        /* Copy the non-zero byte to the destination buffer */
        *dst_write_ptr++ = src_byte;
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006454:	7efa      	ldrb	r2, [r7, #27]
 8006456:	701a      	strb	r2, [r3, #0]
        search_len++;
 8006458:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800645c:	3301      	adds	r3, #1
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (src_read_ptr >= src_end_ptr) {
 8006462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	429a      	cmp	r2, r3
 8006468:	d20f      	bcs.n	800648a <cobs_encode+0xea>
          break;
        }
        if (search_len == 0xFF) {
 800646a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800646e:	2bff      	cmp	r3, #255	; 0xff
 8006470:	d1cb      	bne.n	800640a <cobs_encode+0x6a>
          /* We have a long string of non-zero bytes, so we need
           * to write out a length code of 0xFF. */
          *dst_code_write_ptr = search_len;
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006478:	701a      	strb	r2, [r3, #0]
          dst_code_write_ptr = dst_write_ptr++;
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006480:	633b      	str	r3, [r7, #48]	; 0x30
          search_len = 1;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (dst_write_ptr >= dst_buf_end_ptr) {
 8006488:	e7bf      	b.n	800640a <cobs_encode+0x6a>
          break;
 800648a:	bf00      	nop

  /* We've reached the end of the source data (or possibly run out of output buffer)
   * Finalise the remaining output. In particular, write the code (length) byte.
   * Update the pointer to calculate the final output length.
   */
  if (dst_code_write_ptr >= dst_buf_end_ptr) {
 800648c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	429a      	cmp	r2, r3
 8006492:	d307      	bcc.n	80064a4 <cobs_encode+0x104>
    /* We've run out of output buffer to write the code byte. */
    result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8006494:	7d3b      	ldrb	r3, [r7, #20]
 8006496:	f043 0302 	orr.w	r3, r3, #2
 800649a:	b2db      	uxtb	r3, r3
 800649c:	753b      	strb	r3, [r7, #20]
    dst_write_ptr = dst_buf_end_ptr;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	e003      	b.n	80064ac <cobs_encode+0x10c>
  } else {
    /* Write the last code (length) byte. */
    *dst_code_write_ptr = search_len;
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80064aa:	701a      	strb	r2, [r3, #0]
  }

  /* Calculate the output length, from the value of dst_code_write_ptr */
  result.out_len = dst_write_ptr - dst_buf_start_ptr;
 80064ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	613b      	str	r3, [r7, #16]

  return result;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f107 0310 	add.w	r3, r7, #16
 80064bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80064c0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	373c      	adds	r7, #60	; 0x3c
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <cobs_decode>:
 *
 * returns:        A struct containing the success status of the decoding
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_decode_result cobs_decode(void *dst_buf_ptr, size_t dst_buf_len, const void *src_ptr, size_t src_len) {
 80064d0:	b480      	push	{r7}
 80064d2:	b08f      	sub	sp, #60	; 0x3c
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  cobs_decode_result result = {0, COBS_DECODE_OK};
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	2300      	movs	r3, #0
 80064e4:	753b      	strb	r3, [r7, #20]
  const uint8_t *src_read_ptr = src_ptr;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
  const uint8_t *src_end_ptr = src_read_ptr + src_len;
 80064ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ee:	4413      	add	r3, r2
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t *dst_buf_start_ptr = dst_buf_ptr;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t *dst_buf_end_ptr = dst_buf_start_ptr + dst_buf_len;
 80064f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	623b      	str	r3, [r7, #32]
  uint8_t *dst_write_ptr = dst_buf_ptr;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t src_byte;
  uint8_t i;
  uint8_t len_code;

  /* First, do a NULL pointer check and return immediately if it fails. */
  if ((dst_buf_ptr == NULL) || (src_ptr == NULL)) {
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <cobs_decode+0x3e>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <cobs_decode+0x54>
    result.status = COBS_DECODE_NULL_POINTER;
 800650e:	2301      	movs	r3, #1
 8006510:	753b      	strb	r3, [r7, #20]
    return result;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	461a      	mov	r2, r3
 8006516:	f107 0310 	add.w	r3, r7, #16
 800651a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800651e:	e882 0003 	stmia.w	r2, {r0, r1}
 8006522:	e07e      	b.n	8006622 <cobs_decode+0x152>
  }

  if (src_len != 0) {
 8006524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06f      	beq.n	800660a <cobs_decode+0x13a>
    for (;;) {
      len_code = *src_read_ptr++;
 800652a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	637a      	str	r2, [r7, #52]	; 0x34
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      if (len_code == 0) {
 8006536:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <cobs_decode+0x7a>
        result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 800653e:	7d3b      	ldrb	r3, [r7, #20]
 8006540:	f043 0304 	orr.w	r3, r3, #4
 8006544:	b2db      	uxtb	r3, r3
 8006546:	753b      	strb	r3, [r7, #20]
        break;
 8006548:	e05f      	b.n	800660a <cobs_decode+0x13a>
      }
      len_code--;
 800654a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800654e:	3b01      	subs	r3, #1
 8006550:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      /* Check length code against remaining input bytes */
      remaining_bytes = src_end_ptr - src_read_ptr;
 8006554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	61fb      	str	r3, [r7, #28]
      if (len_code > remaining_bytes) {
 800655c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	429a      	cmp	r2, r3
 8006564:	d207      	bcs.n	8006576 <cobs_decode+0xa6>
        result.status |= COBS_DECODE_INPUT_TOO_SHORT;
 8006566:	7d3b      	ldrb	r3, [r7, #20]
 8006568:	f043 0308 	orr.w	r3, r3, #8
 800656c:	b2db      	uxtb	r3, r3
 800656e:	753b      	strb	r3, [r7, #20]
        len_code = remaining_bytes;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

      /* Check length code against remaining output buffer space */
      remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	61fb      	str	r3, [r7, #28]
      if (len_code > remaining_bytes) {
 800657e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	429a      	cmp	r2, r3
 8006586:	d207      	bcs.n	8006598 <cobs_decode+0xc8>
        result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 8006588:	7d3b      	ldrb	r3, [r7, #20]
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	b2db      	uxtb	r3, r3
 8006590:	753b      	strb	r3, [r7, #20]
        len_code = remaining_bytes;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      }

      for (i = len_code; i != 0; i--) {
 8006598:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800659c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80065a0:	e016      	b.n	80065d0 <cobs_decode+0x100>
        src_byte = *src_read_ptr++;
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	637a      	str	r2, [r7, #52]	; 0x34
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	76fb      	strb	r3, [r7, #27]
        if (src_byte == 0) {
 80065ac:	7efb      	ldrb	r3, [r7, #27]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <cobs_decode+0xec>
          result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 80065b2:	7d3b      	ldrb	r3, [r7, #20]
 80065b4:	f043 0304 	orr.w	r3, r3, #4
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	753b      	strb	r3, [r7, #20]
        }
        *dst_write_ptr++ = src_byte;
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	633a      	str	r2, [r7, #48]	; 0x30
 80065c2:	7efa      	ldrb	r2, [r7, #27]
 80065c4:	701a      	strb	r2, [r3, #0]
      for (i = len_code; i != 0; i--) {
 80065c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ca:	3b01      	subs	r3, #1
 80065cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80065d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e4      	bne.n	80065a2 <cobs_decode+0xd2>
      }

      if (src_read_ptr >= src_end_ptr) {
 80065d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	429a      	cmp	r2, r3
 80065de:	d213      	bcs.n	8006608 <cobs_decode+0x138>
        break;
      }

      /* Add a zero to the end */
      if (len_code != 0xFE) {
 80065e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065e4:	2bfe      	cmp	r3, #254	; 0xfe
 80065e6:	d0a0      	beq.n	800652a <cobs_decode+0x5a>
        if (dst_write_ptr >= dst_buf_end_ptr) {
 80065e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d305      	bcc.n	80065fc <cobs_decode+0x12c>
          result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 80065f0:	7d3b      	ldrb	r3, [r7, #20]
 80065f2:	f043 0302 	orr.w	r3, r3, #2
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	753b      	strb	r3, [r7, #20]
          break;
 80065fa:	e006      	b.n	800660a <cobs_decode+0x13a>
        }
        *dst_write_ptr++ = 0;
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	633a      	str	r2, [r7, #48]	; 0x30
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
      len_code = *src_read_ptr++;
 8006606:	e790      	b.n	800652a <cobs_decode+0x5a>
        break;
 8006608:	bf00      	nop
      }
    }
  }

  result.out_len = dst_write_ptr - dst_buf_start_ptr;
 800660a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	613b      	str	r3, [r7, #16]

  return result;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	461a      	mov	r2, r3
 8006616:	f107 0310 	add.w	r3, r7, #16
 800661a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800661e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	373c      	adds	r7, #60	; 0x3c
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <_Z8crc_mathhh>:
// callers use crc8_byte

#ifdef CRC_MATH
// A basic implementation of CRC8 using only arithmetic

uint8_t crc_math(uint8_t data, uint8_t crc) {
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	4603      	mov	r3, r0
 8006636:	460a      	mov	r2, r1
 8006638:	71fb      	strb	r3, [r7, #7]
 800663a:	4613      	mov	r3, r2
 800663c:	71bb      	strb	r3, [r7, #6]
  uint8_t i = (data ^ crc);
 800663e:	79fa      	ldrb	r2, [r7, #7]
 8006640:	79bb      	ldrb	r3, [r7, #6]
 8006642:	4053      	eors	r3, r2
 8006644:	73fb      	strb	r3, [r7, #15]

  crc = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	71bb      	strb	r3, [r7, #6]

  if (i & 1)
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <_Z8crc_mathhh+0x2e>
    crc ^= 0x5e;
 8006654:	79bb      	ldrb	r3, [r7, #6]
 8006656:	f083 035e 	eor.w	r3, r3, #94	; 0x5e
 800665a:	71bb      	strb	r3, [r7, #6]
  if (i & 2)
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <_Z8crc_mathhh+0x42>
    crc ^= 0xbc;
 8006666:	79bb      	ldrb	r3, [r7, #6]
 8006668:	f083 0343 	eor.w	r3, r3, #67	; 0x43
 800666c:	43db      	mvns	r3, r3
 800666e:	71bb      	strb	r3, [r7, #6]
  if (i & 4)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <_Z8crc_mathhh+0x54>
    crc ^= 0x61;
 800667a:	79bb      	ldrb	r3, [r7, #6]
 800667c:	f083 0361 	eor.w	r3, r3, #97	; 0x61
 8006680:	71bb      	strb	r3, [r7, #6]
  if (i & 8)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <_Z8crc_mathhh+0x68>
    crc ^= 0xc2;
 800668c:	79bb      	ldrb	r3, [r7, #6]
 800668e:	f083 033d 	eor.w	r3, r3, #61	; 0x3d
 8006692:	43db      	mvns	r3, r3
 8006694:	71bb      	strb	r3, [r7, #6]
  if (i & 0x10)
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	d004      	beq.n	80066aa <_Z8crc_mathhh+0x7c>
    crc ^= 0x9d;
 80066a0:	79bb      	ldrb	r3, [r7, #6]
 80066a2:	f083 0362 	eor.w	r3, r3, #98	; 0x62
 80066a6:	43db      	mvns	r3, r3
 80066a8:	71bb      	strb	r3, [r7, #6]
  if (i & 0x20)
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <_Z8crc_mathhh+0x8e>
    crc ^= 0x23;
 80066b4:	79bb      	ldrb	r3, [r7, #6]
 80066b6:	f083 0323 	eor.w	r3, r3, #35	; 0x23
 80066ba:	71bb      	strb	r3, [r7, #6]
  if (i & 0x40)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <_Z8crc_mathhh+0xa0>
    crc ^= 0x46;
 80066c6:	79bb      	ldrb	r3, [r7, #6]
 80066c8:	f083 0346 	eor.w	r3, r3, #70	; 0x46
 80066cc:	71bb      	strb	r3, [r7, #6]
  if (i & 0x80)
 80066ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	da04      	bge.n	80066e0 <_Z8crc_mathhh+0xb2>
    crc ^= 0x8c;
 80066d6:	79bb      	ldrb	r3, [r7, #6]
 80066d8:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80066dc:	43db      	mvns	r3, r3
 80066de:	71bb      	strb	r3, [r7, #6]

  return crc;
 80066e0:	79bb      	ldrb	r3, [r7, #6]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <_Z9crc8_bytehh>:
/* Calculate the CRC for an individual byte using the method you have been chosen inside "crc8_inc.h"
 * data   :=    New byte use to calculate the crc
 * crc    :=    Previus CRC
 * return :=    CRC for the [oldCRC|data]
 */
uint8_t crc8_byte(uint8_t data, uint8_t crc) {
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	4603      	mov	r3, r0
 80066f6:	460a      	mov	r2, r1
 80066f8:	71fb      	strb	r3, [r7, #7]
 80066fa:	4613      	mov	r3, r2
 80066fc:	71bb      	strb	r3, [r7, #6]
#ifdef CRC_NIBBLES
  crc = crc_nibbles(data, crc);
#endif

#ifdef CRC_MATH
  crc = crc_math(data, crc);
 80066fe:	79ba      	ldrb	r2, [r7, #6]
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	4611      	mov	r1, r2
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff ff92 	bl	800662e <_Z8crc_mathhh>
 800670a:	4603      	mov	r3, r0
 800670c:	71bb      	strb	r3, [r7, #6]
#endif

  return crc;
 800670e:	79bb      	ldrb	r3, [r7, #6]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <_Z11crc8_streamPht>:

uint8_t crc8_stream(uint8_t *data, uint16_t length) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	807b      	strh	r3, [r7, #2]
  uint8_t crc = 0xff;
 8006724:	23ff      	movs	r3, #255	; 0xff
 8006726:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < length; i++) {
 8006728:	2300      	movs	r3, #0
 800672a:	81bb      	strh	r3, [r7, #12]
 800672c:	89ba      	ldrh	r2, [r7, #12]
 800672e:	887b      	ldrh	r3, [r7, #2]
 8006730:	429a      	cmp	r2, r3
 8006732:	d20e      	bcs.n	8006752 <_Z11crc8_streamPht+0x3a>
    crc = crc8_byte(data[i], crc);
 8006734:	89bb      	ldrh	r3, [r7, #12]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	7bfa      	ldrb	r2, [r7, #15]
 800673e:	4611      	mov	r1, r2
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff ffd4 	bl	80066ee <_Z9crc8_bytehh>
 8006746:	4603      	mov	r3, r0
 8006748:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < length; i++) {
 800674a:	89bb      	ldrh	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	81bb      	strh	r3, [r7, #12]
 8006750:	e7ec      	b.n	800672c <_Z11crc8_streamPht+0x14>
  }
  return crc;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006768:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800676c:	f002 f96a 	bl	8008a44 <USBD_static_malloc>
 8006770:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d105      	bne.n	8006784 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006780:	2302      	movs	r3, #2
 8006782:	e066      	b.n	8006852 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7c1b      	ldrb	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d119      	bne.n	80067c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006798:	2202      	movs	r2, #2
 800679a:	2181      	movs	r1, #129	; 0x81
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f002 f82e 	bl	80087fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ac:	2202      	movs	r2, #2
 80067ae:	2101      	movs	r1, #1
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 f824 	bl	80087fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2210      	movs	r2, #16
 80067c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80067c6:	e016      	b.n	80067f6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067c8:	2340      	movs	r3, #64	; 0x40
 80067ca:	2202      	movs	r2, #2
 80067cc:	2181      	movs	r1, #129	; 0x81
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f002 f815 	bl	80087fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067da:	2340      	movs	r3, #64	; 0x40
 80067dc:	2202      	movs	r2, #2
 80067de:	2101      	movs	r1, #1
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f002 f80c 	bl	80087fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2210      	movs	r2, #16
 80067f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067f6:	2308      	movs	r3, #8
 80067f8:	2203      	movs	r2, #3
 80067fa:	2182      	movs	r1, #130	; 0x82
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fffe 	bl	80087fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7c1b      	ldrb	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d109      	bne.n	8006840 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006836:	2101      	movs	r1, #1
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f002 f8cf 	bl	80089dc <USBD_LL_PrepareReceive>
 800683e:	e007      	b.n	8006850 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006846:	2340      	movs	r3, #64	; 0x40
 8006848:	2101      	movs	r1, #1
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f002 f8c6 	bl	80089dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006866:	2181      	movs	r1, #129	; 0x81
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 ffee 	bl	800884a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006874:	2101      	movs	r1, #1
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 ffe7 	bl	800884a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006884:	2182      	movs	r1, #130	; 0x82
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 ffdf 	bl	800884a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00e      	beq.n	80068c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b6:	4618      	mov	r0, r3
 80068b8:	f002 f8d2 	bl	8008a60 <USBD_static_free>
    pdev->pClassData = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e0af      	b.n	8006a58 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006900:	2b00      	cmp	r3, #0
 8006902:	d03f      	beq.n	8006984 <USBD_CDC_Setup+0xb4>
 8006904:	2b20      	cmp	r3, #32
 8006906:	f040 809f 	bne.w	8006a48 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	88db      	ldrh	r3, [r3, #6]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02e      	beq.n	8006970 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	b25b      	sxtb	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	da16      	bge.n	800694a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006928:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	88d2      	ldrh	r2, [r2, #6]
 800692e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	88db      	ldrh	r3, [r3, #6]
 8006934:	2b07      	cmp	r3, #7
 8006936:	bf28      	it	cs
 8006938:	2307      	movcs	r3, #7
 800693a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	89fa      	ldrh	r2, [r7, #14]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fb19 	bl	8007f7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006948:	e085      	b.n	8006a56 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	785a      	ldrb	r2, [r3, #1]
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	88db      	ldrh	r3, [r3, #6]
 8006958:	b2da      	uxtb	r2, r3
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006960:	6939      	ldr	r1, [r7, #16]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	461a      	mov	r2, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fb32 	bl	8007fd2 <USBD_CtlPrepareRx>
      break;
 800696e:	e072      	b.n	8006a56 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	7850      	ldrb	r0, [r2, #1]
 800697c:	2200      	movs	r2, #0
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	4798      	blx	r3
      break;
 8006982:	e068      	b.n	8006a56 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b0b      	cmp	r3, #11
 800698a:	d852      	bhi.n	8006a32 <USBD_CDC_Setup+0x162>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <USBD_CDC_Setup+0xc4>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069c5 	.word	0x080069c5
 8006998:	08006a41 	.word	0x08006a41
 800699c:	08006a33 	.word	0x08006a33
 80069a0:	08006a33 	.word	0x08006a33
 80069a4:	08006a33 	.word	0x08006a33
 80069a8:	08006a33 	.word	0x08006a33
 80069ac:	08006a33 	.word	0x08006a33
 80069b0:	08006a33 	.word	0x08006a33
 80069b4:	08006a33 	.word	0x08006a33
 80069b8:	08006a33 	.word	0x08006a33
 80069bc:	080069ef 	.word	0x080069ef
 80069c0:	08006a19 	.word	0x08006a19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d107      	bne.n	80069e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069d0:	f107 030a 	add.w	r3, r7, #10
 80069d4:	2202      	movs	r2, #2
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 face 	bl	8007f7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069de:	e032      	b.n	8006a46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fa58 	bl	8007e98 <USBD_CtlError>
            ret = USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	75fb      	strb	r3, [r7, #23]
          break;
 80069ec:	e02b      	b.n	8006a46 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d107      	bne.n	8006a0a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069fa:	f107 030d 	add.w	r3, r7, #13
 80069fe:	2201      	movs	r2, #1
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fab9 	bl	8007f7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a08:	e01d      	b.n	8006a46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 fa43 	bl	8007e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a12:	2303      	movs	r3, #3
 8006a14:	75fb      	strb	r3, [r7, #23]
          break;
 8006a16:	e016      	b.n	8006a46 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d00f      	beq.n	8006a44 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fa36 	bl	8007e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a30:	e008      	b.n	8006a44 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fa2f 	bl	8007e98 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a3e:	e002      	b.n	8006a46 <USBD_CDC_Setup+0x176>
          break;
 8006a40:	bf00      	nop
 8006a42:	e008      	b.n	8006a56 <USBD_CDC_Setup+0x186>
          break;
 8006a44:	bf00      	nop
      }
      break;
 8006a46:	e006      	b.n	8006a56 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fa24 	bl	8007e98 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	75fb      	strb	r3, [r7, #23]
      break;
 8006a54:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e04f      	b.n	8006b22 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a8a:	78fa      	ldrb	r2, [r7, #3]
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3318      	adds	r3, #24
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d029      	beq.n	8006af4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006aa0:	78fa      	ldrb	r2, [r7, #3]
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	3318      	adds	r3, #24
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	78f9      	ldrb	r1, [r7, #3]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	1a5b      	subs	r3, r3, r1
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4403      	add	r3, r0
 8006ac0:	3344      	adds	r3, #68	; 0x44
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ac8:	fb03 f301 	mul.w	r3, r3, r1
 8006acc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d110      	bne.n	8006af4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	3318      	adds	r3, #24
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ae6:	78f9      	ldrb	r1, [r7, #3]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2200      	movs	r2, #0
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 ff54 	bl	800899a <USBD_LL_Transmit>
 8006af2:	e015      	b.n	8006b20 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e015      	b.n	8006b78 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 ff64 	bl	8008a1e <USBD_LL_GetRxDataSize>
 8006b56:	4602      	mov	r2, r0
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b72:	4611      	mov	r1, r2
 8006b74:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e01b      	b.n	8006bd2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d015      	beq.n	8006bd0 <USBD_CDC_EP0_RxReady+0x50>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006baa:	2bff      	cmp	r3, #255	; 0xff
 8006bac:	d010      	beq.n	8006bd0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006bbc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	22ff      	movs	r2, #255	; 0xff
 8006bcc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2243      	movs	r2, #67	; 0x43
 8006be8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	20000094 	.word	0x20000094

08006bfc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2243      	movs	r2, #67	; 0x43
 8006c08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	20000050 	.word	0x20000050

08006c1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2243      	movs	r2, #67	; 0x43
 8006c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	200000d8 	.word	0x200000d8

08006c3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	220a      	movs	r2, #10
 8006c48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c4a:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	2000000c 	.word	0x2000000c

08006c5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e004      	b.n	8006c7a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b087      	sub	sp, #28
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c98:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e008      	b.n	8006cb6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e004      	b.n	8006ce8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e01a      	b.n	8006d4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d114      	bne.n	8006d4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d3e:	2181      	movs	r1, #129	; 0x81
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fe2a 	bl	800899a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e016      	b.n	8006da0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7c1b      	ldrb	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d84:	2101      	movs	r1, #1
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fe28 	bl	80089dc <USBD_LL_PrepareReceive>
 8006d8c:	e007      	b.n	8006d9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d94:	2340      	movs	r3, #64	; 0x40
 8006d96:	2101      	movs	r1, #1
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fe1f 	bl	80089dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	4613      	mov	r3, r2
 8006db4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e01f      	b.n	8006e00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	79fa      	ldrb	r2, [r7, #7]
 8006df2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f001 fc9b 	bl	8008730 <USBD_LL_Init>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e016      	b.n	8006e4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	f107 020e 	add.w	r2, r7, #14
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	4602      	mov	r2, r0
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fcb2 	bl	80087c8 <USBD_LL_Start>
 8006e64:	4603      	mov	r3, r0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	4611      	mov	r1, r2
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	4798      	blx	r3
  }

  return USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 ff90 	bl	8007e24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f12:	461a      	mov	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d01a      	beq.n	8006f5e <USBD_LL_SetupStage+0x72>
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d822      	bhi.n	8006f72 <USBD_LL_SetupStage+0x86>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <USBD_LL_SetupStage+0x4a>
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d00a      	beq.n	8006f4a <USBD_LL_SetupStage+0x5e>
 8006f34:	e01d      	b.n	8006f72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa62 	bl	8007408 <USBD_StdDevReq>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73fb      	strb	r3, [r7, #15]
      break;
 8006f48:	e020      	b.n	8006f8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fac6 	bl	80074e4 <USBD_StdItfReq>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5c:	e016      	b.n	8006f8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fb05 	bl	8007576 <USBD_StdEPReq>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e00c      	b.n	8006f8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fc81 	bl	8008888 <USBD_LL_StallEP>
 8006f86:	4603      	mov	r3, r0
 8006f88:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8a:	bf00      	nop
  }

  return ret;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006fa4:	7afb      	ldrb	r3, [r7, #11]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d138      	bne.n	800701c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006fb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d14a      	bne.n	8007052 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d913      	bls.n	8006ff0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	1ad2      	subs	r2, r2, r3
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	bf28      	it	cs
 8006fe2:	4613      	movcs	r3, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f001 f80f 	bl	800800c <USBD_CtlContinueRx>
 8006fee:	e030      	b.n	8007052 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d10b      	bne.n	8007014 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 f80a 	bl	800802e <USBD_CtlSendStatus>
 800701a:	e01a      	b.n	8007052 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b03      	cmp	r3, #3
 8007026:	d114      	bne.n	8007052 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00e      	beq.n	8007052 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	7afa      	ldrb	r2, [r7, #11]
 800703e:	4611      	mov	r1, r2
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	4798      	blx	r3
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	e000      	b.n	8007054 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	460b      	mov	r3, r1
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d16b      	bne.n	8007148 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3314      	adds	r3, #20
 8007074:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800707c:	2b02      	cmp	r3, #2
 800707e:	d156      	bne.n	800712e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	d914      	bls.n	80070b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	461a      	mov	r2, r3
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 ff84 	bl	8007fb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070a8:	2300      	movs	r3, #0
 80070aa:	2200      	movs	r2, #0
 80070ac:	2100      	movs	r1, #0
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f001 fc94 	bl	80089dc <USBD_LL_PrepareReceive>
 80070b4:	e03b      	b.n	800712e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d11c      	bne.n	80070fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d316      	bcc.n	80070fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070d8:	429a      	cmp	r2, r3
 80070da:	d20f      	bcs.n	80070fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070dc:	2200      	movs	r2, #0
 80070de:	2100      	movs	r1, #0
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 ff65 	bl	8007fb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ee:	2300      	movs	r3, #0
 80070f0:	2200      	movs	r2, #0
 80070f2:	2100      	movs	r1, #0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f001 fc71 	bl	80089dc <USBD_LL_PrepareReceive>
 80070fa:	e018      	b.n	800712e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b03      	cmp	r3, #3
 8007106:	d10b      	bne.n	8007120 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 fbb0 	bl	8008888 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 ff93 	bl	8008054 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007134:	2b01      	cmp	r3, #1
 8007136:	d122      	bne.n	800717e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff fe98 	bl	8006e6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007146:	e01a      	b.n	800717e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b03      	cmp	r3, #3
 8007152:	d114      	bne.n	800717e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00e      	beq.n	800717e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	7afa      	ldrb	r2, [r7, #11]
 800716a:	4611      	mov	r1, r2
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	4798      	blx	r3
 8007170:	4603      	mov	r3, r0
 8007172:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	e000      	b.n	8007180 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e02f      	b.n	800721c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00f      	beq.n	80071e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6852      	ldr	r2, [r2, #4]
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	4611      	mov	r1, r2
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071e6:	2340      	movs	r3, #64	; 0x40
 80071e8:	2200      	movs	r2, #0
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fb06 	bl	80087fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2240      	movs	r2, #64	; 0x40
 80071fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	2200      	movs	r2, #0
 8007206:	2180      	movs	r1, #128	; 0x80
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 faf8 	bl	80087fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	78fa      	ldrb	r2, [r7, #3]
 8007234:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007252:	b2da      	uxtb	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2204      	movs	r2, #4
 800725e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b04      	cmp	r3, #4
 8007282:	d106      	bne.n	8007292 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800728a:	b2da      	uxtb	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e012      	b.n	80072dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d10b      	bne.n	80072da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e014      	b.n	8007328 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b03      	cmp	r3, #3
 8007308:	d10d      	bne.n	8007326 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	4611      	mov	r1, r2
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007346:	2303      	movs	r3, #3
 8007348:	e014      	b.n	8007374 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b03      	cmp	r3, #3
 8007354:	d10d      	bne.n	8007372 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	4611      	mov	r1, r2
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d009      	beq.n	80073c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6852      	ldr	r2, [r2, #4]
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	4611      	mov	r1, r2
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	4798      	blx	r3
  }

  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b087      	sub	sp, #28
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	3301      	adds	r3, #1
 80073e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073e8:	8a3b      	ldrh	r3, [r7, #16]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	b21a      	sxth	r2, r3
 80073ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073f8:	89fb      	ldrh	r3, [r7, #14]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	d005      	beq.n	800742e <USBD_StdDevReq+0x26>
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d853      	bhi.n	80074ce <USBD_StdDevReq+0xc6>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <USBD_StdDevReq+0x3a>
 800742a:	2b20      	cmp	r3, #32
 800742c:	d14f      	bne.n	80074ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
      break;
 8007440:	e04a      	b.n	80074d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b09      	cmp	r3, #9
 8007448:	d83b      	bhi.n	80074c2 <USBD_StdDevReq+0xba>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <USBD_StdDevReq+0x48>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	080074a5 	.word	0x080074a5
 8007454:	080074b9 	.word	0x080074b9
 8007458:	080074c3 	.word	0x080074c3
 800745c:	080074af 	.word	0x080074af
 8007460:	080074c3 	.word	0x080074c3
 8007464:	08007483 	.word	0x08007483
 8007468:	08007479 	.word	0x08007479
 800746c:	080074c3 	.word	0x080074c3
 8007470:	0800749b 	.word	0x0800749b
 8007474:	0800748d 	.word	0x0800748d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9de 	bl	800783c <USBD_GetDescriptor>
          break;
 8007480:	e024      	b.n	80074cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fb43 	bl	8007b10 <USBD_SetAddress>
          break;
 800748a:	e01f      	b.n	80074cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fb82 	bl	8007b98 <USBD_SetConfig>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
          break;
 8007498:	e018      	b.n	80074cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc21 	bl	8007ce4 <USBD_GetConfig>
          break;
 80074a2:	e013      	b.n	80074cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fc52 	bl	8007d50 <USBD_GetStatus>
          break;
 80074ac:	e00e      	b.n	80074cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fc81 	bl	8007db8 <USBD_SetFeature>
          break;
 80074b6:	e009      	b.n	80074cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fc90 	bl	8007de0 <USBD_ClrFeature>
          break;
 80074c0:	e004      	b.n	80074cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fce7 	bl	8007e98 <USBD_CtlError>
          break;
 80074ca:	bf00      	nop
      }
      break;
 80074cc:	e004      	b.n	80074d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fce1 	bl	8007e98 <USBD_CtlError>
      break;
 80074d6:	bf00      	nop
  }

  return ret;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop

080074e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074fa:	2b40      	cmp	r3, #64	; 0x40
 80074fc:	d005      	beq.n	800750a <USBD_StdItfReq+0x26>
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	d82f      	bhi.n	8007562 <USBD_StdItfReq+0x7e>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <USBD_StdItfReq+0x26>
 8007506:	2b20      	cmp	r3, #32
 8007508:	d12b      	bne.n	8007562 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007510:	b2db      	uxtb	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	2b02      	cmp	r3, #2
 8007516:	d81d      	bhi.n	8007554 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	889b      	ldrh	r3, [r3, #4]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b01      	cmp	r3, #1
 8007520:	d813      	bhi.n	800754a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	88db      	ldrh	r3, [r3, #6]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d110      	bne.n	800755e <USBD_StdItfReq+0x7a>
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10d      	bne.n	800755e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fd73 	bl	800802e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007548:	e009      	b.n	800755e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fca3 	bl	8007e98 <USBD_CtlError>
          break;
 8007552:	e004      	b.n	800755e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fc9e 	bl	8007e98 <USBD_CtlError>
          break;
 800755c:	e000      	b.n	8007560 <USBD_StdItfReq+0x7c>
          break;
 800755e:	bf00      	nop
      }
      break;
 8007560:	e004      	b.n	800756c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fc97 	bl	8007e98 <USBD_CtlError>
      break;
 800756a:	bf00      	nop
  }

  return ret;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	889b      	ldrh	r3, [r3, #4]
 8007588:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d007      	beq.n	80075a6 <USBD_StdEPReq+0x30>
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	f200 8145 	bhi.w	8007826 <USBD_StdEPReq+0x2b0>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00c      	beq.n	80075ba <USBD_StdEPReq+0x44>
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	f040 8140 	bne.w	8007826 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]
      break;
 80075b8:	e13a      	b.n	8007830 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d007      	beq.n	80075d2 <USBD_StdEPReq+0x5c>
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	f300 8129 	bgt.w	800781a <USBD_StdEPReq+0x2a4>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d07f      	beq.n	80076cc <USBD_StdEPReq+0x156>
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d03c      	beq.n	800764a <USBD_StdEPReq+0xd4>
 80075d0:	e123      	b.n	800781a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d002      	beq.n	80075e4 <USBD_StdEPReq+0x6e>
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d016      	beq.n	8007610 <USBD_StdEPReq+0x9a>
 80075e2:	e02c      	b.n	800763e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00d      	beq.n	8007606 <USBD_StdEPReq+0x90>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d00a      	beq.n	8007606 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 f947 	bl	8008888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075fa:	2180      	movs	r1, #128	; 0x80
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f943 	bl	8008888 <USBD_LL_StallEP>
 8007602:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007604:	e020      	b.n	8007648 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc45 	bl	8007e98 <USBD_CtlError>
              break;
 800760e:	e01b      	b.n	8007648 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	885b      	ldrh	r3, [r3, #2]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10e      	bne.n	8007636 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <USBD_StdEPReq+0xc0>
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	2b80      	cmp	r3, #128	; 0x80
 8007622:	d008      	beq.n	8007636 <USBD_StdEPReq+0xc0>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	88db      	ldrh	r3, [r3, #6]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f929 	bl	8008888 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fcf9 	bl	800802e <USBD_CtlSendStatus>

              break;
 800763c:	e004      	b.n	8007648 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fc29 	bl	8007e98 <USBD_CtlError>
              break;
 8007646:	bf00      	nop
          }
          break;
 8007648:	e0ec      	b.n	8007824 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d002      	beq.n	800765c <USBD_StdEPReq+0xe6>
 8007656:	2b03      	cmp	r3, #3
 8007658:	d016      	beq.n	8007688 <USBD_StdEPReq+0x112>
 800765a:	e030      	b.n	80076be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00d      	beq.n	800767e <USBD_StdEPReq+0x108>
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d00a      	beq.n	800767e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f90b 	bl	8008888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007672:	2180      	movs	r1, #128	; 0x80
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 f907 	bl	8008888 <USBD_LL_StallEP>
 800767a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800767c:	e025      	b.n	80076ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fc09 	bl	8007e98 <USBD_CtlError>
              break;
 8007686:	e020      	b.n	80076ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	885b      	ldrh	r3, [r3, #2]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d11b      	bne.n	80076c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f911 	bl	80088c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fcc2 	bl	800802e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fbe9 	bl	8007e98 <USBD_CtlError>
              break;
 80076c6:	e000      	b.n	80076ca <USBD_StdEPReq+0x154>
              break;
 80076c8:	bf00      	nop
          }
          break;
 80076ca:	e0ab      	b.n	8007824 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d002      	beq.n	80076de <USBD_StdEPReq+0x168>
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d032      	beq.n	8007742 <USBD_StdEPReq+0x1cc>
 80076dc:	e097      	b.n	800780e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <USBD_StdEPReq+0x17e>
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b80      	cmp	r3, #128	; 0x80
 80076e8:	d004      	beq.n	80076f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fbd3 	bl	8007e98 <USBD_CtlError>
                break;
 80076f2:	e091      	b.n	8007818 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	da0b      	bge.n	8007714 <USBD_StdEPReq+0x19e>
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	3310      	adds	r3, #16
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	4413      	add	r3, r2
 8007710:	3304      	adds	r3, #4
 8007712:	e00b      	b.n	800772c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	3304      	adds	r3, #4
 800772c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2202      	movs	r2, #2
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fc1d 	bl	8007f7a <USBD_CtlSendData>
              break;
 8007740:	e06a      	b.n	8007818 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007746:	2b00      	cmp	r3, #0
 8007748:	da11      	bge.n	800776e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3324      	adds	r3, #36	; 0x24
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d117      	bne.n	8007794 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fb96 	bl	8007e98 <USBD_CtlError>
                  break;
 800776c:	e054      	b.n	8007818 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	f003 020f 	and.w	r2, r3, #15
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fb83 	bl	8007e98 <USBD_CtlError>
                  break;
 8007792:	e041      	b.n	8007818 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007798:	2b00      	cmp	r3, #0
 800779a:	da0b      	bge.n	80077b4 <USBD_StdEPReq+0x23e>
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	3310      	adds	r3, #16
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	4413      	add	r3, r2
 80077b0:	3304      	adds	r3, #4
 80077b2:	e00b      	b.n	80077cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4413      	add	r3, r2
 80077ca:	3304      	adds	r3, #4
 80077cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <USBD_StdEPReq+0x264>
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b80      	cmp	r3, #128	; 0x80
 80077d8:	d103      	bne.n	80077e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	e00e      	b.n	8007800 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 f88c 	bl	8008904 <USBD_LL_IsStallEP>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2201      	movs	r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e002      	b.n	8007800 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2202      	movs	r2, #2
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fbb7 	bl	8007f7a <USBD_CtlSendData>
              break;
 800780c:	e004      	b.n	8007818 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fb41 	bl	8007e98 <USBD_CtlError>
              break;
 8007816:	bf00      	nop
          }
          break;
 8007818:	e004      	b.n	8007824 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb3b 	bl	8007e98 <USBD_CtlError>
          break;
 8007822:	bf00      	nop
      }
      break;
 8007824:	e004      	b.n	8007830 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb35 	bl	8007e98 <USBD_CtlError>
      break;
 800782e:	bf00      	nop
  }

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	885b      	ldrh	r3, [r3, #2]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	2b06      	cmp	r3, #6
 800785e:	f200 8128 	bhi.w	8007ab2 <USBD_GetDescriptor+0x276>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <USBD_GetDescriptor+0x2c>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007885 	.word	0x08007885
 800786c:	0800789d 	.word	0x0800789d
 8007870:	080078dd 	.word	0x080078dd
 8007874:	08007ab3 	.word	0x08007ab3
 8007878:	08007ab3 	.word	0x08007ab3
 800787c:	08007a53 	.word	0x08007a53
 8007880:	08007a7f 	.word	0x08007a7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
      break;
 800789a:	e112      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7c1b      	ldrb	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f107 0208 	add.w	r2, r7, #8
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078be:	e100      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	f107 0208 	add.w	r2, r7, #8
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
 80078d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	2202      	movs	r2, #2
 80078d8:	701a      	strb	r2, [r3, #0]
      break;
 80078da:	e0f2      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	f200 80ac 	bhi.w	8007a40 <USBD_GetDescriptor+0x204>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBD_GetDescriptor+0xb4>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007909 	.word	0x08007909
 80078f4:	0800793d 	.word	0x0800793d
 80078f8:	08007971 	.word	0x08007971
 80078fc:	080079a5 	.word	0x080079a5
 8007900:	080079d9 	.word	0x080079d9
 8007904:	08007a0d 	.word	0x08007a0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e091      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fab2 	bl	8007e98 <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e089      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	7c12      	ldrb	r2, [r2, #16]
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795e:	e077      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa98 	bl	8007e98 <USBD_CtlError>
            err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
          break;
 800796e:	e06f      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007992:	e05d      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa7e 	bl	8007e98 <USBD_CtlError>
            err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
          break;
 80079a2:	e055      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e043      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa64 	bl	8007e98 <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e03b      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e029      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa4a 	bl	8007e98 <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e021      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e00f      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa30 	bl	8007e98 <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e007      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa28 	bl	8007e98 <USBD_CtlError>
          err++;
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a4e:	bf00      	nop
      }
      break;
 8007a50:	e037      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7c1b      	ldrb	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	f107 0208 	add.w	r2, r7, #8
 8007a66:	4610      	mov	r0, r2
 8007a68:	4798      	blx	r3
 8007a6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a6c:	e029      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fa11 	bl	8007e98 <USBD_CtlError>
        err++;
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a7c:	e021      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	7c1b      	ldrb	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10d      	bne.n	8007aa2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	f107 0208 	add.w	r2, r7, #8
 8007a92:	4610      	mov	r0, r2
 8007a94:	4798      	blx	r3
 8007a96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aa0:	e00f      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f9f7 	bl	8007e98 <USBD_CtlError>
        err++;
 8007aaa:	7afb      	ldrb	r3, [r7, #11]
 8007aac:	3301      	adds	r3, #1
 8007aae:	72fb      	strb	r3, [r7, #11]
      break;
 8007ab0:	e007      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9ef 	bl	8007e98 <USBD_CtlError>
      err++;
 8007aba:	7afb      	ldrb	r3, [r7, #11]
 8007abc:	3301      	adds	r3, #1
 8007abe:	72fb      	strb	r3, [r7, #11]
      break;
 8007ac0:	bf00      	nop
  }

  if (err != 0U)
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11e      	bne.n	8007b06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	88db      	ldrh	r3, [r3, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d016      	beq.n	8007afe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ad0:	893b      	ldrh	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	88da      	ldrh	r2, [r3, #6]
 8007ada:	893b      	ldrh	r3, [r7, #8]
 8007adc:	4293      	cmp	r3, r2
 8007ade:	bf28      	it	cs
 8007ae0:	4613      	movcs	r3, r2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ae6:	893b      	ldrh	r3, [r7, #8]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fa44 	bl	8007f7a <USBD_CtlSendData>
 8007af2:	e009      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f9ce 	bl	8007e98 <USBD_CtlError>
 8007afc:	e004      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa95 	bl	800802e <USBD_CtlSendStatus>
 8007b04:	e000      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
    return;
 8007b06:	bf00      	nop
  }
}
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	889b      	ldrh	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d131      	bne.n	8007b86 <USBD_SetAddress+0x76>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88db      	ldrh	r3, [r3, #6]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d12d      	bne.n	8007b86 <USBD_SetAddress+0x76>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b30:	d829      	bhi.n	8007b86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	885b      	ldrh	r3, [r3, #2]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d104      	bne.n	8007b54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9a3 	bl	8007e98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b52:	e01d      	b.n	8007b90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7bfa      	ldrb	r2, [r7, #15]
 8007b58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fefb 	bl	800895c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa61 	bl	800802e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7a:	e009      	b.n	8007b90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b84:	e004      	b.n	8007b90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f985 	bl	8007e98 <USBD_CtlError>
  }
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	885b      	ldrh	r3, [r3, #2]
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	4b4c      	ldr	r3, [pc, #304]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007bae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bb0:	4b4b      	ldr	r3, [pc, #300]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d905      	bls.n	8007bc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f96c 	bl	8007e98 <USBD_CtlError>
    return USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e088      	b.n	8007cd6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d002      	beq.n	8007bd6 <USBD_SetConfig+0x3e>
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d025      	beq.n	8007c20 <USBD_SetConfig+0x88>
 8007bd4:	e071      	b.n	8007cba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bd6:	4b42      	ldr	r3, [pc, #264]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01c      	beq.n	8007c18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007bde:	4b40      	ldr	r3, [pc, #256]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007be8:	4b3d      	ldr	r3, [pc, #244]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff f948 	bl	8006e84 <USBD_SetClassConfig>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d004      	beq.n	8007c08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f949 	bl	8007e98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c06:	e065      	b.n	8007cd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fa10 	bl	800802e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2203      	movs	r2, #3
 8007c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c16:	e05d      	b.n	8007cd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fa08 	bl	800802e <USBD_CtlSendStatus>
      break;
 8007c1e:	e059      	b.n	8007cd4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c20:	4b2f      	ldr	r3, [pc, #188]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d112      	bne.n	8007c4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c30:	4b2b      	ldr	r3, [pc, #172]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c3a:	4b29      	ldr	r3, [pc, #164]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff f93b 	bl	8006ebc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f9f1 	bl	800802e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c4c:	e042      	b.n	8007cd4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c4e:	4b24      	ldr	r3, [pc, #144]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d02a      	beq.n	8007cb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff f929 	bl	8006ebc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c74:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff f902 	bl	8006e84 <USBD_SetClassConfig>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00f      	beq.n	8007caa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f903 	bl	8007e98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff f90e 	bl	8006ebc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ca8:	e014      	b.n	8007cd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9bf 	bl	800802e <USBD_CtlSendStatus>
      break;
 8007cb0:	e010      	b.n	8007cd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9bb 	bl	800802e <USBD_CtlSendStatus>
      break;
 8007cb8:	e00c      	b.n	8007cd4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f8eb 	bl	8007e98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cc2:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <USBD_SetConfig+0x148>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff f8f7 	bl	8006ebc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	bf00      	nop
  }

  return ret;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000664 	.word	0x20000664

08007ce4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d004      	beq.n	8007d00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f8cd 	bl	8007e98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cfe:	e023      	b.n	8007d48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	dc02      	bgt.n	8007d12 <USBD_GetConfig+0x2e>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dc03      	bgt.n	8007d18 <USBD_GetConfig+0x34>
 8007d10:	e015      	b.n	8007d3e <USBD_GetConfig+0x5a>
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d00b      	beq.n	8007d2e <USBD_GetConfig+0x4a>
 8007d16:	e012      	b.n	8007d3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3308      	adds	r3, #8
 8007d22:	2201      	movs	r2, #1
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f927 	bl	8007f7a <USBD_CtlSendData>
        break;
 8007d2c:	e00c      	b.n	8007d48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3304      	adds	r3, #4
 8007d32:	2201      	movs	r2, #1
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f91f 	bl	8007f7a <USBD_CtlSendData>
        break;
 8007d3c:	e004      	b.n	8007d48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f8a9 	bl	8007e98 <USBD_CtlError>
        break;
 8007d46:	bf00      	nop
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d81e      	bhi.n	8007da6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	88db      	ldrh	r3, [r3, #6]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d004      	beq.n	8007d7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f890 	bl	8007e98 <USBD_CtlError>
        break;
 8007d78:	e01a      	b.n	8007db0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f043 0202 	orr.w	r2, r3, #2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f8eb 	bl	8007f7a <USBD_CtlSendData>
      break;
 8007da4:	e004      	b.n	8007db0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f875 	bl	8007e98 <USBD_CtlError>
      break;
 8007dae:	bf00      	nop
  }
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d106      	bne.n	8007dd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f92b 	bl	800802e <USBD_CtlSendStatus>
  }
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d80b      	bhi.n	8007e10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	885b      	ldrh	r3, [r3, #2]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d10c      	bne.n	8007e1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f910 	bl	800802e <USBD_CtlSendStatus>
      }
      break;
 8007e0e:	e004      	b.n	8007e1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f840 	bl	8007e98 <USBD_CtlError>
      break;
 8007e18:	e000      	b.n	8007e1c <USBD_ClrFeature+0x3c>
      break;
 8007e1a:	bf00      	nop
  }
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	781a      	ldrb	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff fabb 	bl	80073ca <SWAPBYTE>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff faae 	bl	80073ca <SWAPBYTE>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	461a      	mov	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff faa1 	bl	80073ca <SWAPBYTE>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	80da      	strh	r2, [r3, #6]
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ea2:	2180      	movs	r1, #128	; 0x80
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fcef 	bl	8008888 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007eaa:	2100      	movs	r1, #0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fceb 	bl	8008888 <USBD_LL_StallEP>
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b086      	sub	sp, #24
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d036      	beq.n	8007f3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ed4:	6938      	ldr	r0, [r7, #16]
 8007ed6:	f000 f836 	bl	8007f46 <USBD_GetLen>
 8007eda:	4603      	mov	r3, r0
 8007edc:	3301      	adds	r3, #1
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	4413      	add	r3, r2
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	7812      	ldrb	r2, [r2, #0]
 8007ef2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	4413      	add	r3, r2
 8007f00:	2203      	movs	r2, #3
 8007f02:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	3301      	adds	r3, #1
 8007f08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f0a:	e013      	b.n	8007f34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	4413      	add	r3, r2
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	613b      	str	r3, [r7, #16]
    idx++;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	3301      	adds	r3, #1
 8007f22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4413      	add	r3, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	3301      	adds	r3, #1
 8007f32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e7      	bne.n	8007f0c <USBD_GetString+0x52>
 8007f3c:	e000      	b.n	8007f40 <USBD_GetString+0x86>
    return;
 8007f3e:	bf00      	nop
  }
}
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f56:	e005      	b.n	8007f64 <USBD_GetLen+0x1e>
  {
    len++;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1f5      	bne.n	8007f58 <USBD_GetLen+0x12>
  }

  return len;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fcfa 	bl	800899a <USBD_LL_Transmit>

  return USBD_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 fce9 	bl	800899a <USBD_LL_Transmit>

  return USBD_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2203      	movs	r2, #3
 8007fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 fced 	bl	80089dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	2100      	movs	r1, #0
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fcdc 	bl	80089dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2204      	movs	r2, #4
 800803a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800803e:	2300      	movs	r3, #0
 8008040:	2200      	movs	r2, #0
 8008042:	2100      	movs	r1, #0
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fca8 	bl	800899a <USBD_LL_Transmit>

  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2205      	movs	r2, #5
 8008060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008064:	2300      	movs	r3, #0
 8008066:	2200      	movs	r2, #0
 8008068:	2100      	movs	r1, #0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fcb6 	bl	80089dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008080:	2200      	movs	r2, #0
 8008082:	4912      	ldr	r1, [pc, #72]	; (80080cc <MX_USB_DEVICE_Init+0x50>)
 8008084:	4812      	ldr	r0, [pc, #72]	; (80080d0 <MX_USB_DEVICE_Init+0x54>)
 8008086:	f7fe fe8f 	bl	8006da8 <USBD_Init>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008090:	f7f8 fc7c 	bl	800098c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008094:	490f      	ldr	r1, [pc, #60]	; (80080d4 <MX_USB_DEVICE_Init+0x58>)
 8008096:	480e      	ldr	r0, [pc, #56]	; (80080d0 <MX_USB_DEVICE_Init+0x54>)
 8008098:	f7fe feb6 	bl	8006e08 <USBD_RegisterClass>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080a2:	f7f8 fc73 	bl	800098c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080a6:	490c      	ldr	r1, [pc, #48]	; (80080d8 <MX_USB_DEVICE_Init+0x5c>)
 80080a8:	4809      	ldr	r0, [pc, #36]	; (80080d0 <MX_USB_DEVICE_Init+0x54>)
 80080aa:	f7fe fdd7 	bl	8006c5c <USBD_CDC_RegisterInterface>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080b4:	f7f8 fc6a 	bl	800098c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080b8:	4805      	ldr	r0, [pc, #20]	; (80080d0 <MX_USB_DEVICE_Init+0x54>)
 80080ba:	f7fe fecc 	bl	8006e56 <USBD_Start>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080c4:	f7f8 fc62 	bl	800098c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080c8:	bf00      	nop
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20000130 	.word	0x20000130
 80080d0:	2000088c 	.word	0x2000088c
 80080d4:	20000018 	.word	0x20000018
 80080d8:	2000011c 	.word	0x2000011c

080080dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080e0:	2200      	movs	r2, #0
 80080e2:	4905      	ldr	r1, [pc, #20]	; (80080f8 <CDC_Init_FS+0x1c>)
 80080e4:	4805      	ldr	r0, [pc, #20]	; (80080fc <CDC_Init_FS+0x20>)
 80080e6:	f7fe fdce 	bl	8006c86 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080ea:	4905      	ldr	r1, [pc, #20]	; (8008100 <CDC_Init_FS+0x24>)
 80080ec:	4803      	ldr	r0, [pc, #12]	; (80080fc <CDC_Init_FS+0x20>)
 80080ee:	f7fe fde8 	bl	8006cc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	2000135c 	.word	0x2000135c
 80080fc:	2000088c 	.word	0x2000088c
 8008100:	20000b5c 	.word	0x20000b5c

08008104 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008108:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800810a:	4618      	mov	r0, r3
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	4603      	mov	r3, r0
 800811c:	6039      	str	r1, [r7, #0]
 800811e:	71fb      	strb	r3, [r7, #7]
 8008120:	4613      	mov	r3, r2
 8008122:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b23      	cmp	r3, #35	; 0x23
 8008128:	d84a      	bhi.n	80081c0 <CDC_Control_FS+0xac>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <CDC_Control_FS+0x1c>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	080081c1 	.word	0x080081c1
 8008134:	080081c1 	.word	0x080081c1
 8008138:	080081c1 	.word	0x080081c1
 800813c:	080081c1 	.word	0x080081c1
 8008140:	080081c1 	.word	0x080081c1
 8008144:	080081c1 	.word	0x080081c1
 8008148:	080081c1 	.word	0x080081c1
 800814c:	080081c1 	.word	0x080081c1
 8008150:	080081c1 	.word	0x080081c1
 8008154:	080081c1 	.word	0x080081c1
 8008158:	080081c1 	.word	0x080081c1
 800815c:	080081c1 	.word	0x080081c1
 8008160:	080081c1 	.word	0x080081c1
 8008164:	080081c1 	.word	0x080081c1
 8008168:	080081c1 	.word	0x080081c1
 800816c:	080081c1 	.word	0x080081c1
 8008170:	080081c1 	.word	0x080081c1
 8008174:	080081c1 	.word	0x080081c1
 8008178:	080081c1 	.word	0x080081c1
 800817c:	080081c1 	.word	0x080081c1
 8008180:	080081c1 	.word	0x080081c1
 8008184:	080081c1 	.word	0x080081c1
 8008188:	080081c1 	.word	0x080081c1
 800818c:	080081c1 	.word	0x080081c1
 8008190:	080081c1 	.word	0x080081c1
 8008194:	080081c1 	.word	0x080081c1
 8008198:	080081c1 	.word	0x080081c1
 800819c:	080081c1 	.word	0x080081c1
 80081a0:	080081c1 	.word	0x080081c1
 80081a4:	080081c1 	.word	0x080081c1
 80081a8:	080081c1 	.word	0x080081c1
 80081ac:	080081c1 	.word	0x080081c1
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	080081c1 	.word	0x080081c1
 80081b8:	080081c1 	.word	0x080081c1
 80081bc:	080081c1 	.word	0x080081c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081c0:	bf00      	nop
  }

  return (USBD_OK);
 80081c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	4805      	ldr	r0, [pc, #20]	; (80081f4 <CDC_Receive_FS+0x24>)
 80081de:	f7fe fd70 	bl	8006cc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081e2:	4804      	ldr	r0, [pc, #16]	; (80081f4 <CDC_Receive_FS+0x24>)
 80081e4:	f7fe fdb6 	bl	8006d54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	2000088c 	.word	0x2000088c

080081f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008208:	4b0d      	ldr	r3, [pc, #52]	; (8008240 <CDC_Transmit_FS+0x48>)
 800820a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800820e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800821a:	2301      	movs	r3, #1
 800821c:	e00b      	b.n	8008236 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800821e:	887b      	ldrh	r3, [r7, #2]
 8008220:	461a      	mov	r2, r3
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4806      	ldr	r0, [pc, #24]	; (8008240 <CDC_Transmit_FS+0x48>)
 8008226:	f7fe fd2e 	bl	8006c86 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800822a:	4805      	ldr	r0, [pc, #20]	; (8008240 <CDC_Transmit_FS+0x48>)
 800822c:	f7fe fd62 	bl	8006cf4 <USBD_CDC_TransmitPacket>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	2000088c 	.word	0x2000088c

08008244 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800825a:	4618      	mov	r0, r3
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	4603      	mov	r3, r0
 8008270:	6039      	str	r1, [r7, #0]
 8008272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2212      	movs	r2, #18
 8008278:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800827a:	4b03      	ldr	r3, [pc, #12]	; (8008288 <USBD_FS_DeviceDescriptor+0x20>)
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	2000014c 	.word	0x2000014c

0800828c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	6039      	str	r1, [r7, #0]
 8008296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2204      	movs	r2, #4
 800829c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800829e:	4b03      	ldr	r3, [pc, #12]	; (80082ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	20000160 	.word	0x20000160

080082b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d105      	bne.n	80082ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	4907      	ldr	r1, [pc, #28]	; (80082e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80082c6:	4808      	ldr	r0, [pc, #32]	; (80082e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80082c8:	f7ff fdf7 	bl	8007eba <USBD_GetString>
 80082cc:	e004      	b.n	80082d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	4904      	ldr	r1, [pc, #16]	; (80082e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80082d2:	4805      	ldr	r0, [pc, #20]	; (80082e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80082d4:	f7ff fdf1 	bl	8007eba <USBD_GetString>
  }
  return USBD_StrDesc;
 80082d8:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20001b5c 	.word	0x20001b5c
 80082e8:	08008c30 	.word	0x08008c30

080082ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	6039      	str	r1, [r7, #0]
 80082f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	4904      	ldr	r1, [pc, #16]	; (800830c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082fc:	4804      	ldr	r0, [pc, #16]	; (8008310 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082fe:	f7ff fddc 	bl	8007eba <USBD_GetString>
  return USBD_StrDesc;
 8008302:	4b02      	ldr	r3, [pc, #8]	; (800830c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20001b5c 	.word	0x20001b5c
 8008310:	08008c48 	.word	0x08008c48

08008314 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	6039      	str	r1, [r7, #0]
 800831e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	221a      	movs	r2, #26
 8008324:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008326:	f000 f843 	bl	80083b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800832a:	4b02      	ldr	r3, [pc, #8]	; (8008334 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	20000164 	.word	0x20000164

08008338 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	4907      	ldr	r1, [pc, #28]	; (800836c <USBD_FS_ConfigStrDescriptor+0x34>)
 800834e:	4808      	ldr	r0, [pc, #32]	; (8008370 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008350:	f7ff fdb3 	bl	8007eba <USBD_GetString>
 8008354:	e004      	b.n	8008360 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	4904      	ldr	r1, [pc, #16]	; (800836c <USBD_FS_ConfigStrDescriptor+0x34>)
 800835a:	4805      	ldr	r0, [pc, #20]	; (8008370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800835c:	f7ff fdad 	bl	8007eba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008360:	4b02      	ldr	r3, [pc, #8]	; (800836c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20001b5c 	.word	0x20001b5c
 8008370:	08008c5c 	.word	0x08008c5c

08008374 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	4603      	mov	r3, r0
 800837c:	6039      	str	r1, [r7, #0]
 800837e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d105      	bne.n	8008392 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	4907      	ldr	r1, [pc, #28]	; (80083a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800838a:	4808      	ldr	r0, [pc, #32]	; (80083ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800838c:	f7ff fd95 	bl	8007eba <USBD_GetString>
 8008390:	e004      	b.n	800839c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4904      	ldr	r1, [pc, #16]	; (80083a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008396:	4805      	ldr	r0, [pc, #20]	; (80083ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008398:	f7ff fd8f 	bl	8007eba <USBD_GetString>
  }
  return USBD_StrDesc;
 800839c:	4b02      	ldr	r3, [pc, #8]	; (80083a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20001b5c 	.word	0x20001b5c
 80083ac:	08008c68 	.word	0x08008c68

080083b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083b6:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <Get_SerialNum+0x44>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083bc:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <Get_SerialNum+0x48>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083c2:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <Get_SerialNum+0x4c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083d6:	2208      	movs	r2, #8
 80083d8:	4909      	ldr	r1, [pc, #36]	; (8008400 <Get_SerialNum+0x50>)
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f814 	bl	8008408 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083e0:	2204      	movs	r2, #4
 80083e2:	4908      	ldr	r1, [pc, #32]	; (8008404 <Get_SerialNum+0x54>)
 80083e4:	68b8      	ldr	r0, [r7, #8]
 80083e6:	f000 f80f 	bl	8008408 <IntToUnicode>
  }
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	1fff7a10 	.word	0x1fff7a10
 80083f8:	1fff7a14 	.word	0x1fff7a14
 80083fc:	1fff7a18 	.word	0x1fff7a18
 8008400:	20000166 	.word	0x20000166
 8008404:	20000176 	.word	0x20000176

08008408 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800841a:	2300      	movs	r3, #0
 800841c:	75fb      	strb	r3, [r7, #23]
 800841e:	e027      	b.n	8008470 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	0f1b      	lsrs	r3, r3, #28
 8008424:	2b09      	cmp	r3, #9
 8008426:	d80b      	bhi.n	8008440 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	0f1b      	lsrs	r3, r3, #28
 800842c:	b2da      	uxtb	r2, r3
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4619      	mov	r1, r3
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	440b      	add	r3, r1
 8008438:	3230      	adds	r2, #48	; 0x30
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	e00a      	b.n	8008456 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	0f1b      	lsrs	r3, r3, #28
 8008444:	b2da      	uxtb	r2, r3
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	4619      	mov	r1, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	440b      	add	r3, r1
 8008450:	3237      	adds	r2, #55	; 0x37
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	011b      	lsls	r3, r3, #4
 800845a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	3301      	adds	r3, #1
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	4413      	add	r3, r2
 8008466:	2200      	movs	r2, #0
 8008468:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	3301      	adds	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
 8008470:	7dfa      	ldrb	r2, [r7, #23]
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	429a      	cmp	r2, r3
 8008476:	d3d3      	bcc.n	8008420 <IntToUnicode+0x18>
  }
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
	...

08008488 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	; 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008490:	f107 0314 	add.w	r3, r7, #20
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	605a      	str	r2, [r3, #4]
 800849a:	609a      	str	r2, [r3, #8]
 800849c:	60da      	str	r2, [r3, #12]
 800849e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084a8:	d147      	bne.n	800853a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084aa:	2300      	movs	r3, #0
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	4b25      	ldr	r3, [pc, #148]	; (8008544 <HAL_PCD_MspInit+0xbc>)
 80084b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b2:	4a24      	ldr	r2, [pc, #144]	; (8008544 <HAL_PCD_MspInit+0xbc>)
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	6313      	str	r3, [r2, #48]	; 0x30
 80084ba:	4b22      	ldr	r3, [pc, #136]	; (8008544 <HAL_PCD_MspInit+0xbc>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80084c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80084d4:	f107 0314 	add.w	r3, r7, #20
 80084d8:	4619      	mov	r1, r3
 80084da:	481b      	ldr	r0, [pc, #108]	; (8008548 <HAL_PCD_MspInit+0xc0>)
 80084dc:	f7f9 fcf4 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084e6:	2302      	movs	r3, #2
 80084e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ee:	2300      	movs	r3, #0
 80084f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084f2:	230a      	movs	r3, #10
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084f6:	f107 0314 	add.w	r3, r7, #20
 80084fa:	4619      	mov	r1, r3
 80084fc:	4812      	ldr	r0, [pc, #72]	; (8008548 <HAL_PCD_MspInit+0xc0>)
 80084fe:	f7f9 fce3 	bl	8001ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008502:	4b10      	ldr	r3, [pc, #64]	; (8008544 <HAL_PCD_MspInit+0xbc>)
 8008504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008506:	4a0f      	ldr	r2, [pc, #60]	; (8008544 <HAL_PCD_MspInit+0xbc>)
 8008508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850c:	6353      	str	r3, [r2, #52]	; 0x34
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <HAL_PCD_MspInit+0xbc>)
 8008514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008516:	4a0b      	ldr	r2, [pc, #44]	; (8008544 <HAL_PCD_MspInit+0xbc>)
 8008518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800851c:	6453      	str	r3, [r2, #68]	; 0x44
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <HAL_PCD_MspInit+0xbc>)
 8008520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800852a:	2200      	movs	r2, #0
 800852c:	2100      	movs	r1, #0
 800852e:	2043      	movs	r0, #67	; 0x43
 8008530:	f7f9 fc93 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008534:	2043      	movs	r0, #67	; 0x43
 8008536:	f7f9 fcac 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800853a:	bf00      	nop
 800853c:	3728      	adds	r7, #40	; 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	40023800 	.word	0x40023800
 8008548:	40020000 	.word	0x40020000

0800854c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008560:	4619      	mov	r1, r3
 8008562:	4610      	mov	r0, r2
 8008564:	f7fe fcc2 	bl	8006eec <USBD_LL_SetupStage>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	4613      	mov	r3, r2
 8008588:	00db      	lsls	r3, r3, #3
 800858a:	1a9b      	subs	r3, r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	440b      	add	r3, r1
 8008590:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	4619      	mov	r1, r3
 800859a:	f7fe fcfc 	bl	8006f96 <USBD_LL_DataOutStage>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	3348      	adds	r3, #72	; 0x48
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	4619      	mov	r1, r3
 80085ce:	f7fe fd45 	bl	800705c <USBD_LL_DataInStage>
}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe fe59 	bl	80072a0 <USBD_LL_SOF>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085fe:	2301      	movs	r3, #1
 8008600:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d102      	bne.n	8008610 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]
 800860e:	e008      	b.n	8008622 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b02      	cmp	r3, #2
 8008616:	d102      	bne.n	800861e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008618:	2301      	movs	r3, #1
 800861a:	73fb      	strb	r3, [r7, #15]
 800861c:	e001      	b.n	8008622 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800861e:	f7f8 f9b5 	bl	800098c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008628:	7bfa      	ldrb	r2, [r7, #15]
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe fdf9 	bl	8007224 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe fda5 	bl	8007188 <USBD_LL_Reset>
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fdf4 	bl	8007244 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6812      	ldr	r2, [r2, #0]
 800866a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800867c:	4b04      	ldr	r3, [pc, #16]	; (8008690 <HAL_PCD_SuspendCallback+0x48>)
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	4a03      	ldr	r2, [pc, #12]	; (8008690 <HAL_PCD_SuspendCallback+0x48>)
 8008682:	f043 0306 	orr.w	r3, r3, #6
 8008686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	e000ed00 	.word	0xe000ed00

08008694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fde4 	bl	8007270 <USBD_LL_Resume>
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086c2:	78fa      	ldrb	r2, [r7, #3]
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fe32 	bl	8007330 <USBD_LL_IsoOUTIncomplete>
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	4611      	mov	r1, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe fdfa 	bl	80072e4 <USBD_LL_IsoINIncomplete>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fe38 	bl	800737c <USBD_LL_DevConnected>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fe35 	bl	8007392 <USBD_LL_DevDisconnected>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d13c      	bne.n	80087ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008740:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <USBD_LL_Init+0x94>)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a1e      	ldr	r2, [pc, #120]	; (80087c4 <USBD_LL_Init+0x94>)
 800874c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008750:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <USBD_LL_Init+0x94>)
 8008752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008758:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <USBD_LL_Init+0x94>)
 800875a:	2204      	movs	r2, #4
 800875c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800875e:	4b19      	ldr	r3, [pc, #100]	; (80087c4 <USBD_LL_Init+0x94>)
 8008760:	2202      	movs	r2, #2
 8008762:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008764:	4b17      	ldr	r3, [pc, #92]	; (80087c4 <USBD_LL_Init+0x94>)
 8008766:	2200      	movs	r2, #0
 8008768:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800876a:	4b16      	ldr	r3, [pc, #88]	; (80087c4 <USBD_LL_Init+0x94>)
 800876c:	2202      	movs	r2, #2
 800876e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008770:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <USBD_LL_Init+0x94>)
 8008772:	2200      	movs	r2, #0
 8008774:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008776:	4b13      	ldr	r3, [pc, #76]	; (80087c4 <USBD_LL_Init+0x94>)
 8008778:	2200      	movs	r2, #0
 800877a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800877c:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <USBD_LL_Init+0x94>)
 800877e:	2200      	movs	r2, #0
 8008780:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008782:	4b10      	ldr	r3, [pc, #64]	; (80087c4 <USBD_LL_Init+0x94>)
 8008784:	2201      	movs	r2, #1
 8008786:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008788:	4b0e      	ldr	r3, [pc, #56]	; (80087c4 <USBD_LL_Init+0x94>)
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800878e:	480d      	ldr	r0, [pc, #52]	; (80087c4 <USBD_LL_Init+0x94>)
 8008790:	f7fa fb34 	bl	8002dfc <HAL_PCD_Init>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800879a:	f7f8 f8f7 	bl	800098c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800879e:	2180      	movs	r1, #128	; 0x80
 80087a0:	4808      	ldr	r0, [pc, #32]	; (80087c4 <USBD_LL_Init+0x94>)
 80087a2:	f7fb fc92 	bl	80040ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087a6:	2240      	movs	r2, #64	; 0x40
 80087a8:	2100      	movs	r1, #0
 80087aa:	4806      	ldr	r0, [pc, #24]	; (80087c4 <USBD_LL_Init+0x94>)
 80087ac:	f7fb fc46 	bl	800403c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087b0:	2280      	movs	r2, #128	; 0x80
 80087b2:	2101      	movs	r1, #1
 80087b4:	4803      	ldr	r0, [pc, #12]	; (80087c4 <USBD_LL_Init+0x94>)
 80087b6:	f7fb fc41 	bl	800403c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20001d5c 	.word	0x20001d5c

080087c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fa fc29 	bl	8003036 <HAL_PCD_Start>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f942 	bl	8008a74 <USBD_Get_USB_Status>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	461a      	mov	r2, r3
 800880c:	4603      	mov	r3, r0
 800880e:	70fb      	strb	r3, [r7, #3]
 8008810:	460b      	mov	r3, r1
 8008812:	70bb      	strb	r3, [r7, #2]
 8008814:	4613      	mov	r3, r2
 8008816:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008826:	78bb      	ldrb	r3, [r7, #2]
 8008828:	883a      	ldrh	r2, [r7, #0]
 800882a:	78f9      	ldrb	r1, [r7, #3]
 800882c:	f7fb f80d 	bl	800384a <HAL_PCD_EP_Open>
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	4618      	mov	r0, r3
 8008838:	f000 f91c 	bl	8008a74 <USBD_Get_USB_Status>
 800883c:	4603      	mov	r3, r0
 800883e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008840:	7bbb      	ldrb	r3, [r7, #14]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	4611      	mov	r1, r2
 8008868:	4618      	mov	r0, r3
 800886a:	f7fb f856 	bl	800391a <HAL_PCD_EP_Close>
 800886e:	4603      	mov	r3, r0
 8008870:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f8fd 	bl	8008a74 <USBD_Get_USB_Status>
 800887a:	4603      	mov	r3, r0
 800887c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fb f92e 	bl	8003b08 <HAL_PCD_EP_SetStall>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 f8de 	bl	8008a74 <USBD_Get_USB_Status>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	460b      	mov	r3, r1
 80088d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088e0:	78fa      	ldrb	r2, [r7, #3]
 80088e2:	4611      	mov	r1, r2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fb f973 	bl	8003bd0 <HAL_PCD_EP_ClrStall>
 80088ea:	4603      	mov	r3, r0
 80088ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 f8bf 	bl	8008a74 <USBD_Get_USB_Status>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008916:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800891c:	2b00      	cmp	r3, #0
 800891e:	da0b      	bge.n	8008938 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008926:	68f9      	ldr	r1, [r7, #12]
 8008928:	4613      	mov	r3, r2
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	440b      	add	r3, r1
 8008932:	333e      	adds	r3, #62	; 0x3e
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	e00b      	b.n	8008950 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800893e:	68f9      	ldr	r1, [r7, #12]
 8008940:	4613      	mov	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800894e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7fa ff40 	bl	8003800 <HAL_PCD_SetAddress>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f874 	bl	8008a74 <USBD_Get_USB_Status>
 800898c:	4603      	mov	r3, r0
 800898e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008990:	7bbb      	ldrb	r3, [r7, #14]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b086      	sub	sp, #24
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	460b      	mov	r3, r1
 80089a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089b8:	7af9      	ldrb	r1, [r7, #11]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	f7fb f859 	bl	8003a74 <HAL_PCD_EP_Transmit>
 80089c2:	4603      	mov	r3, r0
 80089c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 f853 	bl	8008a74 <USBD_Get_USB_Status>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	607a      	str	r2, [r7, #4]
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	460b      	mov	r3, r1
 80089ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089fa:	7af9      	ldrb	r1, [r7, #11]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	f7fa ffd5 	bl	80039ae <HAL_PCD_EP_Receive>
 8008a04:	4603      	mov	r3, r0
 8008a06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 f832 	bl	8008a74 <USBD_Get_USB_Status>
 8008a10:	4603      	mov	r3, r0
 8008a12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a14:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a30:	78fa      	ldrb	r2, [r7, #3]
 8008a32:	4611      	mov	r1, r2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fb f805 	bl	8003a44 <HAL_PCD_EP_GetRxCount>
 8008a3a:	4603      	mov	r3, r0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a4c:	4b03      	ldr	r3, [pc, #12]	; (8008a5c <USBD_static_malloc+0x18>)
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	20000668 	.word	0x20000668

08008a60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]

}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d817      	bhi.n	8008ab8 <USBD_Get_USB_Status+0x44>
 8008a88:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <USBD_Get_USB_Status+0x1c>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008aa1 	.word	0x08008aa1
 8008a94:	08008aa7 	.word	0x08008aa7
 8008a98:	08008aad 	.word	0x08008aad
 8008a9c:	08008ab3 	.word	0x08008ab3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa4:	e00b      	b.n	8008abe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aaa:	e008      	b.n	8008abe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008aac:	2301      	movs	r3, #1
 8008aae:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab0:	e005      	b.n	8008abe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab6:	e002      	b.n	8008abe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	73fb      	strb	r3, [r7, #15]
    break;
 8008abc:	bf00      	nop
  }
  return usb_status;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <__cxa_pure_virtual>:
 8008acc:	b508      	push	{r3, lr}
 8008ace:	f000 f80d 	bl	8008aec <_ZSt9terminatev>

08008ad2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008ad2:	b508      	push	{r3, lr}
 8008ad4:	4780      	blx	r0
 8008ad6:	f000 f80e 	bl	8008af6 <abort>
	...

08008adc <_ZSt13get_terminatev>:
 8008adc:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <_ZSt13get_terminatev+0xc>)
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	f3bf 8f5b 	dmb	ish
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20000180 	.word	0x20000180

08008aec <_ZSt9terminatev>:
 8008aec:	b508      	push	{r3, lr}
 8008aee:	f7ff fff5 	bl	8008adc <_ZSt13get_terminatev>
 8008af2:	f7ff ffee 	bl	8008ad2 <_ZN10__cxxabiv111__terminateEPFvvE>

08008af6 <abort>:
 8008af6:	b508      	push	{r3, lr}
 8008af8:	2006      	movs	r0, #6
 8008afa:	f000 f86b 	bl	8008bd4 <raise>
 8008afe:	2001      	movs	r0, #1
 8008b00:	f7f8 fff4 	bl	8001aec <_exit>

08008b04 <__errno>:
 8008b04:	4b01      	ldr	r3, [pc, #4]	; (8008b0c <__errno+0x8>)
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20000184 	.word	0x20000184

08008b10 <__libc_init_array>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4d0d      	ldr	r5, [pc, #52]	; (8008b48 <__libc_init_array+0x38>)
 8008b14:	4c0d      	ldr	r4, [pc, #52]	; (8008b4c <__libc_init_array+0x3c>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	42a6      	cmp	r6, r4
 8008b1e:	d109      	bne.n	8008b34 <__libc_init_array+0x24>
 8008b20:	4d0b      	ldr	r5, [pc, #44]	; (8008b50 <__libc_init_array+0x40>)
 8008b22:	4c0c      	ldr	r4, [pc, #48]	; (8008b54 <__libc_init_array+0x44>)
 8008b24:	f000 f872 	bl	8008c0c <_init>
 8008b28:	1b64      	subs	r4, r4, r5
 8008b2a:	10a4      	asrs	r4, r4, #2
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	d105      	bne.n	8008b3e <__libc_init_array+0x2e>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b38:	4798      	blx	r3
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7ee      	b.n	8008b1c <__libc_init_array+0xc>
 8008b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b42:	4798      	blx	r3
 8008b44:	3601      	adds	r6, #1
 8008b46:	e7f2      	b.n	8008b2e <__libc_init_array+0x1e>
 8008b48:	08008cd0 	.word	0x08008cd0
 8008b4c:	08008cd0 	.word	0x08008cd0
 8008b50:	08008cd0 	.word	0x08008cd0
 8008b54:	08008cd8 	.word	0x08008cd8

08008b58 <memcpy>:
 8008b58:	440a      	add	r2, r1
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b60:	d100      	bne.n	8008b64 <memcpy+0xc>
 8008b62:	4770      	bx	lr
 8008b64:	b510      	push	{r4, lr}
 8008b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b6e:	4291      	cmp	r1, r2
 8008b70:	d1f9      	bne.n	8008b66 <memcpy+0xe>
 8008b72:	bd10      	pop	{r4, pc}

08008b74 <memset>:
 8008b74:	4402      	add	r2, r0
 8008b76:	4603      	mov	r3, r0
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d100      	bne.n	8008b7e <memset+0xa>
 8008b7c:	4770      	bx	lr
 8008b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b82:	e7f9      	b.n	8008b78 <memset+0x4>

08008b84 <_raise_r>:
 8008b84:	291f      	cmp	r1, #31
 8008b86:	b538      	push	{r3, r4, r5, lr}
 8008b88:	4604      	mov	r4, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	d904      	bls.n	8008b98 <_raise_r+0x14>
 8008b8e:	2316      	movs	r3, #22
 8008b90:	6003      	str	r3, [r0, #0]
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b9a:	b112      	cbz	r2, 8008ba2 <_raise_r+0x1e>
 8008b9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ba0:	b94b      	cbnz	r3, 8008bb6 <_raise_r+0x32>
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 f830 	bl	8008c08 <_getpid_r>
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4601      	mov	r1, r0
 8008bac:	4620      	mov	r0, r4
 8008bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb2:	f000 b817 	b.w	8008be4 <_kill_r>
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d00a      	beq.n	8008bd0 <_raise_r+0x4c>
 8008bba:	1c59      	adds	r1, r3, #1
 8008bbc:	d103      	bne.n	8008bc6 <_raise_r+0x42>
 8008bbe:	2316      	movs	r3, #22
 8008bc0:	6003      	str	r3, [r0, #0]
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	e7e7      	b.n	8008b96 <_raise_r+0x12>
 8008bc6:	2400      	movs	r4, #0
 8008bc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bcc:	4628      	mov	r0, r5
 8008bce:	4798      	blx	r3
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e7e0      	b.n	8008b96 <_raise_r+0x12>

08008bd4 <raise>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <raise+0xc>)
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f7ff bfd3 	b.w	8008b84 <_raise_r>
 8008bde:	bf00      	nop
 8008be0:	20000184 	.word	0x20000184

08008be4 <_kill_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d07      	ldr	r5, [pc, #28]	; (8008c04 <_kill_r+0x20>)
 8008be8:	2300      	movs	r3, #0
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	4611      	mov	r1, r2
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	f7f8 ff6b 	bl	8001acc <_kill>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	d102      	bne.n	8008c00 <_kill_r+0x1c>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	b103      	cbz	r3, 8008c00 <_kill_r+0x1c>
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	bd38      	pop	{r3, r4, r5, pc}
 8008c02:	bf00      	nop
 8008c04:	20002164 	.word	0x20002164

08008c08 <_getpid_r>:
 8008c08:	f7f8 bf58 	b.w	8001abc <_getpid>

08008c0c <_init>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr

08008c18 <_fini>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr
